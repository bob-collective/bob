/**

Generated by the following Solidity interface...
```solidity
interface GsnEip712Library {
    function EIP712DOMAIN_TYPEHASH() external view returns (bytes32);
    function GENERIC_PARAMS() external view returns (string memory);
    function RELAYDATA_TYPE() external view returns (bytes memory);
    function RELAYDATA_TYPEHASH() external view returns (bytes32);
    function RELAY_REQUEST_NAME() external view returns (string memory);
    function RELAY_REQUEST_SUFFIX() external view returns (string memory);
    function RELAY_REQUEST_TYPE() external view returns (bytes memory);
    function RELAY_REQUEST_TYPEHASH() external view returns (bytes32);
}
```

...which was generated by the following JSON ABI:
```json
[
  {
    "type": "function",
    "name": "EIP712DOMAIN_TYPEHASH",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "bytes32",
        "internalType": "bytes32"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "GENERIC_PARAMS",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "string",
        "internalType": "string"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "RELAYDATA_TYPE",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "bytes",
        "internalType": "bytes"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "RELAYDATA_TYPEHASH",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "bytes32",
        "internalType": "bytes32"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "RELAY_REQUEST_NAME",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "string",
        "internalType": "string"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "RELAY_REQUEST_SUFFIX",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "string",
        "internalType": "string"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "RELAY_REQUEST_TYPE",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "bytes",
        "internalType": "bytes"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "RELAY_REQUEST_TYPEHASH",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "bytes32",
        "internalType": "bytes32"
      }
    ],
    "stateMutability": "view"
  }
]
```*/
#[allow(
    non_camel_case_types,
    non_snake_case,
    clippy::pub_underscore_fields,
    clippy::style
)]
pub mod GsnEip712Library {
    use super::*;
    use alloy::sol_types as alloy_sol_types;
    /// The creation / init bytecode of the contract.
    ///
    /// ```text
    ///0x610581610034600b8282823980515f1a607314602857634e487b7160e01b5f525f60045260245ffd5b305f52607381538281f3fe7300000000000000000000000000000000000000003014608060405260043610610090575f3560e01c8063abf0d3f411610063578063abf0d3f4146100fe578063c46cf83f14610114578063c49f91d31461011c578063cc0c62b214610143575f5ffd5b8063066a310c146100945780636225e61b146100b2578063931cd38f146100ba578063987673f7146100c2575b5f5ffd5b61009c61014b565b6040516100a99190610356565b60405180910390f35b61009c610167565b61009c610210565b61009c6040518060400160405280600c81526020017f52656c617952657175657374000000000000000000000000000000000000000081525081565b610106610239565b6040519081526020016100a9565b61009c6102e9565b6101067f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f81565b610106610305565b6040518060a001604052806061815260200161042f6061913981565b6040518060400160405280600c81526020017f52656c61795265717565737400000000000000000000000000000000000000008152506040518060a001604052806061815260200161042f606191396040518060e0016040528060bc815260200161049060bc91396040516020016101df9190610386565b60408051601f19818403018152908290526101fe9392916020016103b7565b60405160208183030381529060405281565b6040518060e0016040528060bc815260200161049060bc91396040516020016101fe9190610386565b6040518060400160405280600c81526020017f52656c61795265717565737400000000000000000000000000000000000000008152506040518060a001604052806061815260200161042f606191396040518060e0016040528060bc815260200161049060bc91396040516020016102b19190610386565b60408051601f19818403018152908290526102d09392916020016103b7565b6040516020818303038152906040528051906020012081565b6040518060e0016040528060bc815260200161049060bc913981565b6040518060e0016040528060bc815260200161049060bc91398051906020012081565b5f81518084528060208401602086015e5f602082860101526020601f19601f83011685010191505092915050565b602081525f6103686020830184610328565b9392505050565b5f81518060208401855e5f93019283525090919050565b7f52656c6179446174612072656c6179446174612900000000000000000000000081525f610368601483018461036f565b5f6103c2828661036f565b7f280000000000000000000000000000000000000000000000000000000000000081526103f2600182018661036f565b90507f2c000000000000000000000000000000000000000000000000000000000000008152610424600182018561036f565b969550505050505056fe616464726573732066726f6d2c6164647265737320746f2c75696e743235362076616c75652c75696e74323536206761732c75696e74323536206e6f6e63652c627974657320646174612c75696e743235362076616c6964556e74696c54696d6552656c6179446174612875696e74323536206d61784665655065724761732c75696e74323536206d61785072696f726974794665655065724761732c75696e74323536207472616e73616374696f6e43616c6c64617461476173557365642c616464726573732072656c6179576f726b65722c61646472657373207061796d61737465722c6164647265737320666f727761726465722c6279746573207061796d6173746572446174612c75696e7432353620636c69656e74496429a2646970667358221220763d2b2612f6d0b0dc27196467fc71b448eff14956e6fda6c749e7ba911dde0664736f6c634300081b0033
    /// ```
    #[rustfmt::skip]
    #[allow(clippy::all)]
    pub static BYTECODE: alloy_sol_types::private::Bytes = alloy_sol_types::private::Bytes::from_static(
        b"a\x05\x81a\x004`\x0B\x82\x82\x829\x80Q_\x1A`s\x14`(WcNH{q`\xE0\x1B_R_`\x04R`$_\xFD[0_R`s\x81S\x82\x81\xF3\xFEs\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x000\x14`\x80`@R`\x046\x10a\0\x90W_5`\xE0\x1C\x80c\xAB\xF0\xD3\xF4\x11a\0cW\x80c\xAB\xF0\xD3\xF4\x14a\0\xFEW\x80c\xC4l\xF8?\x14a\x01\x14W\x80c\xC4\x9F\x91\xD3\x14a\x01\x1CW\x80c\xCC\x0Cb\xB2\x14a\x01CW__\xFD[\x80c\x06j1\x0C\x14a\0\x94W\x80cb%\xE6\x1B\x14a\0\xB2W\x80c\x93\x1C\xD3\x8F\x14a\0\xBAW\x80c\x98vs\xF7\x14a\0\xC2W[__\xFD[a\0\x9Ca\x01KV[`@Qa\0\xA9\x91\x90a\x03VV[`@Q\x80\x91\x03\x90\xF3[a\0\x9Ca\x01gV[a\0\x9Ca\x02\x10V[a\0\x9C`@Q\x80`@\x01`@R\x80`\x0C\x81R` \x01\x7FRelayRequest\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81RP\x81V[a\x01\x06a\x029V[`@Q\x90\x81R` \x01a\0\xA9V[a\0\x9Ca\x02\xE9V[a\x01\x06\x7F\x8Bs\xC3\xC6\x9B\xB8\xFE=Q.\xCCL\xF7Y\xCCy#\x9F{\x17\x9B\x0F\xFA\xCA\xA9\xA7]R+9@\x0F\x81V[a\x01\x06a\x03\x05V[`@Q\x80`\xA0\x01`@R\x80`a\x81R` \x01a\x04/`a\x919\x81V[`@Q\x80`@\x01`@R\x80`\x0C\x81R` \x01\x7FRelayRequest\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81RP`@Q\x80`\xA0\x01`@R\x80`a\x81R` \x01a\x04/`a\x919`@Q\x80`\xE0\x01`@R\x80`\xBC\x81R` \x01a\x04\x90`\xBC\x919`@Q` \x01a\x01\xDF\x91\x90a\x03\x86V[`@\x80Q`\x1F\x19\x81\x84\x03\x01\x81R\x90\x82\x90Ra\x01\xFE\x93\x92\x91` \x01a\x03\xB7V[`@Q` \x81\x83\x03\x03\x81R\x90`@R\x81V[`@Q\x80`\xE0\x01`@R\x80`\xBC\x81R` \x01a\x04\x90`\xBC\x919`@Q` \x01a\x01\xFE\x91\x90a\x03\x86V[`@Q\x80`@\x01`@R\x80`\x0C\x81R` \x01\x7FRelayRequest\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81RP`@Q\x80`\xA0\x01`@R\x80`a\x81R` \x01a\x04/`a\x919`@Q\x80`\xE0\x01`@R\x80`\xBC\x81R` \x01a\x04\x90`\xBC\x919`@Q` \x01a\x02\xB1\x91\x90a\x03\x86V[`@\x80Q`\x1F\x19\x81\x84\x03\x01\x81R\x90\x82\x90Ra\x02\xD0\x93\x92\x91` \x01a\x03\xB7V[`@Q` \x81\x83\x03\x03\x81R\x90`@R\x80Q\x90` \x01 \x81V[`@Q\x80`\xE0\x01`@R\x80`\xBC\x81R` \x01a\x04\x90`\xBC\x919\x81V[`@Q\x80`\xE0\x01`@R\x80`\xBC\x81R` \x01a\x04\x90`\xBC\x919\x80Q\x90` \x01 \x81V[_\x81Q\x80\x84R\x80` \x84\x01` \x86\x01^_` \x82\x86\x01\x01R` `\x1F\x19`\x1F\x83\x01\x16\x85\x01\x01\x91PP\x92\x91PPV[` \x81R_a\x03h` \x83\x01\x84a\x03(V[\x93\x92PPPV[_\x81Q\x80` \x84\x01\x85^_\x93\x01\x92\x83RP\x90\x91\x90PV[\x7FRelayData relayData)\0\0\0\0\0\0\0\0\0\0\0\0\x81R_a\x03h`\x14\x83\x01\x84a\x03oV[_a\x03\xC2\x82\x86a\x03oV[\x7F(\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81Ra\x03\xF2`\x01\x82\x01\x86a\x03oV[\x90P\x7F,\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81Ra\x04$`\x01\x82\x01\x85a\x03oV[\x96\x95PPPPPPV\xFEaddress from,address to,uint256 value,uint256 gas,uint256 nonce,bytes data,uint256 validUntilTimeRelayData(uint256 maxFeePerGas,uint256 maxPriorityFeePerGas,uint256 transactionCalldataGasUsed,address relayWorker,address paymaster,address forwarder,bytes paymasterData,uint256 clientId)\xA2dipfsX\"\x12 v=+&\x12\xF6\xD0\xB0\xDC'\x19dg\xFCq\xB4H\xEF\xF1IV\xE6\xFD\xA6\xC7I\xE7\xBA\x91\x1D\xDE\x06dsolcC\0\x08\x1B\x003",
    );
    /// The runtime bytecode of the contract, as deployed on the network.
    ///
    /// ```text
    ///0x7300000000000000000000000000000000000000003014608060405260043610610090575f3560e01c8063abf0d3f411610063578063abf0d3f4146100fe578063c46cf83f14610114578063c49f91d31461011c578063cc0c62b214610143575f5ffd5b8063066a310c146100945780636225e61b146100b2578063931cd38f146100ba578063987673f7146100c2575b5f5ffd5b61009c61014b565b6040516100a99190610356565b60405180910390f35b61009c610167565b61009c610210565b61009c6040518060400160405280600c81526020017f52656c617952657175657374000000000000000000000000000000000000000081525081565b610106610239565b6040519081526020016100a9565b61009c6102e9565b6101067f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f81565b610106610305565b6040518060a001604052806061815260200161042f6061913981565b6040518060400160405280600c81526020017f52656c61795265717565737400000000000000000000000000000000000000008152506040518060a001604052806061815260200161042f606191396040518060e0016040528060bc815260200161049060bc91396040516020016101df9190610386565b60408051601f19818403018152908290526101fe9392916020016103b7565b60405160208183030381529060405281565b6040518060e0016040528060bc815260200161049060bc91396040516020016101fe9190610386565b6040518060400160405280600c81526020017f52656c61795265717565737400000000000000000000000000000000000000008152506040518060a001604052806061815260200161042f606191396040518060e0016040528060bc815260200161049060bc91396040516020016102b19190610386565b60408051601f19818403018152908290526102d09392916020016103b7565b6040516020818303038152906040528051906020012081565b6040518060e0016040528060bc815260200161049060bc913981565b6040518060e0016040528060bc815260200161049060bc91398051906020012081565b5f81518084528060208401602086015e5f602082860101526020601f19601f83011685010191505092915050565b602081525f6103686020830184610328565b9392505050565b5f81518060208401855e5f93019283525090919050565b7f52656c6179446174612072656c6179446174612900000000000000000000000081525f610368601483018461036f565b5f6103c2828661036f565b7f280000000000000000000000000000000000000000000000000000000000000081526103f2600182018661036f565b90507f2c000000000000000000000000000000000000000000000000000000000000008152610424600182018561036f565b969550505050505056fe616464726573732066726f6d2c6164647265737320746f2c75696e743235362076616c75652c75696e74323536206761732c75696e74323536206e6f6e63652c627974657320646174612c75696e743235362076616c6964556e74696c54696d6552656c6179446174612875696e74323536206d61784665655065724761732c75696e74323536206d61785072696f726974794665655065724761732c75696e74323536207472616e73616374696f6e43616c6c64617461476173557365642c616464726573732072656c6179576f726b65722c61646472657373207061796d61737465722c6164647265737320666f727761726465722c6279746573207061796d6173746572446174612c75696e7432353620636c69656e74496429a2646970667358221220763d2b2612f6d0b0dc27196467fc71b448eff14956e6fda6c749e7ba911dde0664736f6c634300081b0033
    /// ```
    #[rustfmt::skip]
    #[allow(clippy::all)]
    pub static DEPLOYED_BYTECODE: alloy_sol_types::private::Bytes = alloy_sol_types::private::Bytes::from_static(
        b"s\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x000\x14`\x80`@R`\x046\x10a\0\x90W_5`\xE0\x1C\x80c\xAB\xF0\xD3\xF4\x11a\0cW\x80c\xAB\xF0\xD3\xF4\x14a\0\xFEW\x80c\xC4l\xF8?\x14a\x01\x14W\x80c\xC4\x9F\x91\xD3\x14a\x01\x1CW\x80c\xCC\x0Cb\xB2\x14a\x01CW__\xFD[\x80c\x06j1\x0C\x14a\0\x94W\x80cb%\xE6\x1B\x14a\0\xB2W\x80c\x93\x1C\xD3\x8F\x14a\0\xBAW\x80c\x98vs\xF7\x14a\0\xC2W[__\xFD[a\0\x9Ca\x01KV[`@Qa\0\xA9\x91\x90a\x03VV[`@Q\x80\x91\x03\x90\xF3[a\0\x9Ca\x01gV[a\0\x9Ca\x02\x10V[a\0\x9C`@Q\x80`@\x01`@R\x80`\x0C\x81R` \x01\x7FRelayRequest\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81RP\x81V[a\x01\x06a\x029V[`@Q\x90\x81R` \x01a\0\xA9V[a\0\x9Ca\x02\xE9V[a\x01\x06\x7F\x8Bs\xC3\xC6\x9B\xB8\xFE=Q.\xCCL\xF7Y\xCCy#\x9F{\x17\x9B\x0F\xFA\xCA\xA9\xA7]R+9@\x0F\x81V[a\x01\x06a\x03\x05V[`@Q\x80`\xA0\x01`@R\x80`a\x81R` \x01a\x04/`a\x919\x81V[`@Q\x80`@\x01`@R\x80`\x0C\x81R` \x01\x7FRelayRequest\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81RP`@Q\x80`\xA0\x01`@R\x80`a\x81R` \x01a\x04/`a\x919`@Q\x80`\xE0\x01`@R\x80`\xBC\x81R` \x01a\x04\x90`\xBC\x919`@Q` \x01a\x01\xDF\x91\x90a\x03\x86V[`@\x80Q`\x1F\x19\x81\x84\x03\x01\x81R\x90\x82\x90Ra\x01\xFE\x93\x92\x91` \x01a\x03\xB7V[`@Q` \x81\x83\x03\x03\x81R\x90`@R\x81V[`@Q\x80`\xE0\x01`@R\x80`\xBC\x81R` \x01a\x04\x90`\xBC\x919`@Q` \x01a\x01\xFE\x91\x90a\x03\x86V[`@Q\x80`@\x01`@R\x80`\x0C\x81R` \x01\x7FRelayRequest\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81RP`@Q\x80`\xA0\x01`@R\x80`a\x81R` \x01a\x04/`a\x919`@Q\x80`\xE0\x01`@R\x80`\xBC\x81R` \x01a\x04\x90`\xBC\x919`@Q` \x01a\x02\xB1\x91\x90a\x03\x86V[`@\x80Q`\x1F\x19\x81\x84\x03\x01\x81R\x90\x82\x90Ra\x02\xD0\x93\x92\x91` \x01a\x03\xB7V[`@Q` \x81\x83\x03\x03\x81R\x90`@R\x80Q\x90` \x01 \x81V[`@Q\x80`\xE0\x01`@R\x80`\xBC\x81R` \x01a\x04\x90`\xBC\x919\x81V[`@Q\x80`\xE0\x01`@R\x80`\xBC\x81R` \x01a\x04\x90`\xBC\x919\x80Q\x90` \x01 \x81V[_\x81Q\x80\x84R\x80` \x84\x01` \x86\x01^_` \x82\x86\x01\x01R` `\x1F\x19`\x1F\x83\x01\x16\x85\x01\x01\x91PP\x92\x91PPV[` \x81R_a\x03h` \x83\x01\x84a\x03(V[\x93\x92PPPV[_\x81Q\x80` \x84\x01\x85^_\x93\x01\x92\x83RP\x90\x91\x90PV[\x7FRelayData relayData)\0\0\0\0\0\0\0\0\0\0\0\0\x81R_a\x03h`\x14\x83\x01\x84a\x03oV[_a\x03\xC2\x82\x86a\x03oV[\x7F(\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81Ra\x03\xF2`\x01\x82\x01\x86a\x03oV[\x90P\x7F,\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81Ra\x04$`\x01\x82\x01\x85a\x03oV[\x96\x95PPPPPPV\xFEaddress from,address to,uint256 value,uint256 gas,uint256 nonce,bytes data,uint256 validUntilTimeRelayData(uint256 maxFeePerGas,uint256 maxPriorityFeePerGas,uint256 transactionCalldataGasUsed,address relayWorker,address paymaster,address forwarder,bytes paymasterData,uint256 clientId)\xA2dipfsX\"\x12 v=+&\x12\xF6\xD0\xB0\xDC'\x19dg\xFCq\xB4H\xEF\xF1IV\xE6\xFD\xA6\xC7I\xE7\xBA\x91\x1D\xDE\x06dsolcC\0\x08\x1B\x003",
    );
    /**Function with signature `EIP712DOMAIN_TYPEHASH()` and selector `0xc49f91d3`.
```solidity
function EIP712DOMAIN_TYPEHASH() external view returns (bytes32);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct EIP712DOMAIN_TYPEHASHCall {}
    ///Container type for the return parameters of the [`EIP712DOMAIN_TYPEHASH()`](EIP712DOMAIN_TYPEHASHCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct EIP712DOMAIN_TYPEHASHReturn {
        pub _0: alloy::sol_types::private::FixedBytes<32>,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<EIP712DOMAIN_TYPEHASHCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: EIP712DOMAIN_TYPEHASHCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for EIP712DOMAIN_TYPEHASHCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::FixedBytes<32>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::FixedBytes<32>,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<EIP712DOMAIN_TYPEHASHReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: EIP712DOMAIN_TYPEHASHReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for EIP712DOMAIN_TYPEHASHReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for EIP712DOMAIN_TYPEHASHCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = EIP712DOMAIN_TYPEHASHReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::FixedBytes<32>,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "EIP712DOMAIN_TYPEHASH()";
            const SELECTOR: [u8; 4] = [196u8, 159u8, 145u8, 211u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `GENERIC_PARAMS()` and selector `0x066a310c`.
```solidity
function GENERIC_PARAMS() external view returns (string memory);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct GENERIC_PARAMSCall {}
    ///Container type for the return parameters of the [`GENERIC_PARAMS()`](GENERIC_PARAMSCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct GENERIC_PARAMSReturn {
        pub _0: alloy::sol_types::private::String,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<GENERIC_PARAMSCall> for UnderlyingRustTuple<'_> {
                fn from(value: GENERIC_PARAMSCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for GENERIC_PARAMSCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::String,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::String,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<GENERIC_PARAMSReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: GENERIC_PARAMSReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for GENERIC_PARAMSReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for GENERIC_PARAMSCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = GENERIC_PARAMSReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::String,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "GENERIC_PARAMS()";
            const SELECTOR: [u8; 4] = [6u8, 106u8, 49u8, 12u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `RELAYDATA_TYPE()` and selector `0xc46cf83f`.
```solidity
function RELAYDATA_TYPE() external view returns (bytes memory);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct RELAYDATA_TYPECall {}
    ///Container type for the return parameters of the [`RELAYDATA_TYPE()`](RELAYDATA_TYPECall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct RELAYDATA_TYPEReturn {
        pub _0: alloy::sol_types::private::Bytes,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<RELAYDATA_TYPECall> for UnderlyingRustTuple<'_> {
                fn from(value: RELAYDATA_TYPECall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for RELAYDATA_TYPECall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Bytes,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Bytes,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<RELAYDATA_TYPEReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: RELAYDATA_TYPEReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for RELAYDATA_TYPEReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for RELAYDATA_TYPECall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = RELAYDATA_TYPEReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Bytes,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "RELAYDATA_TYPE()";
            const SELECTOR: [u8; 4] = [196u8, 108u8, 248u8, 63u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `RELAYDATA_TYPEHASH()` and selector `0xcc0c62b2`.
```solidity
function RELAYDATA_TYPEHASH() external view returns (bytes32);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct RELAYDATA_TYPEHASHCall {}
    ///Container type for the return parameters of the [`RELAYDATA_TYPEHASH()`](RELAYDATA_TYPEHASHCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct RELAYDATA_TYPEHASHReturn {
        pub _0: alloy::sol_types::private::FixedBytes<32>,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<RELAYDATA_TYPEHASHCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: RELAYDATA_TYPEHASHCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for RELAYDATA_TYPEHASHCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::FixedBytes<32>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::FixedBytes<32>,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<RELAYDATA_TYPEHASHReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: RELAYDATA_TYPEHASHReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for RELAYDATA_TYPEHASHReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for RELAYDATA_TYPEHASHCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = RELAYDATA_TYPEHASHReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::FixedBytes<32>,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "RELAYDATA_TYPEHASH()";
            const SELECTOR: [u8; 4] = [204u8, 12u8, 98u8, 178u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `RELAY_REQUEST_NAME()` and selector `0x987673f7`.
```solidity
function RELAY_REQUEST_NAME() external view returns (string memory);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct RELAY_REQUEST_NAMECall {}
    ///Container type for the return parameters of the [`RELAY_REQUEST_NAME()`](RELAY_REQUEST_NAMECall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct RELAY_REQUEST_NAMEReturn {
        pub _0: alloy::sol_types::private::String,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<RELAY_REQUEST_NAMECall>
            for UnderlyingRustTuple<'_> {
                fn from(value: RELAY_REQUEST_NAMECall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for RELAY_REQUEST_NAMECall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::String,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::String,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<RELAY_REQUEST_NAMEReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: RELAY_REQUEST_NAMEReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for RELAY_REQUEST_NAMEReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for RELAY_REQUEST_NAMECall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = RELAY_REQUEST_NAMEReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::String,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "RELAY_REQUEST_NAME()";
            const SELECTOR: [u8; 4] = [152u8, 118u8, 115u8, 247u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `RELAY_REQUEST_SUFFIX()` and selector `0x931cd38f`.
```solidity
function RELAY_REQUEST_SUFFIX() external view returns (string memory);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct RELAY_REQUEST_SUFFIXCall {}
    ///Container type for the return parameters of the [`RELAY_REQUEST_SUFFIX()`](RELAY_REQUEST_SUFFIXCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct RELAY_REQUEST_SUFFIXReturn {
        pub _0: alloy::sol_types::private::String,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<RELAY_REQUEST_SUFFIXCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: RELAY_REQUEST_SUFFIXCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for RELAY_REQUEST_SUFFIXCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::String,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::String,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<RELAY_REQUEST_SUFFIXReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: RELAY_REQUEST_SUFFIXReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for RELAY_REQUEST_SUFFIXReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for RELAY_REQUEST_SUFFIXCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = RELAY_REQUEST_SUFFIXReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::String,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "RELAY_REQUEST_SUFFIX()";
            const SELECTOR: [u8; 4] = [147u8, 28u8, 211u8, 143u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `RELAY_REQUEST_TYPE()` and selector `0x6225e61b`.
```solidity
function RELAY_REQUEST_TYPE() external view returns (bytes memory);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct RELAY_REQUEST_TYPECall {}
    ///Container type for the return parameters of the [`RELAY_REQUEST_TYPE()`](RELAY_REQUEST_TYPECall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct RELAY_REQUEST_TYPEReturn {
        pub _0: alloy::sol_types::private::Bytes,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<RELAY_REQUEST_TYPECall>
            for UnderlyingRustTuple<'_> {
                fn from(value: RELAY_REQUEST_TYPECall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for RELAY_REQUEST_TYPECall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Bytes,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Bytes,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<RELAY_REQUEST_TYPEReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: RELAY_REQUEST_TYPEReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for RELAY_REQUEST_TYPEReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for RELAY_REQUEST_TYPECall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = RELAY_REQUEST_TYPEReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Bytes,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "RELAY_REQUEST_TYPE()";
            const SELECTOR: [u8; 4] = [98u8, 37u8, 230u8, 27u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `RELAY_REQUEST_TYPEHASH()` and selector `0xabf0d3f4`.
```solidity
function RELAY_REQUEST_TYPEHASH() external view returns (bytes32);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct RELAY_REQUEST_TYPEHASHCall {}
    ///Container type for the return parameters of the [`RELAY_REQUEST_TYPEHASH()`](RELAY_REQUEST_TYPEHASHCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct RELAY_REQUEST_TYPEHASHReturn {
        pub _0: alloy::sol_types::private::FixedBytes<32>,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<RELAY_REQUEST_TYPEHASHCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: RELAY_REQUEST_TYPEHASHCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for RELAY_REQUEST_TYPEHASHCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::FixedBytes<32>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::FixedBytes<32>,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<RELAY_REQUEST_TYPEHASHReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: RELAY_REQUEST_TYPEHASHReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for RELAY_REQUEST_TYPEHASHReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for RELAY_REQUEST_TYPEHASHCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = RELAY_REQUEST_TYPEHASHReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::FixedBytes<32>,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "RELAY_REQUEST_TYPEHASH()";
            const SELECTOR: [u8; 4] = [171u8, 240u8, 211u8, 244u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    ///Container for all the [`GsnEip712Library`](self) function calls.
    pub enum GsnEip712LibraryCalls {
        EIP712DOMAIN_TYPEHASH(EIP712DOMAIN_TYPEHASHCall),
        GENERIC_PARAMS(GENERIC_PARAMSCall),
        RELAYDATA_TYPE(RELAYDATA_TYPECall),
        RELAYDATA_TYPEHASH(RELAYDATA_TYPEHASHCall),
        RELAY_REQUEST_NAME(RELAY_REQUEST_NAMECall),
        RELAY_REQUEST_SUFFIX(RELAY_REQUEST_SUFFIXCall),
        RELAY_REQUEST_TYPE(RELAY_REQUEST_TYPECall),
        RELAY_REQUEST_TYPEHASH(RELAY_REQUEST_TYPEHASHCall),
    }
    #[automatically_derived]
    impl GsnEip712LibraryCalls {
        /// All the selectors of this enum.
        ///
        /// Note that the selectors might not be in the same order as the variants.
        /// No guarantees are made about the order of the selectors.
        ///
        /// Prefer using `SolInterface` methods instead.
        pub const SELECTORS: &'static [[u8; 4usize]] = &[
            [6u8, 106u8, 49u8, 12u8],
            [98u8, 37u8, 230u8, 27u8],
            [147u8, 28u8, 211u8, 143u8],
            [152u8, 118u8, 115u8, 247u8],
            [171u8, 240u8, 211u8, 244u8],
            [196u8, 108u8, 248u8, 63u8],
            [196u8, 159u8, 145u8, 211u8],
            [204u8, 12u8, 98u8, 178u8],
        ];
    }
    #[automatically_derived]
    impl alloy_sol_types::SolInterface for GsnEip712LibraryCalls {
        const NAME: &'static str = "GsnEip712LibraryCalls";
        const MIN_DATA_LENGTH: usize = 0usize;
        const COUNT: usize = 8usize;
        #[inline]
        fn selector(&self) -> [u8; 4] {
            match self {
                Self::EIP712DOMAIN_TYPEHASH(_) => {
                    <EIP712DOMAIN_TYPEHASHCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::GENERIC_PARAMS(_) => {
                    <GENERIC_PARAMSCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::RELAYDATA_TYPE(_) => {
                    <RELAYDATA_TYPECall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::RELAYDATA_TYPEHASH(_) => {
                    <RELAYDATA_TYPEHASHCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::RELAY_REQUEST_NAME(_) => {
                    <RELAY_REQUEST_NAMECall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::RELAY_REQUEST_SUFFIX(_) => {
                    <RELAY_REQUEST_SUFFIXCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::RELAY_REQUEST_TYPE(_) => {
                    <RELAY_REQUEST_TYPECall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::RELAY_REQUEST_TYPEHASH(_) => {
                    <RELAY_REQUEST_TYPEHASHCall as alloy_sol_types::SolCall>::SELECTOR
                }
            }
        }
        #[inline]
        fn selector_at(i: usize) -> ::core::option::Option<[u8; 4]> {
            Self::SELECTORS.get(i).copied()
        }
        #[inline]
        fn valid_selector(selector: [u8; 4]) -> bool {
            Self::SELECTORS.binary_search(&selector).is_ok()
        }
        #[inline]
        #[allow(unsafe_code, non_snake_case)]
        fn abi_decode_raw(
            selector: [u8; 4],
            data: &[u8],
            validate: bool,
        ) -> alloy_sol_types::Result<Self> {
            static DECODE_SHIMS: &[fn(
                &[u8],
                bool,
            ) -> alloy_sol_types::Result<GsnEip712LibraryCalls>] = &[
                {
                    fn GENERIC_PARAMS(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<GsnEip712LibraryCalls> {
                        <GENERIC_PARAMSCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(GsnEip712LibraryCalls::GENERIC_PARAMS)
                    }
                    GENERIC_PARAMS
                },
                {
                    fn RELAY_REQUEST_TYPE(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<GsnEip712LibraryCalls> {
                        <RELAY_REQUEST_TYPECall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(GsnEip712LibraryCalls::RELAY_REQUEST_TYPE)
                    }
                    RELAY_REQUEST_TYPE
                },
                {
                    fn RELAY_REQUEST_SUFFIX(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<GsnEip712LibraryCalls> {
                        <RELAY_REQUEST_SUFFIXCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(GsnEip712LibraryCalls::RELAY_REQUEST_SUFFIX)
                    }
                    RELAY_REQUEST_SUFFIX
                },
                {
                    fn RELAY_REQUEST_NAME(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<GsnEip712LibraryCalls> {
                        <RELAY_REQUEST_NAMECall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(GsnEip712LibraryCalls::RELAY_REQUEST_NAME)
                    }
                    RELAY_REQUEST_NAME
                },
                {
                    fn RELAY_REQUEST_TYPEHASH(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<GsnEip712LibraryCalls> {
                        <RELAY_REQUEST_TYPEHASHCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(GsnEip712LibraryCalls::RELAY_REQUEST_TYPEHASH)
                    }
                    RELAY_REQUEST_TYPEHASH
                },
                {
                    fn RELAYDATA_TYPE(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<GsnEip712LibraryCalls> {
                        <RELAYDATA_TYPECall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(GsnEip712LibraryCalls::RELAYDATA_TYPE)
                    }
                    RELAYDATA_TYPE
                },
                {
                    fn EIP712DOMAIN_TYPEHASH(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<GsnEip712LibraryCalls> {
                        <EIP712DOMAIN_TYPEHASHCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(GsnEip712LibraryCalls::EIP712DOMAIN_TYPEHASH)
                    }
                    EIP712DOMAIN_TYPEHASH
                },
                {
                    fn RELAYDATA_TYPEHASH(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<GsnEip712LibraryCalls> {
                        <RELAYDATA_TYPEHASHCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(GsnEip712LibraryCalls::RELAYDATA_TYPEHASH)
                    }
                    RELAYDATA_TYPEHASH
                },
            ];
            let Ok(idx) = Self::SELECTORS.binary_search(&selector) else {
                return Err(
                    alloy_sol_types::Error::unknown_selector(
                        <Self as alloy_sol_types::SolInterface>::NAME,
                        selector,
                    ),
                );
            };
            (unsafe { DECODE_SHIMS.get_unchecked(idx) })(data, validate)
        }
        #[inline]
        fn abi_encoded_size(&self) -> usize {
            match self {
                Self::EIP712DOMAIN_TYPEHASH(inner) => {
                    <EIP712DOMAIN_TYPEHASHCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::GENERIC_PARAMS(inner) => {
                    <GENERIC_PARAMSCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::RELAYDATA_TYPE(inner) => {
                    <RELAYDATA_TYPECall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::RELAYDATA_TYPEHASH(inner) => {
                    <RELAYDATA_TYPEHASHCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::RELAY_REQUEST_NAME(inner) => {
                    <RELAY_REQUEST_NAMECall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::RELAY_REQUEST_SUFFIX(inner) => {
                    <RELAY_REQUEST_SUFFIXCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::RELAY_REQUEST_TYPE(inner) => {
                    <RELAY_REQUEST_TYPECall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::RELAY_REQUEST_TYPEHASH(inner) => {
                    <RELAY_REQUEST_TYPEHASHCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
            }
        }
        #[inline]
        fn abi_encode_raw(&self, out: &mut alloy_sol_types::private::Vec<u8>) {
            match self {
                Self::EIP712DOMAIN_TYPEHASH(inner) => {
                    <EIP712DOMAIN_TYPEHASHCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::GENERIC_PARAMS(inner) => {
                    <GENERIC_PARAMSCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::RELAYDATA_TYPE(inner) => {
                    <RELAYDATA_TYPECall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::RELAYDATA_TYPEHASH(inner) => {
                    <RELAYDATA_TYPEHASHCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::RELAY_REQUEST_NAME(inner) => {
                    <RELAY_REQUEST_NAMECall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::RELAY_REQUEST_SUFFIX(inner) => {
                    <RELAY_REQUEST_SUFFIXCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::RELAY_REQUEST_TYPE(inner) => {
                    <RELAY_REQUEST_TYPECall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::RELAY_REQUEST_TYPEHASH(inner) => {
                    <RELAY_REQUEST_TYPEHASHCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
            }
        }
    }
    use alloy::contract as alloy_contract;
    /**Creates a new wrapper around an on-chain [`GsnEip712Library`](self) contract instance.

See the [wrapper's documentation](`GsnEip712LibraryInstance`) for more details.*/
    #[inline]
    pub const fn new<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    >(
        address: alloy_sol_types::private::Address,
        provider: P,
    ) -> GsnEip712LibraryInstance<T, P, N> {
        GsnEip712LibraryInstance::<T, P, N>::new(address, provider)
    }
    /**Deploys this contract using the given `provider` and constructor arguments, if any.

Returns a new instance of the contract, if the deployment was successful.

For more fine-grained control over the deployment process, use [`deploy_builder`] instead.*/
    #[inline]
    pub fn deploy<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    >(
        provider: P,
    ) -> impl ::core::future::Future<
        Output = alloy_contract::Result<GsnEip712LibraryInstance<T, P, N>>,
    > {
        GsnEip712LibraryInstance::<T, P, N>::deploy(provider)
    }
    /**Creates a `RawCallBuilder` for deploying this contract using the given `provider`
and constructor arguments, if any.

This is a simple wrapper around creating a `RawCallBuilder` with the data set to
the bytecode concatenated with the constructor's ABI-encoded arguments.*/
    #[inline]
    pub fn deploy_builder<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    >(provider: P) -> alloy_contract::RawCallBuilder<T, P, N> {
        GsnEip712LibraryInstance::<T, P, N>::deploy_builder(provider)
    }
    /**A [`GsnEip712Library`](self) instance.

Contains type-safe methods for interacting with an on-chain instance of the
[`GsnEip712Library`](self) contract located at a given `address`, using a given
provider `P`.

If the contract bytecode is available (see the [`sol!`](alloy_sol_types::sol!)
documentation on how to provide it), the `deploy` and `deploy_builder` methods can
be used to deploy a new instance of the contract.

See the [module-level documentation](self) for all the available methods.*/
    #[derive(Clone)]
    pub struct GsnEip712LibraryInstance<T, P, N = alloy_contract::private::Ethereum> {
        address: alloy_sol_types::private::Address,
        provider: P,
        _network_transport: ::core::marker::PhantomData<(N, T)>,
    }
    #[automatically_derived]
    impl<T, P, N> ::core::fmt::Debug for GsnEip712LibraryInstance<T, P, N> {
        #[inline]
        fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
            f.debug_tuple("GsnEip712LibraryInstance").field(&self.address).finish()
        }
    }
    /// Instantiation and getters/setters.
    #[automatically_derived]
    impl<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    > GsnEip712LibraryInstance<T, P, N> {
        /**Creates a new wrapper around an on-chain [`GsnEip712Library`](self) contract instance.

See the [wrapper's documentation](`GsnEip712LibraryInstance`) for more details.*/
        #[inline]
        pub const fn new(
            address: alloy_sol_types::private::Address,
            provider: P,
        ) -> Self {
            Self {
                address,
                provider,
                _network_transport: ::core::marker::PhantomData,
            }
        }
        /**Deploys this contract using the given `provider` and constructor arguments, if any.

Returns a new instance of the contract, if the deployment was successful.

For more fine-grained control over the deployment process, use [`deploy_builder`] instead.*/
        #[inline]
        pub async fn deploy(
            provider: P,
        ) -> alloy_contract::Result<GsnEip712LibraryInstance<T, P, N>> {
            let call_builder = Self::deploy_builder(provider);
            let contract_address = call_builder.deploy().await?;
            Ok(Self::new(contract_address, call_builder.provider))
        }
        /**Creates a `RawCallBuilder` for deploying this contract using the given `provider`
and constructor arguments, if any.

This is a simple wrapper around creating a `RawCallBuilder` with the data set to
the bytecode concatenated with the constructor's ABI-encoded arguments.*/
        #[inline]
        pub fn deploy_builder(provider: P) -> alloy_contract::RawCallBuilder<T, P, N> {
            alloy_contract::RawCallBuilder::new_raw_deploy(
                provider,
                ::core::clone::Clone::clone(&BYTECODE),
            )
        }
        /// Returns a reference to the address.
        #[inline]
        pub const fn address(&self) -> &alloy_sol_types::private::Address {
            &self.address
        }
        /// Sets the address.
        #[inline]
        pub fn set_address(&mut self, address: alloy_sol_types::private::Address) {
            self.address = address;
        }
        /// Sets the address and returns `self`.
        pub fn at(mut self, address: alloy_sol_types::private::Address) -> Self {
            self.set_address(address);
            self
        }
        /// Returns a reference to the provider.
        #[inline]
        pub const fn provider(&self) -> &P {
            &self.provider
        }
    }
    impl<T, P: ::core::clone::Clone, N> GsnEip712LibraryInstance<T, &P, N> {
        /// Clones the provider and returns a new instance with the cloned provider.
        #[inline]
        pub fn with_cloned_provider(self) -> GsnEip712LibraryInstance<T, P, N> {
            GsnEip712LibraryInstance {
                address: self.address,
                provider: ::core::clone::Clone::clone(&self.provider),
                _network_transport: ::core::marker::PhantomData,
            }
        }
    }
    /// Function calls.
    #[automatically_derived]
    impl<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    > GsnEip712LibraryInstance<T, P, N> {
        /// Creates a new call builder using this contract instance's provider and address.
        ///
        /// Note that the call can be any function call, not just those defined in this
        /// contract. Prefer using the other methods for building type-safe contract calls.
        pub fn call_builder<C: alloy_sol_types::SolCall>(
            &self,
            call: &C,
        ) -> alloy_contract::SolCallBuilder<T, &P, C, N> {
            alloy_contract::SolCallBuilder::new_sol(&self.provider, &self.address, call)
        }
        ///Creates a new call builder for the [`EIP712DOMAIN_TYPEHASH`] function.
        pub fn EIP712DOMAIN_TYPEHASH(
            &self,
        ) -> alloy_contract::SolCallBuilder<T, &P, EIP712DOMAIN_TYPEHASHCall, N> {
            self.call_builder(&EIP712DOMAIN_TYPEHASHCall {})
        }
        ///Creates a new call builder for the [`GENERIC_PARAMS`] function.
        pub fn GENERIC_PARAMS(
            &self,
        ) -> alloy_contract::SolCallBuilder<T, &P, GENERIC_PARAMSCall, N> {
            self.call_builder(&GENERIC_PARAMSCall {})
        }
        ///Creates a new call builder for the [`RELAYDATA_TYPE`] function.
        pub fn RELAYDATA_TYPE(
            &self,
        ) -> alloy_contract::SolCallBuilder<T, &P, RELAYDATA_TYPECall, N> {
            self.call_builder(&RELAYDATA_TYPECall {})
        }
        ///Creates a new call builder for the [`RELAYDATA_TYPEHASH`] function.
        pub fn RELAYDATA_TYPEHASH(
            &self,
        ) -> alloy_contract::SolCallBuilder<T, &P, RELAYDATA_TYPEHASHCall, N> {
            self.call_builder(&RELAYDATA_TYPEHASHCall {})
        }
        ///Creates a new call builder for the [`RELAY_REQUEST_NAME`] function.
        pub fn RELAY_REQUEST_NAME(
            &self,
        ) -> alloy_contract::SolCallBuilder<T, &P, RELAY_REQUEST_NAMECall, N> {
            self.call_builder(&RELAY_REQUEST_NAMECall {})
        }
        ///Creates a new call builder for the [`RELAY_REQUEST_SUFFIX`] function.
        pub fn RELAY_REQUEST_SUFFIX(
            &self,
        ) -> alloy_contract::SolCallBuilder<T, &P, RELAY_REQUEST_SUFFIXCall, N> {
            self.call_builder(&RELAY_REQUEST_SUFFIXCall {})
        }
        ///Creates a new call builder for the [`RELAY_REQUEST_TYPE`] function.
        pub fn RELAY_REQUEST_TYPE(
            &self,
        ) -> alloy_contract::SolCallBuilder<T, &P, RELAY_REQUEST_TYPECall, N> {
            self.call_builder(&RELAY_REQUEST_TYPECall {})
        }
        ///Creates a new call builder for the [`RELAY_REQUEST_TYPEHASH`] function.
        pub fn RELAY_REQUEST_TYPEHASH(
            &self,
        ) -> alloy_contract::SolCallBuilder<T, &P, RELAY_REQUEST_TYPEHASHCall, N> {
            self.call_builder(&RELAY_REQUEST_TYPEHASHCall {})
        }
    }
    /// Event filters.
    #[automatically_derived]
    impl<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    > GsnEip712LibraryInstance<T, P, N> {
        /// Creates a new event filter using this contract instance's provider and address.
        ///
        /// Note that the type can be any event, not just those defined in this contract.
        /// Prefer using the other methods for building type-safe event filters.
        pub fn event_filter<E: alloy_sol_types::SolEvent>(
            &self,
        ) -> alloy_contract::Event<T, &P, E, N> {
            alloy_contract::Event::new_sol(&self.provider, &self.address)
        }
    }
}
