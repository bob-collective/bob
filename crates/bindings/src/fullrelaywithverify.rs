/**

Generated by the following Solidity interface...
```solidity
interface FullRelayWithVerify {
    event Extension(bytes32 indexed _first, bytes32 indexed _last);
    event NewTip(bytes32 indexed _from, bytes32 indexed _to, bytes32 indexed _gcd);

    constructor(bytes _genesisHeader, uint256 _height, bytes32 _periodStart);

    function HEIGHT_INTERVAL() external view returns (uint32);
    function addHeaders(bytes memory _anchor, bytes memory _headers) external returns (bool);
    function addHeadersWithRetarget(bytes memory _oldPeriodStartHeader, bytes memory _oldPeriodEndHeader, bytes memory _headers) external returns (bool);
    function findAncestor(bytes32 _digest, uint256 _offset) external view returns (bytes32);
    function findHeight(bytes32 _digest) external view returns (uint256);
    function getBestKnownDigest() external view returns (bytes32);
    function getCurrentEpochDifficulty() external view returns (uint256);
    function getLastReorgCommonAncestor() external view returns (bytes32);
    function getPrevEpochDifficulty() external view returns (uint256);
    function getRelayGenesis() external view returns (bytes32);
    function isAncestor(bytes32 _ancestor, bytes32 _descendant, uint256 _limit) external view returns (bool);
    function markNewHeaviest(bytes32 _ancestor, bytes memory _currentBest, bytes memory _newBest, uint256 _limit) external returns (bool);
    function verifyProof(bytes memory _header, bytes memory _proof, bytes32 _txId, uint256 _index, uint8 _numConfs) external view;
}
```

...which was generated by the following JSON ABI:
```json
[
  {
    "type": "constructor",
    "inputs": [
      {
        "name": "_genesisHeader",
        "type": "bytes",
        "internalType": "bytes"
      },
      {
        "name": "_height",
        "type": "uint256",
        "internalType": "uint256"
      },
      {
        "name": "_periodStart",
        "type": "bytes32",
        "internalType": "bytes32"
      }
    ],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "HEIGHT_INTERVAL",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "uint32",
        "internalType": "uint32"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "addHeaders",
    "inputs": [
      {
        "name": "_anchor",
        "type": "bytes",
        "internalType": "bytes"
      },
      {
        "name": "_headers",
        "type": "bytes",
        "internalType": "bytes"
      }
    ],
    "outputs": [
      {
        "name": "",
        "type": "bool",
        "internalType": "bool"
      }
    ],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "addHeadersWithRetarget",
    "inputs": [
      {
        "name": "_oldPeriodStartHeader",
        "type": "bytes",
        "internalType": "bytes"
      },
      {
        "name": "_oldPeriodEndHeader",
        "type": "bytes",
        "internalType": "bytes"
      },
      {
        "name": "_headers",
        "type": "bytes",
        "internalType": "bytes"
      }
    ],
    "outputs": [
      {
        "name": "",
        "type": "bool",
        "internalType": "bool"
      }
    ],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "findAncestor",
    "inputs": [
      {
        "name": "_digest",
        "type": "bytes32",
        "internalType": "bytes32"
      },
      {
        "name": "_offset",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "outputs": [
      {
        "name": "",
        "type": "bytes32",
        "internalType": "bytes32"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "findHeight",
    "inputs": [
      {
        "name": "_digest",
        "type": "bytes32",
        "internalType": "bytes32"
      }
    ],
    "outputs": [
      {
        "name": "",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "getBestKnownDigest",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "bytes32",
        "internalType": "bytes32"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "getCurrentEpochDifficulty",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "getLastReorgCommonAncestor",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "bytes32",
        "internalType": "bytes32"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "getPrevEpochDifficulty",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "getRelayGenesis",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "bytes32",
        "internalType": "bytes32"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "isAncestor",
    "inputs": [
      {
        "name": "_ancestor",
        "type": "bytes32",
        "internalType": "bytes32"
      },
      {
        "name": "_descendant",
        "type": "bytes32",
        "internalType": "bytes32"
      },
      {
        "name": "_limit",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "outputs": [
      {
        "name": "",
        "type": "bool",
        "internalType": "bool"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "markNewHeaviest",
    "inputs": [
      {
        "name": "_ancestor",
        "type": "bytes32",
        "internalType": "bytes32"
      },
      {
        "name": "_currentBest",
        "type": "bytes",
        "internalType": "bytes"
      },
      {
        "name": "_newBest",
        "type": "bytes",
        "internalType": "bytes"
      },
      {
        "name": "_limit",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "outputs": [
      {
        "name": "",
        "type": "bool",
        "internalType": "bool"
      }
    ],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "verifyProof",
    "inputs": [
      {
        "name": "_header",
        "type": "bytes",
        "internalType": "bytes"
      },
      {
        "name": "_proof",
        "type": "bytes",
        "internalType": "bytes"
      },
      {
        "name": "_txId",
        "type": "bytes32",
        "internalType": "bytes32"
      },
      {
        "name": "_index",
        "type": "uint256",
        "internalType": "uint256"
      },
      {
        "name": "_numConfs",
        "type": "uint8",
        "internalType": "uint8"
      }
    ],
    "outputs": [],
    "stateMutability": "view"
  },
  {
    "type": "event",
    "name": "Extension",
    "inputs": [
      {
        "name": "_first",
        "type": "bytes32",
        "indexed": true,
        "internalType": "bytes32"
      },
      {
        "name": "_last",
        "type": "bytes32",
        "indexed": true,
        "internalType": "bytes32"
      }
    ],
    "anonymous": false
  },
  {
    "type": "event",
    "name": "NewTip",
    "inputs": [
      {
        "name": "_from",
        "type": "bytes32",
        "indexed": true,
        "internalType": "bytes32"
      },
      {
        "name": "_to",
        "type": "bytes32",
        "indexed": true,
        "internalType": "bytes32"
      },
      {
        "name": "_gcd",
        "type": "bytes32",
        "indexed": true,
        "internalType": "bytes32"
      }
    ],
    "anonymous": false
  }
]
```*/
#[allow(
    non_camel_case_types,
    non_snake_case,
    clippy::pub_underscore_fields,
    clippy::style,
    clippy::empty_structs_with_brackets
)]
pub mod FullRelayWithVerify {
    use super::*;
    use alloy::sol_types as alloy_sol_types;
    /// The creation / init bytecode of the contract.
    ///
    /// ```text
    ///0x608060405234801561000f575f5ffd5b506040516126ab3803806126ab83398101604081905261002e91610325565b82828261003c835160501490565b6100815760405162461bcd60e51b81526020600482015260116024820152704261642067656e6573697320626c6f636b60781b60448201526064015b60405180910390fd5b5f61008b84610160565b905062ffffff8216156101065760405162461bcd60e51b815260206004820152603d60248201527f506572696f64207374617274206861736820646f6573206e6f7420686176652060448201527f776f726b2e2048696e743a2077726f6e672062797465206f726465723f0000006064820152608401610078565b5f8181556001829055600282905581815260046020526040902083905561012f6107e0846103f8565b610139908461041f565b5f8381526004602052604090205561015084610220565b600555506105b795505050505050565b5f600280836040516101729190610432565b602060405180830381855afa15801561018d573d5f5f3e3d5ffd5b5050506040513d601f19601f820116820180604052508101906101b09190610448565b6040516020016101c291815260200190565b60408051601f19818403018152908290526101dc91610432565b602060405180830381855afa1580156101f7573d5f5f3e3d5ffd5b5050506040513d601f19601f8201168201806040525081019061021a9190610448565b92915050565b5f61021a61022d83610232565b61023d565b5f61021a828261024d565b5f61021a61ffff60d01b836102f1565b5f8061026461025d84604861045f565b8590610303565b60e81c90505f8461027685604b61045f565b8151811061028657610286610472565b016020015160f81c90505f6102b8835f60108262ffffff16901c8261ff001660108462ffffff16901b17179050919050565b62ffffff1690505f6102cb600384610486565b60ff1690506102dc81610100610582565b6102e6908361058d565b979650505050505050565b5f6102fc82846105a4565b9392505050565b5f6102fc8383016020015190565b634e487b7160e01b5f52604160045260245ffd5b5f5f5f60608486031215610337575f5ffd5b83516001600160401b0381111561034c575f5ffd5b8401601f8101861361035c575f5ffd5b80516001600160401b0381111561037557610375610311565b604051601f8201601f19908116603f011681016001600160401b03811182821017156103a3576103a3610311565b6040528181528282016020018810156103ba575f5ffd5b8160208401602083015e5f6020928201830152908601516040909601519097959650949350505050565b634e487b7160e01b5f52601260045260245ffd5b5f82610406576104066103e4565b500690565b634e487b7160e01b5f52601160045260245ffd5b8181038181111561021a5761021a61040b565b5f82518060208501845e5f920191825250919050565b5f60208284031215610458575f5ffd5b5051919050565b8082018082111561021a5761021a61040b565b634e487b7160e01b5f52603260045260245ffd5b60ff828116828216039081111561021a5761021a61040b565b6001815b60018411156104da578085048111156104be576104be61040b565b60018416156104cc57908102905b60019390931c9280026104a3565b935093915050565b5f826104f05750600161021a565b816104fc57505f61021a565b8160018114610512576002811461051c57610538565b600191505061021a565b60ff84111561052d5761052d61040b565b50506001821b61021a565b5060208310610133831016604e8410600b841016171561055b575081810a61021a565b6105675f19848461049f565b805f190482111561057a5761057a61040b565b029392505050565b5f6102fc83836104e2565b808202811582820484141761021a5761021a61040b565b5f826105b2576105b26103e4565b500490565b6120e7806105c45f395ff3fe608060405234801561000f575f5ffd5b50600436106100da575f3560e01c806365da41b9116100885780637fa637fc116100635780637fa637fc14610193578063b985621a146101a6578063c58242cd146101b9578063e3d8d8d8146101c1575f5ffd5b806365da41b91461014057806370d53c181461016357806374c3a3a914610180575f5ffd5b80632b97be24116100b85780632b97be241461011257806330017b3b1461011a57806360b5c3901461012d575f5ffd5b806305d09a70146100de578063113764be146100f35780631910d9731461010a575b5f5ffd5b6100f16100ec366004611bf1565b6101c8565b005b6005545b6040519081526020015b60405180910390f35b6001546100f7565b6006546100f7565b6100f7610128366004611c8b565b6104bb565b6100f761013b366004611cab565b6104cf565b61015361014e366004611cc2565b6104d9565b6040519015158152602001610101565b61016b600481565b60405163ffffffff9091168152602001610101565b61015361018e366004611d2e565b610690565b6101536101a1366004611daf565b610805565b6101536101b4366004611e4e565b6109e4565b6002546100f7565b5f546100f7565b61020687878080601f0160208091040260200160405190810160405280939291908181526020018383808284375f920191909152506109fa92505050565b6102575760405162461bcd60e51b815260206004820152601060248201527f4261642068656164657220626c6f636b0000000000000000000000000000000060448201526064015b60405180910390fd5b61029585858080601f0160208091040260200160405190810160405280939291908181526020018383808284375f92019190915250610a0192505050565b6102e15760405162461bcd60e51b815260206004820152601660248201527f426164206d65726b6c652061727261792070726f6f6600000000000000000000604482015260640161024e565b6103608361032389898080601f0160208091040260200160405190810160405280939291908181526020018383808284375f92019190915250610a1792505050565b87878080601f0160208091040260200160405190810160405280939291908181526020018383808284375f92019190915250889250610a23915050565b6103ac5760405162461bcd60e51b815260206004820152601360248201527f42616420696e636c7573696f6e2070726f6f6600000000000000000000000000604482015260640161024e565b5f6103eb88888080601f0160208091040260200160405190810160405280939291908181526020018383808284375f92019190915250610a5592505050565b90505f6103f760025490565b90506104068282610800610b2d565b6104525760405162461bcd60e51b815260206004820152601b60248201527f47434420646f6573206e6f7420636f6e6669726d206865616465720000000000604482015260640161024e565b8260ff1661045f83610b6e565b60ff1610156104b05760405162461bcd60e51b815260206004820152601a60248201527f496e73756666696369656e7420636f6e6669726d6174696f6e73000000000000604482015260640161024e565b505050505050505050565b5f6104c68383610b8d565b90505b92915050565b5f6104c982610bff565b5f61051883838080601f0160208091040260200160405190810160405280939291908181526020018383808284375f92019190915250610cad92505050565b61058a5760405162461bcd60e51b815260206004820152602b60248201527f486561646572206172726179206c656e677468206d757374206265206469766960448201527f7369626c65206279203830000000000000000000000000000000000000000000606482015260840161024e565b6105c885858080601f0160208091040260200160405190810160405280939291908181526020018383808284375f920191909152506109fa92505050565b6106145760405162461bcd60e51b815260206004820152601760248201527f416e63686f72206d757374206265203830206279746573000000000000000000604482015260640161024e565b61068585858080601f0160208091040260200160405190810160405280939291908181526020018383808284375f9201919091525050604080516020601f890181900481028201810190925287815292508791508690819084018382808284375f9201829052509250610cbc915050565b90505b949350505050565b5f6106cf84848080601f0160208091040260200160405190810160405280939291908181526020018383808284375f920191909152506109fa92505050565b8015610714575061071486868080601f0160208091040260200160405190810160405280939291908181526020018383808284375f920191909152506109fa92505050565b6107865760405162461bcd60e51b815260206004820152602e60248201527f42616420617267732e20436865636b2068656164657220616e6420617272617960448201527f2062797465206c656e677468732e000000000000000000000000000000000000606482015260840161024e565b6107fa8787878080601f0160208091040260200160405190810160405280939291908181526020018383808284375f9201919091525050604080516020601f8b0181900481028201810190925289815292508991508890819084018382808284375f920191909152508892506110a9915050565b979650505050505050565b5f61084487878080601f0160208091040260200160405190810160405280939291908181526020018383808284375f920191909152506109fa92505050565b8015610889575061088985858080601f0160208091040260200160405190810160405280939291908181526020018383808284375f920191909152506109fa92505050565b80156108ce57506108ce83838080601f0160208091040260200160405190810160405280939291908181526020018383808284375f92019190915250610cad92505050565b6109405760405162461bcd60e51b815260206004820152602e60248201527f42616420617267732e20436865636b2068656164657220616e6420617272617960448201527f2062797465206c656e677468732e000000000000000000000000000000000000606482015260840161024e565b6107fa87878080601f0160208091040260200160405190810160405280939291908181526020018383808284375f9201919091525050604080516020601f8b0181900481028201810190925289815292508991508890819084018382808284375f9201919091525050604080516020601f8a0181900481028201810190925288815292508891508790819084018382808284375f9201919091525061134692505050565b5f6109f0848484610b2d565b90505b9392505050565b5160501490565b5f60208251610a109190611ea4565b1592915050565b60448101515f906104c9565b5f8385148015610a31575081155b8015610a3c57508251155b15610a4957506001610688565b610685858486856115d8565b5f60028083604051610a679190611eb7565b602060405180830381855afa158015610a82573d5f5f3e3d5ffd5b5050506040513d601f19601f82011682018060405250810190610aa59190611ecd565b604051602001610ab791815260200190565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe081840301815290829052610aef91611eb7565b602060405180830381855afa158015610b0a573d5f5f3e3d5ffd5b5050506040513d601f19601f820116820180604052508101906104c99190611ecd565b5f82815b83811015610b6357858203610b4b576001925050506109f3565b5f918252600360205260409091205490600101610b31565b505f95945050505050565b5f610b7882610bff565b610b83600154610bff565b6104c99190611f11565b5f82815b83811015610bb1575f918252600360205260409091205490600101610b91565b50806104c65760405162461bcd60e51b815260206004820152601060248201527f556e6b6e6f776e20616e636573746f7200000000000000000000000000000000604482015260640161024e565b5f8082815b610c1060046001611f24565b63ffffffff16811015610c64575f828152600460205260408120549350839003610c49575f918252600360205260409091205490610c5c565b610c538184611f40565b95945050505050565b600101610c04565b5060405162461bcd60e51b815260206004820152600d60248201527f556e6b6e6f776e20626c6f636b00000000000000000000000000000000000000604482015260640161024e565b5f60508251610a109190611ea4565b5f5f610cc785610a55565b90505f610cd382610bff565b90505f610cdf8661167d565b90508480610cf4575080610cf28861167d565b145b610d655760405162461bcd60e51b8152602060048201526024808201527f556e6578706563746564207265746172676574206f6e2065787465726e616c2060448201527f63616c6c00000000000000000000000000000000000000000000000000000000606482015260840161024e565b85515f908190815b8181101561106657610d80605082611f53565b610d8b906001611f40565b610d959087611f40565b9350610da38a826050611688565b5f81815260036020526040902054909350610f795784610ef9845f8190506008817eff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff16901b600882901c7eff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff161790506010817dffff0000ffff0000ffff0000ffff0000ffff0000ffff0000ffff0000ffff16901b601082901c7dffff0000ffff0000ffff0000ffff0000ffff0000ffff0000ffff0000ffff161790506020817bffffffff00000000ffffffff00000000ffffffff00000000ffffffff16901b602082901c7bffffffff00000000ffffffff00000000ffffffff00000000ffffffff1617905060408177ffffffffffffffff0000000000000000ffffffffffffffff16901b604082901c77ffffffffffffffff0000000000000000ffffffffffffffff16179050608081901b608082901c179050919050565b1115610f475760405162461bcd60e51b815260206004820152601b60248201527f48656164657220776f726b20697320696e73756666696369656e740000000000604482015260640161024e565b5f838152600360205260409020879055610f62600485611ea4565b5f03610f79575f8381526004602052604090208490555b84610f848b836116ad565b14610fd15760405162461bcd60e51b815260206004820152601b60248201527f546172676574206368616e67656420756e65787065637465646c790000000000604482015260640161024e565b86610fdc8b83611746565b1461104f5760405162461bcd60e51b815260206004820152602660248201527f4865616465727320646f206e6f7420666f726d206120636f6e73697374656e7460448201527f20636861696e0000000000000000000000000000000000000000000000000000606482015260840161024e565b82965060508161105f9190611f40565b9050610d6d565b50816110718b610a55565b6040517ff90e4f1d9cd0dd55e339411cbc9b152482307c3a23ed64715e4a2858f641a3f5905f90a35060019998505050505050505050565b5f6107e08211156111225760405162461bcd60e51b815260206004820152603360248201527f526571756573746564206c696d69742069732067726561746572207468616e2060448201527f3120646966666963756c747920706572696f6400000000000000000000000000606482015260840161024e565b5f61112c84610a55565b90505f61113886610a55565b9050600154811461118b5760405162461bcd60e51b815260206004820181905260248201527f50617373656420696e2062657374206973206e6f742062657374206b6e6f776e604482015260640161024e565b5f828152600360205260409020546111e55760405162461bcd60e51b815260206004820152601360248201527f4e6577206265737420697320756e6b6e6f776e00000000000000000000000000604482015260640161024e565b6111f387600154848761175e565b6112655760405162461bcd60e51b815260206004820152602960248201527f416e636573746f72206d75737420626520686561766965737420636f6d6d6f6e60448201527f20616e636573746f720000000000000000000000000000000000000000000000606482015260840161024e565b816112718888886117f8565b146112e45760405162461bcd60e51b815260206004820152603360248201527f4e65772062657374206861736820646f6573206e6f742068617665206d6f726560448201527f20776f726b207468616e2070726576696f757300000000000000000000000000606482015260840161024e565b600182905560028790555f6112f886611989565b905060055481146113095760058190555b8783837f3cc13de64df0f0239626235c51a2da251bbc8c85664ecce39263da3ee03f606c60405160405180910390a4506001979650505050505050565b5f5f61135961135486610a55565b610bff565b90505f61136861135486610a55565b90506113766107e082611ea4565b6107df146113ec5760405162461bcd60e51b815260206004820152603d60248201527f4d7573742070726f7669646520746865206c61737420686561646572206f662060448201527f74686520636c6f73696e6720646966666963756c747920706572696f64000000606482015260840161024e565b6113f8826107df611f40565b811461146c5760405162461bcd60e51b815260206004820152602860248201527f4d7573742070726f766964652065786163746c79203120646966666963756c7460448201527f7920706572696f64000000000000000000000000000000000000000000000000606482015260840161024e565b61147585611989565b61147e87611989565b146114f15760405162461bcd60e51b815260206004820152602760248201527f506572696f642068656164657220646966666963756c7469657320646f206e6f60448201527f74206d6174636800000000000000000000000000000000000000000000000000606482015260840161024e565b5f6114fb8561167d565b90505f61152d61150a8961167d565b6115138a61199b565b63ffffffff166115228a61199b565b63ffffffff166119ce565b905081818316146115805760405162461bcd60e51b815260206004820152601960248201527f496e76616c69642072657461726765742070726f766964656400000000000000604482015260640161024e565b5f61158a89611989565b905080600654141580156115b457506107e06115a7600154610bff565b6115b19190611f11565b84115b156115bf5760068190555b6115cb88886001610cbc565b9998505050505050505050565b5f602084516115e79190611ea4565b156115f357505f610688565b83515f0361160257505f610688565b81855f5b86518110156116705761161a600284611ea4565b60010361163e576116376116318883016020015190565b83611a60565b9150611657565b6116548261164f8984016020015190565b611a60565b91505b60019290921c91611669602082611f40565b9050611606565b5090931495945050505050565b5f6104c9825f6116ad565b5f60205f8385602001870160025afa5060205f60205f60025afa50505f519392505050565b5f806116c46116bd846048611f40565b8590611a6b565b60e81c90505f846116d685604b611f40565b815181106116e6576116e6611f66565b016020015160f81c90505f611718835f60108262ffffff16901c8261ff001660108462ffffff16901b17179050919050565b62ffffff1690505f61172b600384611f93565b60ff16905061173c8161010061208f565b6107fa908361209a565b5f6104c6611755836004611f40565b84016020015190565b5f838514801561176d57508285145b1561177a57506001610688565b838381815f5b868110156117c2578983146117a1575f838152600360205260409020549294505b8982146117ba575f828152600360205260409020549193505b600101611780565b508284036117d6575f945050505050610688565b8082146117e9575f945050505050610688565b50600198975050505050505050565b5f5f61180385610bff565b90505f61181261135486610a55565b90505f61182161135486610a55565b90508282101580156118335750828110155b6118a55760405162461bcd60e51b815260206004820152603060248201527f412064657363656e64616e74206865696768742069732062656c6f772074686560448201527f20616e636573746f722068656967687400000000000000000000000000000000606482015260840161024e565b5f6118b26107e085611ea4565b6118be856107e0611f40565b6118c89190611f11565b90508083108183108115826118da5750805b156118f5576118e889610a55565b96505050505050506109f3565b818015611900575080155b1561190e576118e888610a55565b8180156119185750805b1561193c57838510156119335761192e88610a55565b6118e8565b6118e889610a55565b61194588611989565b6119516107e086611ea4565b61195b919061209a565b6119648a611989565b6119706107e088611ea4565b61197a919061209a565b1015611933576118e888610a55565b5f6104c96119968361167d565b611a79565b5f6104c96119a883611aa0565b60d881901c63ff00ff001662ff00ff60e89290921c9190911617601081811b91901c1790565b5f806119da8385611aac565b90506119ea621275006004611b07565b811015611a02576119ff621275006004611b07565b90505b611a10621275006004611b12565b811115611a2857611a25621275006004611b12565b90505b5f611a4082611a3a8862010000611b07565b90611b12565b9050611a5662010000611a3a8362127500611b07565b9695505050505050565b5f6104c68383611b85565b5f6104c68383016020015190565b5f6104c97bffff000000000000000000000000000000000000000000000000000083611b07565b5f6104c9826044611a6b565b5f82821115611afd5760405162461bcd60e51b815260206004820152601d60248201527f556e646572666c6f7720647572696e67207375627472616374696f6e2e000000604482015260640161024e565b6104c68284611f11565b5f6104c68284611f53565b5f825f03611b2157505f6104c9565b611b2b828461209a565b905081611b388483611f53565b146104c95760405162461bcd60e51b815260206004820152601f60248201527f4f766572666c6f7720647572696e67206d756c7469706c69636174696f6e2e00604482015260640161024e565b5f825f528160205260205f60405f60025afa5060205f60205f60025afa50505f5192915050565b5f5f83601f840112611bbc575f5ffd5b50813567ffffffffffffffff811115611bd3575f5ffd5b602083019150836020828501011115611bea575f5ffd5b9250929050565b5f5f5f5f5f5f5f60a0888a031215611c07575f5ffd5b873567ffffffffffffffff811115611c1d575f5ffd5b611c298a828b01611bac565b909850965050602088013567ffffffffffffffff811115611c48575f5ffd5b611c548a828b01611bac565b9096509450506040880135925060608801359150608088013560ff81168114611c7b575f5ffd5b8091505092959891949750929550565b5f5f60408385031215611c9c575f5ffd5b50508035926020909101359150565b5f60208284031215611cbb575f5ffd5b5035919050565b5f5f5f5f60408587031215611cd5575f5ffd5b843567ffffffffffffffff811115611ceb575f5ffd5b611cf787828801611bac565b909550935050602085013567ffffffffffffffff811115611d16575f5ffd5b611d2287828801611bac565b95989497509550505050565b5f5f5f5f5f5f60808789031215611d43575f5ffd5b86359550602087013567ffffffffffffffff811115611d60575f5ffd5b611d6c89828a01611bac565b909650945050604087013567ffffffffffffffff811115611d8b575f5ffd5b611d9789828a01611bac565b979a9699509497949695606090950135949350505050565b5f5f5f5f5f5f60608789031215611dc4575f5ffd5b863567ffffffffffffffff811115611dda575f5ffd5b611de689828a01611bac565b909750955050602087013567ffffffffffffffff811115611e05575f5ffd5b611e1189828a01611bac565b909550935050604087013567ffffffffffffffff811115611e30575f5ffd5b611e3c89828a01611bac565b979a9699509497509295939492505050565b5f5f5f60608486031215611e60575f5ffd5b505081359360208301359350604090920135919050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52601260045260245ffd5b5f82611eb257611eb2611e77565b500690565b5f82518060208501845e5f920191825250919050565b5f60208284031215611edd575f5ffd5b5051919050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52601160045260245ffd5b818103818111156104c9576104c9611ee4565b63ffffffff81811683821601908111156104c9576104c9611ee4565b808201808211156104c9576104c9611ee4565b5f82611f6157611f61611e77565b500490565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52603260045260245ffd5b60ff82811682821603908111156104c9576104c9611ee4565b6001815b6001841115611fe757808504811115611fcb57611fcb611ee4565b6001841615611fd957908102905b60019390931c928002611fb0565b935093915050565b5f82611ffd575060016104c9565b8161200957505f6104c9565b816001811461201f576002811461202957612045565b60019150506104c9565b60ff84111561203a5761203a611ee4565b50506001821b6104c9565b5060208310610133831016604e8410600b8410161715612068575081810a6104c9565b6120745f198484611fac565b805f190482111561208757612087611ee4565b029392505050565b5f6104c68383611fef565b80820281158282048414176104c9576104c9611ee456fea264697066735822122040df35f80dce242cbb929a6ad8d604f1f98ff25939df9daacd8c24aab7f1525864736f6c634300081c0033
    /// ```
    #[rustfmt::skip]
    #[allow(clippy::all)]
    pub static BYTECODE: alloy_sol_types::private::Bytes = alloy_sol_types::private::Bytes::from_static(
        b"`\x80`@R4\x80\x15a\0\x0FW__\xFD[P`@Qa&\xAB8\x03\x80a&\xAB\x839\x81\x01`@\x81\x90Ra\0.\x91a\x03%V[\x82\x82\x82a\0<\x83Q`P\x14\x90V[a\0\x81W`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`\x11`$\x82\x01RpBad genesis block`x\x1B`D\x82\x01R`d\x01[`@Q\x80\x91\x03\x90\xFD[_a\0\x8B\x84a\x01`V[\x90Pb\xFF\xFF\xFF\x82\x16\x15a\x01\x06W`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`=`$\x82\x01R\x7FPeriod start hash does not have `D\x82\x01R\x7Fwork. Hint: wrong byte order?\0\0\0`d\x82\x01R`\x84\x01a\0xV[_\x81\x81U`\x01\x82\x90U`\x02\x82\x90U\x81\x81R`\x04` R`@\x90 \x83\x90Ua\x01/a\x07\xE0\x84a\x03\xF8V[a\x019\x90\x84a\x04\x1FV[_\x83\x81R`\x04` R`@\x90 Ua\x01P\x84a\x02 V[`\x05UPa\x05\xB7\x95PPPPPPV[_`\x02\x80\x83`@Qa\x01r\x91\x90a\x042V[` `@Q\x80\x83\x03\x81\x85Z\xFA\x15\x80\x15a\x01\x8DW=__>=_\xFD[PPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90a\x01\xB0\x91\x90a\x04HV[`@Q` \x01a\x01\xC2\x91\x81R` \x01\x90V[`@\x80Q`\x1F\x19\x81\x84\x03\x01\x81R\x90\x82\x90Ra\x01\xDC\x91a\x042V[` `@Q\x80\x83\x03\x81\x85Z\xFA\x15\x80\x15a\x01\xF7W=__>=_\xFD[PPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90a\x02\x1A\x91\x90a\x04HV[\x92\x91PPV[_a\x02\x1Aa\x02-\x83a\x022V[a\x02=V[_a\x02\x1A\x82\x82a\x02MV[_a\x02\x1Aa\xFF\xFF`\xD0\x1B\x83a\x02\xF1V[_\x80a\x02da\x02]\x84`Ha\x04_V[\x85\x90a\x03\x03V[`\xE8\x1C\x90P_\x84a\x02v\x85`Ka\x04_V[\x81Q\x81\x10a\x02\x86Wa\x02\x86a\x04rV[\x01` \x01Q`\xF8\x1C\x90P_a\x02\xB8\x83_`\x10\x82b\xFF\xFF\xFF\x16\x90\x1C\x82a\xFF\0\x16`\x10\x84b\xFF\xFF\xFF\x16\x90\x1B\x17\x17\x90P\x91\x90PV[b\xFF\xFF\xFF\x16\x90P_a\x02\xCB`\x03\x84a\x04\x86V[`\xFF\x16\x90Pa\x02\xDC\x81a\x01\0a\x05\x82V[a\x02\xE6\x90\x83a\x05\x8DV[\x97\x96PPPPPPPV[_a\x02\xFC\x82\x84a\x05\xA4V[\x93\x92PPPV[_a\x02\xFC\x83\x83\x01` \x01Q\x90V[cNH{q`\xE0\x1B_R`A`\x04R`$_\xFD[___``\x84\x86\x03\x12\x15a\x037W__\xFD[\x83Q`\x01`\x01`@\x1B\x03\x81\x11\x15a\x03LW__\xFD[\x84\x01`\x1F\x81\x01\x86\x13a\x03\\W__\xFD[\x80Q`\x01`\x01`@\x1B\x03\x81\x11\x15a\x03uWa\x03ua\x03\x11V[`@Q`\x1F\x82\x01`\x1F\x19\x90\x81\x16`?\x01\x16\x81\x01`\x01`\x01`@\x1B\x03\x81\x11\x82\x82\x10\x17\x15a\x03\xA3Wa\x03\xA3a\x03\x11V[`@R\x81\x81R\x82\x82\x01` \x01\x88\x10\x15a\x03\xBAW__\xFD[\x81` \x84\x01` \x83\x01^_` \x92\x82\x01\x83\x01R\x90\x86\x01Q`@\x90\x96\x01Q\x90\x97\x95\x96P\x94\x93PPPPV[cNH{q`\xE0\x1B_R`\x12`\x04R`$_\xFD[_\x82a\x04\x06Wa\x04\x06a\x03\xE4V[P\x06\x90V[cNH{q`\xE0\x1B_R`\x11`\x04R`$_\xFD[\x81\x81\x03\x81\x81\x11\x15a\x02\x1AWa\x02\x1Aa\x04\x0BV[_\x82Q\x80` \x85\x01\x84^_\x92\x01\x91\x82RP\x91\x90PV[_` \x82\x84\x03\x12\x15a\x04XW__\xFD[PQ\x91\x90PV[\x80\x82\x01\x80\x82\x11\x15a\x02\x1AWa\x02\x1Aa\x04\x0BV[cNH{q`\xE0\x1B_R`2`\x04R`$_\xFD[`\xFF\x82\x81\x16\x82\x82\x16\x03\x90\x81\x11\x15a\x02\x1AWa\x02\x1Aa\x04\x0BV[`\x01\x81[`\x01\x84\x11\x15a\x04\xDAW\x80\x85\x04\x81\x11\x15a\x04\xBEWa\x04\xBEa\x04\x0BV[`\x01\x84\x16\x15a\x04\xCCW\x90\x81\x02\x90[`\x01\x93\x90\x93\x1C\x92\x80\x02a\x04\xA3V[\x93P\x93\x91PPV[_\x82a\x04\xF0WP`\x01a\x02\x1AV[\x81a\x04\xFCWP_a\x02\x1AV[\x81`\x01\x81\x14a\x05\x12W`\x02\x81\x14a\x05\x1CWa\x058V[`\x01\x91PPa\x02\x1AV[`\xFF\x84\x11\x15a\x05-Wa\x05-a\x04\x0BV[PP`\x01\x82\x1Ba\x02\x1AV[P` \x83\x10a\x013\x83\x10\x16`N\x84\x10`\x0B\x84\x10\x16\x17\x15a\x05[WP\x81\x81\na\x02\x1AV[a\x05g_\x19\x84\x84a\x04\x9FV[\x80_\x19\x04\x82\x11\x15a\x05zWa\x05za\x04\x0BV[\x02\x93\x92PPPV[_a\x02\xFC\x83\x83a\x04\xE2V[\x80\x82\x02\x81\x15\x82\x82\x04\x84\x14\x17a\x02\x1AWa\x02\x1Aa\x04\x0BV[_\x82a\x05\xB2Wa\x05\xB2a\x03\xE4V[P\x04\x90V[a \xE7\x80a\x05\xC4_9_\xF3\xFE`\x80`@R4\x80\x15a\0\x0FW__\xFD[P`\x046\x10a\0\xDAW_5`\xE0\x1C\x80ce\xDAA\xB9\x11a\0\x88W\x80c\x7F\xA67\xFC\x11a\0cW\x80c\x7F\xA67\xFC\x14a\x01\x93W\x80c\xB9\x85b\x1A\x14a\x01\xA6W\x80c\xC5\x82B\xCD\x14a\x01\xB9W\x80c\xE3\xD8\xD8\xD8\x14a\x01\xC1W__\xFD[\x80ce\xDAA\xB9\x14a\x01@W\x80cp\xD5<\x18\x14a\x01cW\x80ct\xC3\xA3\xA9\x14a\x01\x80W__\xFD[\x80c+\x97\xBE$\x11a\0\xB8W\x80c+\x97\xBE$\x14a\x01\x12W\x80c0\x01{;\x14a\x01\x1AW\x80c`\xB5\xC3\x90\x14a\x01-W__\xFD[\x80c\x05\xD0\x9Ap\x14a\0\xDEW\x80c\x117d\xBE\x14a\0\xF3W\x80c\x19\x10\xD9s\x14a\x01\nW[__\xFD[a\0\xF1a\0\xEC6`\x04a\x1B\xF1V[a\x01\xC8V[\0[`\x05T[`@Q\x90\x81R` \x01[`@Q\x80\x91\x03\x90\xF3[`\x01Ta\0\xF7V[`\x06Ta\0\xF7V[a\0\xF7a\x01(6`\x04a\x1C\x8BV[a\x04\xBBV[a\0\xF7a\x01;6`\x04a\x1C\xABV[a\x04\xCFV[a\x01Sa\x01N6`\x04a\x1C\xC2V[a\x04\xD9V[`@Q\x90\x15\x15\x81R` \x01a\x01\x01V[a\x01k`\x04\x81V[`@Qc\xFF\xFF\xFF\xFF\x90\x91\x16\x81R` \x01a\x01\x01V[a\x01Sa\x01\x8E6`\x04a\x1D.V[a\x06\x90V[a\x01Sa\x01\xA16`\x04a\x1D\xAFV[a\x08\x05V[a\x01Sa\x01\xB46`\x04a\x1ENV[a\t\xE4V[`\x02Ta\0\xF7V[_Ta\0\xF7V[a\x02\x06\x87\x87\x80\x80`\x1F\x01` \x80\x91\x04\x02` \x01`@Q\x90\x81\x01`@R\x80\x93\x92\x91\x90\x81\x81R` \x01\x83\x83\x80\x82\x847_\x92\x01\x91\x90\x91RPa\t\xFA\x92PPPV[a\x02WW`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`\x10`$\x82\x01R\x7FBad header block\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`D\x82\x01R`d\x01[`@Q\x80\x91\x03\x90\xFD[a\x02\x95\x85\x85\x80\x80`\x1F\x01` \x80\x91\x04\x02` \x01`@Q\x90\x81\x01`@R\x80\x93\x92\x91\x90\x81\x81R` \x01\x83\x83\x80\x82\x847_\x92\x01\x91\x90\x91RPa\n\x01\x92PPPV[a\x02\xE1W`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`\x16`$\x82\x01R\x7FBad merkle array proof\0\0\0\0\0\0\0\0\0\0`D\x82\x01R`d\x01a\x02NV[a\x03`\x83a\x03#\x89\x89\x80\x80`\x1F\x01` \x80\x91\x04\x02` \x01`@Q\x90\x81\x01`@R\x80\x93\x92\x91\x90\x81\x81R` \x01\x83\x83\x80\x82\x847_\x92\x01\x91\x90\x91RPa\n\x17\x92PPPV[\x87\x87\x80\x80`\x1F\x01` \x80\x91\x04\x02` \x01`@Q\x90\x81\x01`@R\x80\x93\x92\x91\x90\x81\x81R` \x01\x83\x83\x80\x82\x847_\x92\x01\x91\x90\x91RP\x88\x92Pa\n#\x91PPV[a\x03\xACW`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`\x13`$\x82\x01R\x7FBad inclusion proof\0\0\0\0\0\0\0\0\0\0\0\0\0`D\x82\x01R`d\x01a\x02NV[_a\x03\xEB\x88\x88\x80\x80`\x1F\x01` \x80\x91\x04\x02` \x01`@Q\x90\x81\x01`@R\x80\x93\x92\x91\x90\x81\x81R` \x01\x83\x83\x80\x82\x847_\x92\x01\x91\x90\x91RPa\nU\x92PPPV[\x90P_a\x03\xF7`\x02T\x90V[\x90Pa\x04\x06\x82\x82a\x08\0a\x0B-V[a\x04RW`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`\x1B`$\x82\x01R\x7FGCD does not confirm header\0\0\0\0\0`D\x82\x01R`d\x01a\x02NV[\x82`\xFF\x16a\x04_\x83a\x0BnV[`\xFF\x16\x10\x15a\x04\xB0W`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`\x1A`$\x82\x01R\x7FInsufficient confirmations\0\0\0\0\0\0`D\x82\x01R`d\x01a\x02NV[PPPPPPPPPV[_a\x04\xC6\x83\x83a\x0B\x8DV[\x90P[\x92\x91PPV[_a\x04\xC9\x82a\x0B\xFFV[_a\x05\x18\x83\x83\x80\x80`\x1F\x01` \x80\x91\x04\x02` \x01`@Q\x90\x81\x01`@R\x80\x93\x92\x91\x90\x81\x81R` \x01\x83\x83\x80\x82\x847_\x92\x01\x91\x90\x91RPa\x0C\xAD\x92PPPV[a\x05\x8AW`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`+`$\x82\x01R\x7FHeader array length must be divi`D\x82\x01R\x7Fsible by 80\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`d\x82\x01R`\x84\x01a\x02NV[a\x05\xC8\x85\x85\x80\x80`\x1F\x01` \x80\x91\x04\x02` \x01`@Q\x90\x81\x01`@R\x80\x93\x92\x91\x90\x81\x81R` \x01\x83\x83\x80\x82\x847_\x92\x01\x91\x90\x91RPa\t\xFA\x92PPPV[a\x06\x14W`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`\x17`$\x82\x01R\x7FAnchor must be 80 bytes\0\0\0\0\0\0\0\0\0`D\x82\x01R`d\x01a\x02NV[a\x06\x85\x85\x85\x80\x80`\x1F\x01` \x80\x91\x04\x02` \x01`@Q\x90\x81\x01`@R\x80\x93\x92\x91\x90\x81\x81R` \x01\x83\x83\x80\x82\x847_\x92\x01\x91\x90\x91RPP`@\x80Q` `\x1F\x89\x01\x81\x90\x04\x81\x02\x82\x01\x81\x01\x90\x92R\x87\x81R\x92P\x87\x91P\x86\x90\x81\x90\x84\x01\x83\x82\x80\x82\x847_\x92\x01\x82\x90RP\x92Pa\x0C\xBC\x91PPV[\x90P[\x94\x93PPPPV[_a\x06\xCF\x84\x84\x80\x80`\x1F\x01` \x80\x91\x04\x02` \x01`@Q\x90\x81\x01`@R\x80\x93\x92\x91\x90\x81\x81R` \x01\x83\x83\x80\x82\x847_\x92\x01\x91\x90\x91RPa\t\xFA\x92PPPV[\x80\x15a\x07\x14WPa\x07\x14\x86\x86\x80\x80`\x1F\x01` \x80\x91\x04\x02` \x01`@Q\x90\x81\x01`@R\x80\x93\x92\x91\x90\x81\x81R` \x01\x83\x83\x80\x82\x847_\x92\x01\x91\x90\x91RPa\t\xFA\x92PPPV[a\x07\x86W`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`.`$\x82\x01R\x7FBad args. Check header and array`D\x82\x01R\x7F byte lengths.\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`d\x82\x01R`\x84\x01a\x02NV[a\x07\xFA\x87\x87\x87\x80\x80`\x1F\x01` \x80\x91\x04\x02` \x01`@Q\x90\x81\x01`@R\x80\x93\x92\x91\x90\x81\x81R` \x01\x83\x83\x80\x82\x847_\x92\x01\x91\x90\x91RPP`@\x80Q` `\x1F\x8B\x01\x81\x90\x04\x81\x02\x82\x01\x81\x01\x90\x92R\x89\x81R\x92P\x89\x91P\x88\x90\x81\x90\x84\x01\x83\x82\x80\x82\x847_\x92\x01\x91\x90\x91RP\x88\x92Pa\x10\xA9\x91PPV[\x97\x96PPPPPPPV[_a\x08D\x87\x87\x80\x80`\x1F\x01` \x80\x91\x04\x02` \x01`@Q\x90\x81\x01`@R\x80\x93\x92\x91\x90\x81\x81R` \x01\x83\x83\x80\x82\x847_\x92\x01\x91\x90\x91RPa\t\xFA\x92PPPV[\x80\x15a\x08\x89WPa\x08\x89\x85\x85\x80\x80`\x1F\x01` \x80\x91\x04\x02` \x01`@Q\x90\x81\x01`@R\x80\x93\x92\x91\x90\x81\x81R` \x01\x83\x83\x80\x82\x847_\x92\x01\x91\x90\x91RPa\t\xFA\x92PPPV[\x80\x15a\x08\xCEWPa\x08\xCE\x83\x83\x80\x80`\x1F\x01` \x80\x91\x04\x02` \x01`@Q\x90\x81\x01`@R\x80\x93\x92\x91\x90\x81\x81R` \x01\x83\x83\x80\x82\x847_\x92\x01\x91\x90\x91RPa\x0C\xAD\x92PPPV[a\t@W`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`.`$\x82\x01R\x7FBad args. Check header and array`D\x82\x01R\x7F byte lengths.\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`d\x82\x01R`\x84\x01a\x02NV[a\x07\xFA\x87\x87\x80\x80`\x1F\x01` \x80\x91\x04\x02` \x01`@Q\x90\x81\x01`@R\x80\x93\x92\x91\x90\x81\x81R` \x01\x83\x83\x80\x82\x847_\x92\x01\x91\x90\x91RPP`@\x80Q` `\x1F\x8B\x01\x81\x90\x04\x81\x02\x82\x01\x81\x01\x90\x92R\x89\x81R\x92P\x89\x91P\x88\x90\x81\x90\x84\x01\x83\x82\x80\x82\x847_\x92\x01\x91\x90\x91RPP`@\x80Q` `\x1F\x8A\x01\x81\x90\x04\x81\x02\x82\x01\x81\x01\x90\x92R\x88\x81R\x92P\x88\x91P\x87\x90\x81\x90\x84\x01\x83\x82\x80\x82\x847_\x92\x01\x91\x90\x91RPa\x13F\x92PPPV[_a\t\xF0\x84\x84\x84a\x0B-V[\x90P[\x93\x92PPPV[Q`P\x14\x90V[_` \x82Qa\n\x10\x91\x90a\x1E\xA4V[\x15\x92\x91PPV[`D\x81\x01Q_\x90a\x04\xC9V[_\x83\x85\x14\x80\x15a\n1WP\x81\x15[\x80\x15a\n<WP\x82Q\x15[\x15a\nIWP`\x01a\x06\x88V[a\x06\x85\x85\x84\x86\x85a\x15\xD8V[_`\x02\x80\x83`@Qa\ng\x91\x90a\x1E\xB7V[` `@Q\x80\x83\x03\x81\x85Z\xFA\x15\x80\x15a\n\x82W=__>=_\xFD[PPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90a\n\xA5\x91\x90a\x1E\xCDV[`@Q` \x01a\n\xB7\x91\x81R` \x01\x90V[`@\x80Q\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xE0\x81\x84\x03\x01\x81R\x90\x82\x90Ra\n\xEF\x91a\x1E\xB7V[` `@Q\x80\x83\x03\x81\x85Z\xFA\x15\x80\x15a\x0B\nW=__>=_\xFD[PPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90a\x04\xC9\x91\x90a\x1E\xCDV[_\x82\x81[\x83\x81\x10\x15a\x0BcW\x85\x82\x03a\x0BKW`\x01\x92PPPa\t\xF3V[_\x91\x82R`\x03` R`@\x90\x91 T\x90`\x01\x01a\x0B1V[P_\x95\x94PPPPPV[_a\x0Bx\x82a\x0B\xFFV[a\x0B\x83`\x01Ta\x0B\xFFV[a\x04\xC9\x91\x90a\x1F\x11V[_\x82\x81[\x83\x81\x10\x15a\x0B\xB1W_\x91\x82R`\x03` R`@\x90\x91 T\x90`\x01\x01a\x0B\x91V[P\x80a\x04\xC6W`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`\x10`$\x82\x01R\x7FUnknown ancestor\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`D\x82\x01R`d\x01a\x02NV[_\x80\x82\x81[a\x0C\x10`\x04`\x01a\x1F$V[c\xFF\xFF\xFF\xFF\x16\x81\x10\x15a\x0CdW_\x82\x81R`\x04` R`@\x81 T\x93P\x83\x90\x03a\x0CIW_\x91\x82R`\x03` R`@\x90\x91 T\x90a\x0C\\V[a\x0CS\x81\x84a\x1F@V[\x95\x94PPPPPV[`\x01\x01a\x0C\x04V[P`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`\r`$\x82\x01R\x7FUnknown block\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`D\x82\x01R`d\x01a\x02NV[_`P\x82Qa\n\x10\x91\x90a\x1E\xA4V[__a\x0C\xC7\x85a\nUV[\x90P_a\x0C\xD3\x82a\x0B\xFFV[\x90P_a\x0C\xDF\x86a\x16}V[\x90P\x84\x80a\x0C\xF4WP\x80a\x0C\xF2\x88a\x16}V[\x14[a\reW`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`$\x80\x82\x01R\x7FUnexpected retarget on external `D\x82\x01R\x7Fcall\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`d\x82\x01R`\x84\x01a\x02NV[\x85Q_\x90\x81\x90\x81[\x81\x81\x10\x15a\x10fWa\r\x80`P\x82a\x1FSV[a\r\x8B\x90`\x01a\x1F@V[a\r\x95\x90\x87a\x1F@V[\x93Pa\r\xA3\x8A\x82`Pa\x16\x88V[_\x81\x81R`\x03` R`@\x90 T\x90\x93Pa\x0FyW\x84a\x0E\xF9\x84_\x81\x90P`\x08\x81~\xFF\0\xFF\0\xFF\0\xFF\0\xFF\0\xFF\0\xFF\0\xFF\0\xFF\0\xFF\0\xFF\0\xFF\0\xFF\0\xFF\0\xFF\0\xFF\x16\x90\x1B`\x08\x82\x90\x1C~\xFF\0\xFF\0\xFF\0\xFF\0\xFF\0\xFF\0\xFF\0\xFF\0\xFF\0\xFF\0\xFF\0\xFF\0\xFF\0\xFF\0\xFF\0\xFF\x16\x17\x90P`\x10\x81}\xFF\xFF\0\0\xFF\xFF\0\0\xFF\xFF\0\0\xFF\xFF\0\0\xFF\xFF\0\0\xFF\xFF\0\0\xFF\xFF\0\0\xFF\xFF\x16\x90\x1B`\x10\x82\x90\x1C}\xFF\xFF\0\0\xFF\xFF\0\0\xFF\xFF\0\0\xFF\xFF\0\0\xFF\xFF\0\0\xFF\xFF\0\0\xFF\xFF\0\0\xFF\xFF\x16\x17\x90P` \x81{\xFF\xFF\xFF\xFF\0\0\0\0\xFF\xFF\xFF\xFF\0\0\0\0\xFF\xFF\xFF\xFF\0\0\0\0\xFF\xFF\xFF\xFF\x16\x90\x1B` \x82\x90\x1C{\xFF\xFF\xFF\xFF\0\0\0\0\xFF\xFF\xFF\xFF\0\0\0\0\xFF\xFF\xFF\xFF\0\0\0\0\xFF\xFF\xFF\xFF\x16\x17\x90P`@\x81w\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\0\0\0\0\0\0\0\0\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x90\x1B`@\x82\x90\x1Cw\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\0\0\0\0\0\0\0\0\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x17\x90P`\x80\x81\x90\x1B`\x80\x82\x90\x1C\x17\x90P\x91\x90PV[\x11\x15a\x0FGW`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`\x1B`$\x82\x01R\x7FHeader work is insufficient\0\0\0\0\0`D\x82\x01R`d\x01a\x02NV[_\x83\x81R`\x03` R`@\x90 \x87\x90Ua\x0Fb`\x04\x85a\x1E\xA4V[_\x03a\x0FyW_\x83\x81R`\x04` R`@\x90 \x84\x90U[\x84a\x0F\x84\x8B\x83a\x16\xADV[\x14a\x0F\xD1W`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`\x1B`$\x82\x01R\x7FTarget changed unexpectedly\0\0\0\0\0`D\x82\x01R`d\x01a\x02NV[\x86a\x0F\xDC\x8B\x83a\x17FV[\x14a\x10OW`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`&`$\x82\x01R\x7FHeaders do not form a consistent`D\x82\x01R\x7F chain\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`d\x82\x01R`\x84\x01a\x02NV[\x82\x96P`P\x81a\x10_\x91\x90a\x1F@V[\x90Pa\rmV[P\x81a\x10q\x8Ba\nUV[`@Q\x7F\xF9\x0EO\x1D\x9C\xD0\xDDU\xE39A\x1C\xBC\x9B\x15$\x820|:#\xEDdq^J(X\xF6A\xA3\xF5\x90_\x90\xA3P`\x01\x99\x98PPPPPPPPPV[_a\x07\xE0\x82\x11\x15a\x11\"W`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`3`$\x82\x01R\x7FRequested limit is greater than `D\x82\x01R\x7F1 difficulty period\0\0\0\0\0\0\0\0\0\0\0\0\0`d\x82\x01R`\x84\x01a\x02NV[_a\x11,\x84a\nUV[\x90P_a\x118\x86a\nUV[\x90P`\x01T\x81\x14a\x11\x8BW`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01\x81\x90R`$\x82\x01R\x7FPassed in best is not best known`D\x82\x01R`d\x01a\x02NV[_\x82\x81R`\x03` R`@\x90 Ta\x11\xE5W`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`\x13`$\x82\x01R\x7FNew best is unknown\0\0\0\0\0\0\0\0\0\0\0\0\0`D\x82\x01R`d\x01a\x02NV[a\x11\xF3\x87`\x01T\x84\x87a\x17^V[a\x12eW`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`)`$\x82\x01R\x7FAncestor must be heaviest common`D\x82\x01R\x7F ancestor\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`d\x82\x01R`\x84\x01a\x02NV[\x81a\x12q\x88\x88\x88a\x17\xF8V[\x14a\x12\xE4W`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`3`$\x82\x01R\x7FNew best hash does not have more`D\x82\x01R\x7F work than previous\0\0\0\0\0\0\0\0\0\0\0\0\0`d\x82\x01R`\x84\x01a\x02NV[`\x01\x82\x90U`\x02\x87\x90U_a\x12\xF8\x86a\x19\x89V[\x90P`\x05T\x81\x14a\x13\tW`\x05\x81\x90U[\x87\x83\x83\x7F<\xC1=\xE6M\xF0\xF0#\x96&#\\Q\xA2\xDA%\x1B\xBC\x8C\x85fN\xCC\xE3\x92c\xDA>\xE0?`l`@Q`@Q\x80\x91\x03\x90\xA4P`\x01\x97\x96PPPPPPPV[__a\x13Ya\x13T\x86a\nUV[a\x0B\xFFV[\x90P_a\x13ha\x13T\x86a\nUV[\x90Pa\x13va\x07\xE0\x82a\x1E\xA4V[a\x07\xDF\x14a\x13\xECW`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`=`$\x82\x01R\x7FMust provide the last header of `D\x82\x01R\x7Fthe closing difficulty period\0\0\0`d\x82\x01R`\x84\x01a\x02NV[a\x13\xF8\x82a\x07\xDFa\x1F@V[\x81\x14a\x14lW`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`(`$\x82\x01R\x7FMust provide exactly 1 difficult`D\x82\x01R\x7Fy period\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`d\x82\x01R`\x84\x01a\x02NV[a\x14u\x85a\x19\x89V[a\x14~\x87a\x19\x89V[\x14a\x14\xF1W`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`'`$\x82\x01R\x7FPeriod header difficulties do no`D\x82\x01R\x7Ft match\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`d\x82\x01R`\x84\x01a\x02NV[_a\x14\xFB\x85a\x16}V[\x90P_a\x15-a\x15\n\x89a\x16}V[a\x15\x13\x8Aa\x19\x9BV[c\xFF\xFF\xFF\xFF\x16a\x15\"\x8Aa\x19\x9BV[c\xFF\xFF\xFF\xFF\x16a\x19\xCEV[\x90P\x81\x81\x83\x16\x14a\x15\x80W`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`\x19`$\x82\x01R\x7FInvalid retarget provided\0\0\0\0\0\0\0`D\x82\x01R`d\x01a\x02NV[_a\x15\x8A\x89a\x19\x89V[\x90P\x80`\x06T\x14\x15\x80\x15a\x15\xB4WPa\x07\xE0a\x15\xA7`\x01Ta\x0B\xFFV[a\x15\xB1\x91\x90a\x1F\x11V[\x84\x11[\x15a\x15\xBFW`\x06\x81\x90U[a\x15\xCB\x88\x88`\x01a\x0C\xBCV[\x99\x98PPPPPPPPPV[_` \x84Qa\x15\xE7\x91\x90a\x1E\xA4V[\x15a\x15\xF3WP_a\x06\x88V[\x83Q_\x03a\x16\x02WP_a\x06\x88V[\x81\x85_[\x86Q\x81\x10\x15a\x16pWa\x16\x1A`\x02\x84a\x1E\xA4V[`\x01\x03a\x16>Wa\x167a\x161\x88\x83\x01` \x01Q\x90V[\x83a\x1A`V[\x91Pa\x16WV[a\x16T\x82a\x16O\x89\x84\x01` \x01Q\x90V[a\x1A`V[\x91P[`\x01\x92\x90\x92\x1C\x91a\x16i` \x82a\x1F@V[\x90Pa\x16\x06V[P\x90\x93\x14\x95\x94PPPPPV[_a\x04\xC9\x82_a\x16\xADV[_` _\x83\x85` \x01\x87\x01`\x02Z\xFAP` _` _`\x02Z\xFAPP_Q\x93\x92PPPV[_\x80a\x16\xC4a\x16\xBD\x84`Ha\x1F@V[\x85\x90a\x1AkV[`\xE8\x1C\x90P_\x84a\x16\xD6\x85`Ka\x1F@V[\x81Q\x81\x10a\x16\xE6Wa\x16\xE6a\x1FfV[\x01` \x01Q`\xF8\x1C\x90P_a\x17\x18\x83_`\x10\x82b\xFF\xFF\xFF\x16\x90\x1C\x82a\xFF\0\x16`\x10\x84b\xFF\xFF\xFF\x16\x90\x1B\x17\x17\x90P\x91\x90PV[b\xFF\xFF\xFF\x16\x90P_a\x17+`\x03\x84a\x1F\x93V[`\xFF\x16\x90Pa\x17<\x81a\x01\0a \x8FV[a\x07\xFA\x90\x83a \x9AV[_a\x04\xC6a\x17U\x83`\x04a\x1F@V[\x84\x01` \x01Q\x90V[_\x83\x85\x14\x80\x15a\x17mWP\x82\x85\x14[\x15a\x17zWP`\x01a\x06\x88V[\x83\x83\x81\x81_[\x86\x81\x10\x15a\x17\xC2W\x89\x83\x14a\x17\xA1W_\x83\x81R`\x03` R`@\x90 T\x92\x94P[\x89\x82\x14a\x17\xBAW_\x82\x81R`\x03` R`@\x90 T\x91\x93P[`\x01\x01a\x17\x80V[P\x82\x84\x03a\x17\xD6W_\x94PPPPPa\x06\x88V[\x80\x82\x14a\x17\xE9W_\x94PPPPPa\x06\x88V[P`\x01\x98\x97PPPPPPPPV[__a\x18\x03\x85a\x0B\xFFV[\x90P_a\x18\x12a\x13T\x86a\nUV[\x90P_a\x18!a\x13T\x86a\nUV[\x90P\x82\x82\x10\x15\x80\x15a\x183WP\x82\x81\x10\x15[a\x18\xA5W`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`0`$\x82\x01R\x7FA descendant height is below the`D\x82\x01R\x7F ancestor height\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`d\x82\x01R`\x84\x01a\x02NV[_a\x18\xB2a\x07\xE0\x85a\x1E\xA4V[a\x18\xBE\x85a\x07\xE0a\x1F@V[a\x18\xC8\x91\x90a\x1F\x11V[\x90P\x80\x83\x10\x81\x83\x10\x81\x15\x82a\x18\xDAWP\x80[\x15a\x18\xF5Wa\x18\xE8\x89a\nUV[\x96PPPPPPPa\t\xF3V[\x81\x80\x15a\x19\0WP\x80\x15[\x15a\x19\x0EWa\x18\xE8\x88a\nUV[\x81\x80\x15a\x19\x18WP\x80[\x15a\x19<W\x83\x85\x10\x15a\x193Wa\x19.\x88a\nUV[a\x18\xE8V[a\x18\xE8\x89a\nUV[a\x19E\x88a\x19\x89V[a\x19Qa\x07\xE0\x86a\x1E\xA4V[a\x19[\x91\x90a \x9AV[a\x19d\x8Aa\x19\x89V[a\x19pa\x07\xE0\x88a\x1E\xA4V[a\x19z\x91\x90a \x9AV[\x10\x15a\x193Wa\x18\xE8\x88a\nUV[_a\x04\xC9a\x19\x96\x83a\x16}V[a\x1AyV[_a\x04\xC9a\x19\xA8\x83a\x1A\xA0V[`\xD8\x81\x90\x1Cc\xFF\0\xFF\0\x16b\xFF\0\xFF`\xE8\x92\x90\x92\x1C\x91\x90\x91\x16\x17`\x10\x81\x81\x1B\x91\x90\x1C\x17\x90V[_\x80a\x19\xDA\x83\x85a\x1A\xACV[\x90Pa\x19\xEAb\x12u\0`\x04a\x1B\x07V[\x81\x10\x15a\x1A\x02Wa\x19\xFFb\x12u\0`\x04a\x1B\x07V[\x90P[a\x1A\x10b\x12u\0`\x04a\x1B\x12V[\x81\x11\x15a\x1A(Wa\x1A%b\x12u\0`\x04a\x1B\x12V[\x90P[_a\x1A@\x82a\x1A:\x88b\x01\0\0a\x1B\x07V[\x90a\x1B\x12V[\x90Pa\x1AVb\x01\0\0a\x1A:\x83b\x12u\0a\x1B\x07V[\x96\x95PPPPPPV[_a\x04\xC6\x83\x83a\x1B\x85V[_a\x04\xC6\x83\x83\x01` \x01Q\x90V[_a\x04\xC9{\xFF\xFF\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x83a\x1B\x07V[_a\x04\xC9\x82`Da\x1AkV[_\x82\x82\x11\x15a\x1A\xFDW`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`\x1D`$\x82\x01R\x7FUnderflow during subtraction.\0\0\0`D\x82\x01R`d\x01a\x02NV[a\x04\xC6\x82\x84a\x1F\x11V[_a\x04\xC6\x82\x84a\x1FSV[_\x82_\x03a\x1B!WP_a\x04\xC9V[a\x1B+\x82\x84a \x9AV[\x90P\x81a\x1B8\x84\x83a\x1FSV[\x14a\x04\xC9W`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`\x1F`$\x82\x01R\x7FOverflow during multiplication.\0`D\x82\x01R`d\x01a\x02NV[_\x82_R\x81` R` _`@_`\x02Z\xFAP` _` _`\x02Z\xFAPP_Q\x92\x91PPV[__\x83`\x1F\x84\x01\x12a\x1B\xBCW__\xFD[P\x815g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\x1B\xD3W__\xFD[` \x83\x01\x91P\x83` \x82\x85\x01\x01\x11\x15a\x1B\xEAW__\xFD[\x92P\x92\x90PV[_______`\xA0\x88\x8A\x03\x12\x15a\x1C\x07W__\xFD[\x875g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\x1C\x1DW__\xFD[a\x1C)\x8A\x82\x8B\x01a\x1B\xACV[\x90\x98P\x96PP` \x88\x015g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\x1CHW__\xFD[a\x1CT\x8A\x82\x8B\x01a\x1B\xACV[\x90\x96P\x94PP`@\x88\x015\x92P``\x88\x015\x91P`\x80\x88\x015`\xFF\x81\x16\x81\x14a\x1C{W__\xFD[\x80\x91PP\x92\x95\x98\x91\x94\x97P\x92\x95PV[__`@\x83\x85\x03\x12\x15a\x1C\x9CW__\xFD[PP\x805\x92` \x90\x91\x015\x91PV[_` \x82\x84\x03\x12\x15a\x1C\xBBW__\xFD[P5\x91\x90PV[____`@\x85\x87\x03\x12\x15a\x1C\xD5W__\xFD[\x845g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\x1C\xEBW__\xFD[a\x1C\xF7\x87\x82\x88\x01a\x1B\xACV[\x90\x95P\x93PP` \x85\x015g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\x1D\x16W__\xFD[a\x1D\"\x87\x82\x88\x01a\x1B\xACV[\x95\x98\x94\x97P\x95PPPPV[______`\x80\x87\x89\x03\x12\x15a\x1DCW__\xFD[\x865\x95P` \x87\x015g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\x1D`W__\xFD[a\x1Dl\x89\x82\x8A\x01a\x1B\xACV[\x90\x96P\x94PP`@\x87\x015g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\x1D\x8BW__\xFD[a\x1D\x97\x89\x82\x8A\x01a\x1B\xACV[\x97\x9A\x96\x99P\x94\x97\x94\x96\x95``\x90\x95\x015\x94\x93PPPPV[______``\x87\x89\x03\x12\x15a\x1D\xC4W__\xFD[\x865g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\x1D\xDAW__\xFD[a\x1D\xE6\x89\x82\x8A\x01a\x1B\xACV[\x90\x97P\x95PP` \x87\x015g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\x1E\x05W__\xFD[a\x1E\x11\x89\x82\x8A\x01a\x1B\xACV[\x90\x95P\x93PP`@\x87\x015g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\x1E0W__\xFD[a\x1E<\x89\x82\x8A\x01a\x1B\xACV[\x97\x9A\x96\x99P\x94\x97P\x92\x95\x93\x94\x92PPPV[___``\x84\x86\x03\x12\x15a\x1E`W__\xFD[PP\x815\x93` \x83\x015\x93P`@\x90\x92\x015\x91\x90PV[\x7FNH{q\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0_R`\x12`\x04R`$_\xFD[_\x82a\x1E\xB2Wa\x1E\xB2a\x1EwV[P\x06\x90V[_\x82Q\x80` \x85\x01\x84^_\x92\x01\x91\x82RP\x91\x90PV[_` \x82\x84\x03\x12\x15a\x1E\xDDW__\xFD[PQ\x91\x90PV[\x7FNH{q\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0_R`\x11`\x04R`$_\xFD[\x81\x81\x03\x81\x81\x11\x15a\x04\xC9Wa\x04\xC9a\x1E\xE4V[c\xFF\xFF\xFF\xFF\x81\x81\x16\x83\x82\x16\x01\x90\x81\x11\x15a\x04\xC9Wa\x04\xC9a\x1E\xE4V[\x80\x82\x01\x80\x82\x11\x15a\x04\xC9Wa\x04\xC9a\x1E\xE4V[_\x82a\x1FaWa\x1Faa\x1EwV[P\x04\x90V[\x7FNH{q\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0_R`2`\x04R`$_\xFD[`\xFF\x82\x81\x16\x82\x82\x16\x03\x90\x81\x11\x15a\x04\xC9Wa\x04\xC9a\x1E\xE4V[`\x01\x81[`\x01\x84\x11\x15a\x1F\xE7W\x80\x85\x04\x81\x11\x15a\x1F\xCBWa\x1F\xCBa\x1E\xE4V[`\x01\x84\x16\x15a\x1F\xD9W\x90\x81\x02\x90[`\x01\x93\x90\x93\x1C\x92\x80\x02a\x1F\xB0V[\x93P\x93\x91PPV[_\x82a\x1F\xFDWP`\x01a\x04\xC9V[\x81a \tWP_a\x04\xC9V[\x81`\x01\x81\x14a \x1FW`\x02\x81\x14a )Wa EV[`\x01\x91PPa\x04\xC9V[`\xFF\x84\x11\x15a :Wa :a\x1E\xE4V[PP`\x01\x82\x1Ba\x04\xC9V[P` \x83\x10a\x013\x83\x10\x16`N\x84\x10`\x0B\x84\x10\x16\x17\x15a hWP\x81\x81\na\x04\xC9V[a t_\x19\x84\x84a\x1F\xACV[\x80_\x19\x04\x82\x11\x15a \x87Wa \x87a\x1E\xE4V[\x02\x93\x92PPPV[_a\x04\xC6\x83\x83a\x1F\xEFV[\x80\x82\x02\x81\x15\x82\x82\x04\x84\x14\x17a\x04\xC9Wa\x04\xC9a\x1E\xE4V\xFE\xA2dipfsX\"\x12 @\xDF5\xF8\r\xCE$,\xBB\x92\x9Aj\xD8\xD6\x04\xF1\xF9\x8F\xF2Y9\xDF\x9D\xAA\xCD\x8C$\xAA\xB7\xF1RXdsolcC\0\x08\x1C\x003",
    );
    /// The runtime bytecode of the contract, as deployed on the network.
    ///
    /// ```text
    ///0x608060405234801561000f575f5ffd5b50600436106100da575f3560e01c806365da41b9116100885780637fa637fc116100635780637fa637fc14610193578063b985621a146101a6578063c58242cd146101b9578063e3d8d8d8146101c1575f5ffd5b806365da41b91461014057806370d53c181461016357806374c3a3a914610180575f5ffd5b80632b97be24116100b85780632b97be241461011257806330017b3b1461011a57806360b5c3901461012d575f5ffd5b806305d09a70146100de578063113764be146100f35780631910d9731461010a575b5f5ffd5b6100f16100ec366004611bf1565b6101c8565b005b6005545b6040519081526020015b60405180910390f35b6001546100f7565b6006546100f7565b6100f7610128366004611c8b565b6104bb565b6100f761013b366004611cab565b6104cf565b61015361014e366004611cc2565b6104d9565b6040519015158152602001610101565b61016b600481565b60405163ffffffff9091168152602001610101565b61015361018e366004611d2e565b610690565b6101536101a1366004611daf565b610805565b6101536101b4366004611e4e565b6109e4565b6002546100f7565b5f546100f7565b61020687878080601f0160208091040260200160405190810160405280939291908181526020018383808284375f920191909152506109fa92505050565b6102575760405162461bcd60e51b815260206004820152601060248201527f4261642068656164657220626c6f636b0000000000000000000000000000000060448201526064015b60405180910390fd5b61029585858080601f0160208091040260200160405190810160405280939291908181526020018383808284375f92019190915250610a0192505050565b6102e15760405162461bcd60e51b815260206004820152601660248201527f426164206d65726b6c652061727261792070726f6f6600000000000000000000604482015260640161024e565b6103608361032389898080601f0160208091040260200160405190810160405280939291908181526020018383808284375f92019190915250610a1792505050565b87878080601f0160208091040260200160405190810160405280939291908181526020018383808284375f92019190915250889250610a23915050565b6103ac5760405162461bcd60e51b815260206004820152601360248201527f42616420696e636c7573696f6e2070726f6f6600000000000000000000000000604482015260640161024e565b5f6103eb88888080601f0160208091040260200160405190810160405280939291908181526020018383808284375f92019190915250610a5592505050565b90505f6103f760025490565b90506104068282610800610b2d565b6104525760405162461bcd60e51b815260206004820152601b60248201527f47434420646f6573206e6f7420636f6e6669726d206865616465720000000000604482015260640161024e565b8260ff1661045f83610b6e565b60ff1610156104b05760405162461bcd60e51b815260206004820152601a60248201527f496e73756666696369656e7420636f6e6669726d6174696f6e73000000000000604482015260640161024e565b505050505050505050565b5f6104c68383610b8d565b90505b92915050565b5f6104c982610bff565b5f61051883838080601f0160208091040260200160405190810160405280939291908181526020018383808284375f92019190915250610cad92505050565b61058a5760405162461bcd60e51b815260206004820152602b60248201527f486561646572206172726179206c656e677468206d757374206265206469766960448201527f7369626c65206279203830000000000000000000000000000000000000000000606482015260840161024e565b6105c885858080601f0160208091040260200160405190810160405280939291908181526020018383808284375f920191909152506109fa92505050565b6106145760405162461bcd60e51b815260206004820152601760248201527f416e63686f72206d757374206265203830206279746573000000000000000000604482015260640161024e565b61068585858080601f0160208091040260200160405190810160405280939291908181526020018383808284375f9201919091525050604080516020601f890181900481028201810190925287815292508791508690819084018382808284375f9201829052509250610cbc915050565b90505b949350505050565b5f6106cf84848080601f0160208091040260200160405190810160405280939291908181526020018383808284375f920191909152506109fa92505050565b8015610714575061071486868080601f0160208091040260200160405190810160405280939291908181526020018383808284375f920191909152506109fa92505050565b6107865760405162461bcd60e51b815260206004820152602e60248201527f42616420617267732e20436865636b2068656164657220616e6420617272617960448201527f2062797465206c656e677468732e000000000000000000000000000000000000606482015260840161024e565b6107fa8787878080601f0160208091040260200160405190810160405280939291908181526020018383808284375f9201919091525050604080516020601f8b0181900481028201810190925289815292508991508890819084018382808284375f920191909152508892506110a9915050565b979650505050505050565b5f61084487878080601f0160208091040260200160405190810160405280939291908181526020018383808284375f920191909152506109fa92505050565b8015610889575061088985858080601f0160208091040260200160405190810160405280939291908181526020018383808284375f920191909152506109fa92505050565b80156108ce57506108ce83838080601f0160208091040260200160405190810160405280939291908181526020018383808284375f92019190915250610cad92505050565b6109405760405162461bcd60e51b815260206004820152602e60248201527f42616420617267732e20436865636b2068656164657220616e6420617272617960448201527f2062797465206c656e677468732e000000000000000000000000000000000000606482015260840161024e565b6107fa87878080601f0160208091040260200160405190810160405280939291908181526020018383808284375f9201919091525050604080516020601f8b0181900481028201810190925289815292508991508890819084018382808284375f9201919091525050604080516020601f8a0181900481028201810190925288815292508891508790819084018382808284375f9201919091525061134692505050565b5f6109f0848484610b2d565b90505b9392505050565b5160501490565b5f60208251610a109190611ea4565b1592915050565b60448101515f906104c9565b5f8385148015610a31575081155b8015610a3c57508251155b15610a4957506001610688565b610685858486856115d8565b5f60028083604051610a679190611eb7565b602060405180830381855afa158015610a82573d5f5f3e3d5ffd5b5050506040513d601f19601f82011682018060405250810190610aa59190611ecd565b604051602001610ab791815260200190565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe081840301815290829052610aef91611eb7565b602060405180830381855afa158015610b0a573d5f5f3e3d5ffd5b5050506040513d601f19601f820116820180604052508101906104c99190611ecd565b5f82815b83811015610b6357858203610b4b576001925050506109f3565b5f918252600360205260409091205490600101610b31565b505f95945050505050565b5f610b7882610bff565b610b83600154610bff565b6104c99190611f11565b5f82815b83811015610bb1575f918252600360205260409091205490600101610b91565b50806104c65760405162461bcd60e51b815260206004820152601060248201527f556e6b6e6f776e20616e636573746f7200000000000000000000000000000000604482015260640161024e565b5f8082815b610c1060046001611f24565b63ffffffff16811015610c64575f828152600460205260408120549350839003610c49575f918252600360205260409091205490610c5c565b610c538184611f40565b95945050505050565b600101610c04565b5060405162461bcd60e51b815260206004820152600d60248201527f556e6b6e6f776e20626c6f636b00000000000000000000000000000000000000604482015260640161024e565b5f60508251610a109190611ea4565b5f5f610cc785610a55565b90505f610cd382610bff565b90505f610cdf8661167d565b90508480610cf4575080610cf28861167d565b145b610d655760405162461bcd60e51b8152602060048201526024808201527f556e6578706563746564207265746172676574206f6e2065787465726e616c2060448201527f63616c6c00000000000000000000000000000000000000000000000000000000606482015260840161024e565b85515f908190815b8181101561106657610d80605082611f53565b610d8b906001611f40565b610d959087611f40565b9350610da38a826050611688565b5f81815260036020526040902054909350610f795784610ef9845f8190506008817eff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff16901b600882901c7eff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff161790506010817dffff0000ffff0000ffff0000ffff0000ffff0000ffff0000ffff0000ffff16901b601082901c7dffff0000ffff0000ffff0000ffff0000ffff0000ffff0000ffff0000ffff161790506020817bffffffff00000000ffffffff00000000ffffffff00000000ffffffff16901b602082901c7bffffffff00000000ffffffff00000000ffffffff00000000ffffffff1617905060408177ffffffffffffffff0000000000000000ffffffffffffffff16901b604082901c77ffffffffffffffff0000000000000000ffffffffffffffff16179050608081901b608082901c179050919050565b1115610f475760405162461bcd60e51b815260206004820152601b60248201527f48656164657220776f726b20697320696e73756666696369656e740000000000604482015260640161024e565b5f838152600360205260409020879055610f62600485611ea4565b5f03610f79575f8381526004602052604090208490555b84610f848b836116ad565b14610fd15760405162461bcd60e51b815260206004820152601b60248201527f546172676574206368616e67656420756e65787065637465646c790000000000604482015260640161024e565b86610fdc8b83611746565b1461104f5760405162461bcd60e51b815260206004820152602660248201527f4865616465727320646f206e6f7420666f726d206120636f6e73697374656e7460448201527f20636861696e0000000000000000000000000000000000000000000000000000606482015260840161024e565b82965060508161105f9190611f40565b9050610d6d565b50816110718b610a55565b6040517ff90e4f1d9cd0dd55e339411cbc9b152482307c3a23ed64715e4a2858f641a3f5905f90a35060019998505050505050505050565b5f6107e08211156111225760405162461bcd60e51b815260206004820152603360248201527f526571756573746564206c696d69742069732067726561746572207468616e2060448201527f3120646966666963756c747920706572696f6400000000000000000000000000606482015260840161024e565b5f61112c84610a55565b90505f61113886610a55565b9050600154811461118b5760405162461bcd60e51b815260206004820181905260248201527f50617373656420696e2062657374206973206e6f742062657374206b6e6f776e604482015260640161024e565b5f828152600360205260409020546111e55760405162461bcd60e51b815260206004820152601360248201527f4e6577206265737420697320756e6b6e6f776e00000000000000000000000000604482015260640161024e565b6111f387600154848761175e565b6112655760405162461bcd60e51b815260206004820152602960248201527f416e636573746f72206d75737420626520686561766965737420636f6d6d6f6e60448201527f20616e636573746f720000000000000000000000000000000000000000000000606482015260840161024e565b816112718888886117f8565b146112e45760405162461bcd60e51b815260206004820152603360248201527f4e65772062657374206861736820646f6573206e6f742068617665206d6f726560448201527f20776f726b207468616e2070726576696f757300000000000000000000000000606482015260840161024e565b600182905560028790555f6112f886611989565b905060055481146113095760058190555b8783837f3cc13de64df0f0239626235c51a2da251bbc8c85664ecce39263da3ee03f606c60405160405180910390a4506001979650505050505050565b5f5f61135961135486610a55565b610bff565b90505f61136861135486610a55565b90506113766107e082611ea4565b6107df146113ec5760405162461bcd60e51b815260206004820152603d60248201527f4d7573742070726f7669646520746865206c61737420686561646572206f662060448201527f74686520636c6f73696e6720646966666963756c747920706572696f64000000606482015260840161024e565b6113f8826107df611f40565b811461146c5760405162461bcd60e51b815260206004820152602860248201527f4d7573742070726f766964652065786163746c79203120646966666963756c7460448201527f7920706572696f64000000000000000000000000000000000000000000000000606482015260840161024e565b61147585611989565b61147e87611989565b146114f15760405162461bcd60e51b815260206004820152602760248201527f506572696f642068656164657220646966666963756c7469657320646f206e6f60448201527f74206d6174636800000000000000000000000000000000000000000000000000606482015260840161024e565b5f6114fb8561167d565b90505f61152d61150a8961167d565b6115138a61199b565b63ffffffff166115228a61199b565b63ffffffff166119ce565b905081818316146115805760405162461bcd60e51b815260206004820152601960248201527f496e76616c69642072657461726765742070726f766964656400000000000000604482015260640161024e565b5f61158a89611989565b905080600654141580156115b457506107e06115a7600154610bff565b6115b19190611f11565b84115b156115bf5760068190555b6115cb88886001610cbc565b9998505050505050505050565b5f602084516115e79190611ea4565b156115f357505f610688565b83515f0361160257505f610688565b81855f5b86518110156116705761161a600284611ea4565b60010361163e576116376116318883016020015190565b83611a60565b9150611657565b6116548261164f8984016020015190565b611a60565b91505b60019290921c91611669602082611f40565b9050611606565b5090931495945050505050565b5f6104c9825f6116ad565b5f60205f8385602001870160025afa5060205f60205f60025afa50505f519392505050565b5f806116c46116bd846048611f40565b8590611a6b565b60e81c90505f846116d685604b611f40565b815181106116e6576116e6611f66565b016020015160f81c90505f611718835f60108262ffffff16901c8261ff001660108462ffffff16901b17179050919050565b62ffffff1690505f61172b600384611f93565b60ff16905061173c8161010061208f565b6107fa908361209a565b5f6104c6611755836004611f40565b84016020015190565b5f838514801561176d57508285145b1561177a57506001610688565b838381815f5b868110156117c2578983146117a1575f838152600360205260409020549294505b8982146117ba575f828152600360205260409020549193505b600101611780565b508284036117d6575f945050505050610688565b8082146117e9575f945050505050610688565b50600198975050505050505050565b5f5f61180385610bff565b90505f61181261135486610a55565b90505f61182161135486610a55565b90508282101580156118335750828110155b6118a55760405162461bcd60e51b815260206004820152603060248201527f412064657363656e64616e74206865696768742069732062656c6f772074686560448201527f20616e636573746f722068656967687400000000000000000000000000000000606482015260840161024e565b5f6118b26107e085611ea4565b6118be856107e0611f40565b6118c89190611f11565b90508083108183108115826118da5750805b156118f5576118e889610a55565b96505050505050506109f3565b818015611900575080155b1561190e576118e888610a55565b8180156119185750805b1561193c57838510156119335761192e88610a55565b6118e8565b6118e889610a55565b61194588611989565b6119516107e086611ea4565b61195b919061209a565b6119648a611989565b6119706107e088611ea4565b61197a919061209a565b1015611933576118e888610a55565b5f6104c96119968361167d565b611a79565b5f6104c96119a883611aa0565b60d881901c63ff00ff001662ff00ff60e89290921c9190911617601081811b91901c1790565b5f806119da8385611aac565b90506119ea621275006004611b07565b811015611a02576119ff621275006004611b07565b90505b611a10621275006004611b12565b811115611a2857611a25621275006004611b12565b90505b5f611a4082611a3a8862010000611b07565b90611b12565b9050611a5662010000611a3a8362127500611b07565b9695505050505050565b5f6104c68383611b85565b5f6104c68383016020015190565b5f6104c97bffff000000000000000000000000000000000000000000000000000083611b07565b5f6104c9826044611a6b565b5f82821115611afd5760405162461bcd60e51b815260206004820152601d60248201527f556e646572666c6f7720647572696e67207375627472616374696f6e2e000000604482015260640161024e565b6104c68284611f11565b5f6104c68284611f53565b5f825f03611b2157505f6104c9565b611b2b828461209a565b905081611b388483611f53565b146104c95760405162461bcd60e51b815260206004820152601f60248201527f4f766572666c6f7720647572696e67206d756c7469706c69636174696f6e2e00604482015260640161024e565b5f825f528160205260205f60405f60025afa5060205f60205f60025afa50505f5192915050565b5f5f83601f840112611bbc575f5ffd5b50813567ffffffffffffffff811115611bd3575f5ffd5b602083019150836020828501011115611bea575f5ffd5b9250929050565b5f5f5f5f5f5f5f60a0888a031215611c07575f5ffd5b873567ffffffffffffffff811115611c1d575f5ffd5b611c298a828b01611bac565b909850965050602088013567ffffffffffffffff811115611c48575f5ffd5b611c548a828b01611bac565b9096509450506040880135925060608801359150608088013560ff81168114611c7b575f5ffd5b8091505092959891949750929550565b5f5f60408385031215611c9c575f5ffd5b50508035926020909101359150565b5f60208284031215611cbb575f5ffd5b5035919050565b5f5f5f5f60408587031215611cd5575f5ffd5b843567ffffffffffffffff811115611ceb575f5ffd5b611cf787828801611bac565b909550935050602085013567ffffffffffffffff811115611d16575f5ffd5b611d2287828801611bac565b95989497509550505050565b5f5f5f5f5f5f60808789031215611d43575f5ffd5b86359550602087013567ffffffffffffffff811115611d60575f5ffd5b611d6c89828a01611bac565b909650945050604087013567ffffffffffffffff811115611d8b575f5ffd5b611d9789828a01611bac565b979a9699509497949695606090950135949350505050565b5f5f5f5f5f5f60608789031215611dc4575f5ffd5b863567ffffffffffffffff811115611dda575f5ffd5b611de689828a01611bac565b909750955050602087013567ffffffffffffffff811115611e05575f5ffd5b611e1189828a01611bac565b909550935050604087013567ffffffffffffffff811115611e30575f5ffd5b611e3c89828a01611bac565b979a9699509497509295939492505050565b5f5f5f60608486031215611e60575f5ffd5b505081359360208301359350604090920135919050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52601260045260245ffd5b5f82611eb257611eb2611e77565b500690565b5f82518060208501845e5f920191825250919050565b5f60208284031215611edd575f5ffd5b5051919050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52601160045260245ffd5b818103818111156104c9576104c9611ee4565b63ffffffff81811683821601908111156104c9576104c9611ee4565b808201808211156104c9576104c9611ee4565b5f82611f6157611f61611e77565b500490565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52603260045260245ffd5b60ff82811682821603908111156104c9576104c9611ee4565b6001815b6001841115611fe757808504811115611fcb57611fcb611ee4565b6001841615611fd957908102905b60019390931c928002611fb0565b935093915050565b5f82611ffd575060016104c9565b8161200957505f6104c9565b816001811461201f576002811461202957612045565b60019150506104c9565b60ff84111561203a5761203a611ee4565b50506001821b6104c9565b5060208310610133831016604e8410600b8410161715612068575081810a6104c9565b6120745f198484611fac565b805f190482111561208757612087611ee4565b029392505050565b5f6104c68383611fef565b80820281158282048414176104c9576104c9611ee456fea264697066735822122040df35f80dce242cbb929a6ad8d604f1f98ff25939df9daacd8c24aab7f1525864736f6c634300081c0033
    /// ```
    #[rustfmt::skip]
    #[allow(clippy::all)]
    pub static DEPLOYED_BYTECODE: alloy_sol_types::private::Bytes = alloy_sol_types::private::Bytes::from_static(
        b"`\x80`@R4\x80\x15a\0\x0FW__\xFD[P`\x046\x10a\0\xDAW_5`\xE0\x1C\x80ce\xDAA\xB9\x11a\0\x88W\x80c\x7F\xA67\xFC\x11a\0cW\x80c\x7F\xA67\xFC\x14a\x01\x93W\x80c\xB9\x85b\x1A\x14a\x01\xA6W\x80c\xC5\x82B\xCD\x14a\x01\xB9W\x80c\xE3\xD8\xD8\xD8\x14a\x01\xC1W__\xFD[\x80ce\xDAA\xB9\x14a\x01@W\x80cp\xD5<\x18\x14a\x01cW\x80ct\xC3\xA3\xA9\x14a\x01\x80W__\xFD[\x80c+\x97\xBE$\x11a\0\xB8W\x80c+\x97\xBE$\x14a\x01\x12W\x80c0\x01{;\x14a\x01\x1AW\x80c`\xB5\xC3\x90\x14a\x01-W__\xFD[\x80c\x05\xD0\x9Ap\x14a\0\xDEW\x80c\x117d\xBE\x14a\0\xF3W\x80c\x19\x10\xD9s\x14a\x01\nW[__\xFD[a\0\xF1a\0\xEC6`\x04a\x1B\xF1V[a\x01\xC8V[\0[`\x05T[`@Q\x90\x81R` \x01[`@Q\x80\x91\x03\x90\xF3[`\x01Ta\0\xF7V[`\x06Ta\0\xF7V[a\0\xF7a\x01(6`\x04a\x1C\x8BV[a\x04\xBBV[a\0\xF7a\x01;6`\x04a\x1C\xABV[a\x04\xCFV[a\x01Sa\x01N6`\x04a\x1C\xC2V[a\x04\xD9V[`@Q\x90\x15\x15\x81R` \x01a\x01\x01V[a\x01k`\x04\x81V[`@Qc\xFF\xFF\xFF\xFF\x90\x91\x16\x81R` \x01a\x01\x01V[a\x01Sa\x01\x8E6`\x04a\x1D.V[a\x06\x90V[a\x01Sa\x01\xA16`\x04a\x1D\xAFV[a\x08\x05V[a\x01Sa\x01\xB46`\x04a\x1ENV[a\t\xE4V[`\x02Ta\0\xF7V[_Ta\0\xF7V[a\x02\x06\x87\x87\x80\x80`\x1F\x01` \x80\x91\x04\x02` \x01`@Q\x90\x81\x01`@R\x80\x93\x92\x91\x90\x81\x81R` \x01\x83\x83\x80\x82\x847_\x92\x01\x91\x90\x91RPa\t\xFA\x92PPPV[a\x02WW`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`\x10`$\x82\x01R\x7FBad header block\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`D\x82\x01R`d\x01[`@Q\x80\x91\x03\x90\xFD[a\x02\x95\x85\x85\x80\x80`\x1F\x01` \x80\x91\x04\x02` \x01`@Q\x90\x81\x01`@R\x80\x93\x92\x91\x90\x81\x81R` \x01\x83\x83\x80\x82\x847_\x92\x01\x91\x90\x91RPa\n\x01\x92PPPV[a\x02\xE1W`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`\x16`$\x82\x01R\x7FBad merkle array proof\0\0\0\0\0\0\0\0\0\0`D\x82\x01R`d\x01a\x02NV[a\x03`\x83a\x03#\x89\x89\x80\x80`\x1F\x01` \x80\x91\x04\x02` \x01`@Q\x90\x81\x01`@R\x80\x93\x92\x91\x90\x81\x81R` \x01\x83\x83\x80\x82\x847_\x92\x01\x91\x90\x91RPa\n\x17\x92PPPV[\x87\x87\x80\x80`\x1F\x01` \x80\x91\x04\x02` \x01`@Q\x90\x81\x01`@R\x80\x93\x92\x91\x90\x81\x81R` \x01\x83\x83\x80\x82\x847_\x92\x01\x91\x90\x91RP\x88\x92Pa\n#\x91PPV[a\x03\xACW`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`\x13`$\x82\x01R\x7FBad inclusion proof\0\0\0\0\0\0\0\0\0\0\0\0\0`D\x82\x01R`d\x01a\x02NV[_a\x03\xEB\x88\x88\x80\x80`\x1F\x01` \x80\x91\x04\x02` \x01`@Q\x90\x81\x01`@R\x80\x93\x92\x91\x90\x81\x81R` \x01\x83\x83\x80\x82\x847_\x92\x01\x91\x90\x91RPa\nU\x92PPPV[\x90P_a\x03\xF7`\x02T\x90V[\x90Pa\x04\x06\x82\x82a\x08\0a\x0B-V[a\x04RW`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`\x1B`$\x82\x01R\x7FGCD does not confirm header\0\0\0\0\0`D\x82\x01R`d\x01a\x02NV[\x82`\xFF\x16a\x04_\x83a\x0BnV[`\xFF\x16\x10\x15a\x04\xB0W`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`\x1A`$\x82\x01R\x7FInsufficient confirmations\0\0\0\0\0\0`D\x82\x01R`d\x01a\x02NV[PPPPPPPPPV[_a\x04\xC6\x83\x83a\x0B\x8DV[\x90P[\x92\x91PPV[_a\x04\xC9\x82a\x0B\xFFV[_a\x05\x18\x83\x83\x80\x80`\x1F\x01` \x80\x91\x04\x02` \x01`@Q\x90\x81\x01`@R\x80\x93\x92\x91\x90\x81\x81R` \x01\x83\x83\x80\x82\x847_\x92\x01\x91\x90\x91RPa\x0C\xAD\x92PPPV[a\x05\x8AW`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`+`$\x82\x01R\x7FHeader array length must be divi`D\x82\x01R\x7Fsible by 80\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`d\x82\x01R`\x84\x01a\x02NV[a\x05\xC8\x85\x85\x80\x80`\x1F\x01` \x80\x91\x04\x02` \x01`@Q\x90\x81\x01`@R\x80\x93\x92\x91\x90\x81\x81R` \x01\x83\x83\x80\x82\x847_\x92\x01\x91\x90\x91RPa\t\xFA\x92PPPV[a\x06\x14W`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`\x17`$\x82\x01R\x7FAnchor must be 80 bytes\0\0\0\0\0\0\0\0\0`D\x82\x01R`d\x01a\x02NV[a\x06\x85\x85\x85\x80\x80`\x1F\x01` \x80\x91\x04\x02` \x01`@Q\x90\x81\x01`@R\x80\x93\x92\x91\x90\x81\x81R` \x01\x83\x83\x80\x82\x847_\x92\x01\x91\x90\x91RPP`@\x80Q` `\x1F\x89\x01\x81\x90\x04\x81\x02\x82\x01\x81\x01\x90\x92R\x87\x81R\x92P\x87\x91P\x86\x90\x81\x90\x84\x01\x83\x82\x80\x82\x847_\x92\x01\x82\x90RP\x92Pa\x0C\xBC\x91PPV[\x90P[\x94\x93PPPPV[_a\x06\xCF\x84\x84\x80\x80`\x1F\x01` \x80\x91\x04\x02` \x01`@Q\x90\x81\x01`@R\x80\x93\x92\x91\x90\x81\x81R` \x01\x83\x83\x80\x82\x847_\x92\x01\x91\x90\x91RPa\t\xFA\x92PPPV[\x80\x15a\x07\x14WPa\x07\x14\x86\x86\x80\x80`\x1F\x01` \x80\x91\x04\x02` \x01`@Q\x90\x81\x01`@R\x80\x93\x92\x91\x90\x81\x81R` \x01\x83\x83\x80\x82\x847_\x92\x01\x91\x90\x91RPa\t\xFA\x92PPPV[a\x07\x86W`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`.`$\x82\x01R\x7FBad args. Check header and array`D\x82\x01R\x7F byte lengths.\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`d\x82\x01R`\x84\x01a\x02NV[a\x07\xFA\x87\x87\x87\x80\x80`\x1F\x01` \x80\x91\x04\x02` \x01`@Q\x90\x81\x01`@R\x80\x93\x92\x91\x90\x81\x81R` \x01\x83\x83\x80\x82\x847_\x92\x01\x91\x90\x91RPP`@\x80Q` `\x1F\x8B\x01\x81\x90\x04\x81\x02\x82\x01\x81\x01\x90\x92R\x89\x81R\x92P\x89\x91P\x88\x90\x81\x90\x84\x01\x83\x82\x80\x82\x847_\x92\x01\x91\x90\x91RP\x88\x92Pa\x10\xA9\x91PPV[\x97\x96PPPPPPPV[_a\x08D\x87\x87\x80\x80`\x1F\x01` \x80\x91\x04\x02` \x01`@Q\x90\x81\x01`@R\x80\x93\x92\x91\x90\x81\x81R` \x01\x83\x83\x80\x82\x847_\x92\x01\x91\x90\x91RPa\t\xFA\x92PPPV[\x80\x15a\x08\x89WPa\x08\x89\x85\x85\x80\x80`\x1F\x01` \x80\x91\x04\x02` \x01`@Q\x90\x81\x01`@R\x80\x93\x92\x91\x90\x81\x81R` \x01\x83\x83\x80\x82\x847_\x92\x01\x91\x90\x91RPa\t\xFA\x92PPPV[\x80\x15a\x08\xCEWPa\x08\xCE\x83\x83\x80\x80`\x1F\x01` \x80\x91\x04\x02` \x01`@Q\x90\x81\x01`@R\x80\x93\x92\x91\x90\x81\x81R` \x01\x83\x83\x80\x82\x847_\x92\x01\x91\x90\x91RPa\x0C\xAD\x92PPPV[a\t@W`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`.`$\x82\x01R\x7FBad args. Check header and array`D\x82\x01R\x7F byte lengths.\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`d\x82\x01R`\x84\x01a\x02NV[a\x07\xFA\x87\x87\x80\x80`\x1F\x01` \x80\x91\x04\x02` \x01`@Q\x90\x81\x01`@R\x80\x93\x92\x91\x90\x81\x81R` \x01\x83\x83\x80\x82\x847_\x92\x01\x91\x90\x91RPP`@\x80Q` `\x1F\x8B\x01\x81\x90\x04\x81\x02\x82\x01\x81\x01\x90\x92R\x89\x81R\x92P\x89\x91P\x88\x90\x81\x90\x84\x01\x83\x82\x80\x82\x847_\x92\x01\x91\x90\x91RPP`@\x80Q` `\x1F\x8A\x01\x81\x90\x04\x81\x02\x82\x01\x81\x01\x90\x92R\x88\x81R\x92P\x88\x91P\x87\x90\x81\x90\x84\x01\x83\x82\x80\x82\x847_\x92\x01\x91\x90\x91RPa\x13F\x92PPPV[_a\t\xF0\x84\x84\x84a\x0B-V[\x90P[\x93\x92PPPV[Q`P\x14\x90V[_` \x82Qa\n\x10\x91\x90a\x1E\xA4V[\x15\x92\x91PPV[`D\x81\x01Q_\x90a\x04\xC9V[_\x83\x85\x14\x80\x15a\n1WP\x81\x15[\x80\x15a\n<WP\x82Q\x15[\x15a\nIWP`\x01a\x06\x88V[a\x06\x85\x85\x84\x86\x85a\x15\xD8V[_`\x02\x80\x83`@Qa\ng\x91\x90a\x1E\xB7V[` `@Q\x80\x83\x03\x81\x85Z\xFA\x15\x80\x15a\n\x82W=__>=_\xFD[PPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90a\n\xA5\x91\x90a\x1E\xCDV[`@Q` \x01a\n\xB7\x91\x81R` \x01\x90V[`@\x80Q\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xE0\x81\x84\x03\x01\x81R\x90\x82\x90Ra\n\xEF\x91a\x1E\xB7V[` `@Q\x80\x83\x03\x81\x85Z\xFA\x15\x80\x15a\x0B\nW=__>=_\xFD[PPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90a\x04\xC9\x91\x90a\x1E\xCDV[_\x82\x81[\x83\x81\x10\x15a\x0BcW\x85\x82\x03a\x0BKW`\x01\x92PPPa\t\xF3V[_\x91\x82R`\x03` R`@\x90\x91 T\x90`\x01\x01a\x0B1V[P_\x95\x94PPPPPV[_a\x0Bx\x82a\x0B\xFFV[a\x0B\x83`\x01Ta\x0B\xFFV[a\x04\xC9\x91\x90a\x1F\x11V[_\x82\x81[\x83\x81\x10\x15a\x0B\xB1W_\x91\x82R`\x03` R`@\x90\x91 T\x90`\x01\x01a\x0B\x91V[P\x80a\x04\xC6W`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`\x10`$\x82\x01R\x7FUnknown ancestor\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`D\x82\x01R`d\x01a\x02NV[_\x80\x82\x81[a\x0C\x10`\x04`\x01a\x1F$V[c\xFF\xFF\xFF\xFF\x16\x81\x10\x15a\x0CdW_\x82\x81R`\x04` R`@\x81 T\x93P\x83\x90\x03a\x0CIW_\x91\x82R`\x03` R`@\x90\x91 T\x90a\x0C\\V[a\x0CS\x81\x84a\x1F@V[\x95\x94PPPPPV[`\x01\x01a\x0C\x04V[P`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`\r`$\x82\x01R\x7FUnknown block\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`D\x82\x01R`d\x01a\x02NV[_`P\x82Qa\n\x10\x91\x90a\x1E\xA4V[__a\x0C\xC7\x85a\nUV[\x90P_a\x0C\xD3\x82a\x0B\xFFV[\x90P_a\x0C\xDF\x86a\x16}V[\x90P\x84\x80a\x0C\xF4WP\x80a\x0C\xF2\x88a\x16}V[\x14[a\reW`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`$\x80\x82\x01R\x7FUnexpected retarget on external `D\x82\x01R\x7Fcall\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`d\x82\x01R`\x84\x01a\x02NV[\x85Q_\x90\x81\x90\x81[\x81\x81\x10\x15a\x10fWa\r\x80`P\x82a\x1FSV[a\r\x8B\x90`\x01a\x1F@V[a\r\x95\x90\x87a\x1F@V[\x93Pa\r\xA3\x8A\x82`Pa\x16\x88V[_\x81\x81R`\x03` R`@\x90 T\x90\x93Pa\x0FyW\x84a\x0E\xF9\x84_\x81\x90P`\x08\x81~\xFF\0\xFF\0\xFF\0\xFF\0\xFF\0\xFF\0\xFF\0\xFF\0\xFF\0\xFF\0\xFF\0\xFF\0\xFF\0\xFF\0\xFF\0\xFF\x16\x90\x1B`\x08\x82\x90\x1C~\xFF\0\xFF\0\xFF\0\xFF\0\xFF\0\xFF\0\xFF\0\xFF\0\xFF\0\xFF\0\xFF\0\xFF\0\xFF\0\xFF\0\xFF\0\xFF\x16\x17\x90P`\x10\x81}\xFF\xFF\0\0\xFF\xFF\0\0\xFF\xFF\0\0\xFF\xFF\0\0\xFF\xFF\0\0\xFF\xFF\0\0\xFF\xFF\0\0\xFF\xFF\x16\x90\x1B`\x10\x82\x90\x1C}\xFF\xFF\0\0\xFF\xFF\0\0\xFF\xFF\0\0\xFF\xFF\0\0\xFF\xFF\0\0\xFF\xFF\0\0\xFF\xFF\0\0\xFF\xFF\x16\x17\x90P` \x81{\xFF\xFF\xFF\xFF\0\0\0\0\xFF\xFF\xFF\xFF\0\0\0\0\xFF\xFF\xFF\xFF\0\0\0\0\xFF\xFF\xFF\xFF\x16\x90\x1B` \x82\x90\x1C{\xFF\xFF\xFF\xFF\0\0\0\0\xFF\xFF\xFF\xFF\0\0\0\0\xFF\xFF\xFF\xFF\0\0\0\0\xFF\xFF\xFF\xFF\x16\x17\x90P`@\x81w\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\0\0\0\0\0\0\0\0\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x90\x1B`@\x82\x90\x1Cw\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\0\0\0\0\0\0\0\0\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x17\x90P`\x80\x81\x90\x1B`\x80\x82\x90\x1C\x17\x90P\x91\x90PV[\x11\x15a\x0FGW`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`\x1B`$\x82\x01R\x7FHeader work is insufficient\0\0\0\0\0`D\x82\x01R`d\x01a\x02NV[_\x83\x81R`\x03` R`@\x90 \x87\x90Ua\x0Fb`\x04\x85a\x1E\xA4V[_\x03a\x0FyW_\x83\x81R`\x04` R`@\x90 \x84\x90U[\x84a\x0F\x84\x8B\x83a\x16\xADV[\x14a\x0F\xD1W`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`\x1B`$\x82\x01R\x7FTarget changed unexpectedly\0\0\0\0\0`D\x82\x01R`d\x01a\x02NV[\x86a\x0F\xDC\x8B\x83a\x17FV[\x14a\x10OW`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`&`$\x82\x01R\x7FHeaders do not form a consistent`D\x82\x01R\x7F chain\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`d\x82\x01R`\x84\x01a\x02NV[\x82\x96P`P\x81a\x10_\x91\x90a\x1F@V[\x90Pa\rmV[P\x81a\x10q\x8Ba\nUV[`@Q\x7F\xF9\x0EO\x1D\x9C\xD0\xDDU\xE39A\x1C\xBC\x9B\x15$\x820|:#\xEDdq^J(X\xF6A\xA3\xF5\x90_\x90\xA3P`\x01\x99\x98PPPPPPPPPV[_a\x07\xE0\x82\x11\x15a\x11\"W`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`3`$\x82\x01R\x7FRequested limit is greater than `D\x82\x01R\x7F1 difficulty period\0\0\0\0\0\0\0\0\0\0\0\0\0`d\x82\x01R`\x84\x01a\x02NV[_a\x11,\x84a\nUV[\x90P_a\x118\x86a\nUV[\x90P`\x01T\x81\x14a\x11\x8BW`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01\x81\x90R`$\x82\x01R\x7FPassed in best is not best known`D\x82\x01R`d\x01a\x02NV[_\x82\x81R`\x03` R`@\x90 Ta\x11\xE5W`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`\x13`$\x82\x01R\x7FNew best is unknown\0\0\0\0\0\0\0\0\0\0\0\0\0`D\x82\x01R`d\x01a\x02NV[a\x11\xF3\x87`\x01T\x84\x87a\x17^V[a\x12eW`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`)`$\x82\x01R\x7FAncestor must be heaviest common`D\x82\x01R\x7F ancestor\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`d\x82\x01R`\x84\x01a\x02NV[\x81a\x12q\x88\x88\x88a\x17\xF8V[\x14a\x12\xE4W`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`3`$\x82\x01R\x7FNew best hash does not have more`D\x82\x01R\x7F work than previous\0\0\0\0\0\0\0\0\0\0\0\0\0`d\x82\x01R`\x84\x01a\x02NV[`\x01\x82\x90U`\x02\x87\x90U_a\x12\xF8\x86a\x19\x89V[\x90P`\x05T\x81\x14a\x13\tW`\x05\x81\x90U[\x87\x83\x83\x7F<\xC1=\xE6M\xF0\xF0#\x96&#\\Q\xA2\xDA%\x1B\xBC\x8C\x85fN\xCC\xE3\x92c\xDA>\xE0?`l`@Q`@Q\x80\x91\x03\x90\xA4P`\x01\x97\x96PPPPPPPV[__a\x13Ya\x13T\x86a\nUV[a\x0B\xFFV[\x90P_a\x13ha\x13T\x86a\nUV[\x90Pa\x13va\x07\xE0\x82a\x1E\xA4V[a\x07\xDF\x14a\x13\xECW`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`=`$\x82\x01R\x7FMust provide the last header of `D\x82\x01R\x7Fthe closing difficulty period\0\0\0`d\x82\x01R`\x84\x01a\x02NV[a\x13\xF8\x82a\x07\xDFa\x1F@V[\x81\x14a\x14lW`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`(`$\x82\x01R\x7FMust provide exactly 1 difficult`D\x82\x01R\x7Fy period\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`d\x82\x01R`\x84\x01a\x02NV[a\x14u\x85a\x19\x89V[a\x14~\x87a\x19\x89V[\x14a\x14\xF1W`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`'`$\x82\x01R\x7FPeriod header difficulties do no`D\x82\x01R\x7Ft match\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`d\x82\x01R`\x84\x01a\x02NV[_a\x14\xFB\x85a\x16}V[\x90P_a\x15-a\x15\n\x89a\x16}V[a\x15\x13\x8Aa\x19\x9BV[c\xFF\xFF\xFF\xFF\x16a\x15\"\x8Aa\x19\x9BV[c\xFF\xFF\xFF\xFF\x16a\x19\xCEV[\x90P\x81\x81\x83\x16\x14a\x15\x80W`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`\x19`$\x82\x01R\x7FInvalid retarget provided\0\0\0\0\0\0\0`D\x82\x01R`d\x01a\x02NV[_a\x15\x8A\x89a\x19\x89V[\x90P\x80`\x06T\x14\x15\x80\x15a\x15\xB4WPa\x07\xE0a\x15\xA7`\x01Ta\x0B\xFFV[a\x15\xB1\x91\x90a\x1F\x11V[\x84\x11[\x15a\x15\xBFW`\x06\x81\x90U[a\x15\xCB\x88\x88`\x01a\x0C\xBCV[\x99\x98PPPPPPPPPV[_` \x84Qa\x15\xE7\x91\x90a\x1E\xA4V[\x15a\x15\xF3WP_a\x06\x88V[\x83Q_\x03a\x16\x02WP_a\x06\x88V[\x81\x85_[\x86Q\x81\x10\x15a\x16pWa\x16\x1A`\x02\x84a\x1E\xA4V[`\x01\x03a\x16>Wa\x167a\x161\x88\x83\x01` \x01Q\x90V[\x83a\x1A`V[\x91Pa\x16WV[a\x16T\x82a\x16O\x89\x84\x01` \x01Q\x90V[a\x1A`V[\x91P[`\x01\x92\x90\x92\x1C\x91a\x16i` \x82a\x1F@V[\x90Pa\x16\x06V[P\x90\x93\x14\x95\x94PPPPPV[_a\x04\xC9\x82_a\x16\xADV[_` _\x83\x85` \x01\x87\x01`\x02Z\xFAP` _` _`\x02Z\xFAPP_Q\x93\x92PPPV[_\x80a\x16\xC4a\x16\xBD\x84`Ha\x1F@V[\x85\x90a\x1AkV[`\xE8\x1C\x90P_\x84a\x16\xD6\x85`Ka\x1F@V[\x81Q\x81\x10a\x16\xE6Wa\x16\xE6a\x1FfV[\x01` \x01Q`\xF8\x1C\x90P_a\x17\x18\x83_`\x10\x82b\xFF\xFF\xFF\x16\x90\x1C\x82a\xFF\0\x16`\x10\x84b\xFF\xFF\xFF\x16\x90\x1B\x17\x17\x90P\x91\x90PV[b\xFF\xFF\xFF\x16\x90P_a\x17+`\x03\x84a\x1F\x93V[`\xFF\x16\x90Pa\x17<\x81a\x01\0a \x8FV[a\x07\xFA\x90\x83a \x9AV[_a\x04\xC6a\x17U\x83`\x04a\x1F@V[\x84\x01` \x01Q\x90V[_\x83\x85\x14\x80\x15a\x17mWP\x82\x85\x14[\x15a\x17zWP`\x01a\x06\x88V[\x83\x83\x81\x81_[\x86\x81\x10\x15a\x17\xC2W\x89\x83\x14a\x17\xA1W_\x83\x81R`\x03` R`@\x90 T\x92\x94P[\x89\x82\x14a\x17\xBAW_\x82\x81R`\x03` R`@\x90 T\x91\x93P[`\x01\x01a\x17\x80V[P\x82\x84\x03a\x17\xD6W_\x94PPPPPa\x06\x88V[\x80\x82\x14a\x17\xE9W_\x94PPPPPa\x06\x88V[P`\x01\x98\x97PPPPPPPPV[__a\x18\x03\x85a\x0B\xFFV[\x90P_a\x18\x12a\x13T\x86a\nUV[\x90P_a\x18!a\x13T\x86a\nUV[\x90P\x82\x82\x10\x15\x80\x15a\x183WP\x82\x81\x10\x15[a\x18\xA5W`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`0`$\x82\x01R\x7FA descendant height is below the`D\x82\x01R\x7F ancestor height\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`d\x82\x01R`\x84\x01a\x02NV[_a\x18\xB2a\x07\xE0\x85a\x1E\xA4V[a\x18\xBE\x85a\x07\xE0a\x1F@V[a\x18\xC8\x91\x90a\x1F\x11V[\x90P\x80\x83\x10\x81\x83\x10\x81\x15\x82a\x18\xDAWP\x80[\x15a\x18\xF5Wa\x18\xE8\x89a\nUV[\x96PPPPPPPa\t\xF3V[\x81\x80\x15a\x19\0WP\x80\x15[\x15a\x19\x0EWa\x18\xE8\x88a\nUV[\x81\x80\x15a\x19\x18WP\x80[\x15a\x19<W\x83\x85\x10\x15a\x193Wa\x19.\x88a\nUV[a\x18\xE8V[a\x18\xE8\x89a\nUV[a\x19E\x88a\x19\x89V[a\x19Qa\x07\xE0\x86a\x1E\xA4V[a\x19[\x91\x90a \x9AV[a\x19d\x8Aa\x19\x89V[a\x19pa\x07\xE0\x88a\x1E\xA4V[a\x19z\x91\x90a \x9AV[\x10\x15a\x193Wa\x18\xE8\x88a\nUV[_a\x04\xC9a\x19\x96\x83a\x16}V[a\x1AyV[_a\x04\xC9a\x19\xA8\x83a\x1A\xA0V[`\xD8\x81\x90\x1Cc\xFF\0\xFF\0\x16b\xFF\0\xFF`\xE8\x92\x90\x92\x1C\x91\x90\x91\x16\x17`\x10\x81\x81\x1B\x91\x90\x1C\x17\x90V[_\x80a\x19\xDA\x83\x85a\x1A\xACV[\x90Pa\x19\xEAb\x12u\0`\x04a\x1B\x07V[\x81\x10\x15a\x1A\x02Wa\x19\xFFb\x12u\0`\x04a\x1B\x07V[\x90P[a\x1A\x10b\x12u\0`\x04a\x1B\x12V[\x81\x11\x15a\x1A(Wa\x1A%b\x12u\0`\x04a\x1B\x12V[\x90P[_a\x1A@\x82a\x1A:\x88b\x01\0\0a\x1B\x07V[\x90a\x1B\x12V[\x90Pa\x1AVb\x01\0\0a\x1A:\x83b\x12u\0a\x1B\x07V[\x96\x95PPPPPPV[_a\x04\xC6\x83\x83a\x1B\x85V[_a\x04\xC6\x83\x83\x01` \x01Q\x90V[_a\x04\xC9{\xFF\xFF\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x83a\x1B\x07V[_a\x04\xC9\x82`Da\x1AkV[_\x82\x82\x11\x15a\x1A\xFDW`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`\x1D`$\x82\x01R\x7FUnderflow during subtraction.\0\0\0`D\x82\x01R`d\x01a\x02NV[a\x04\xC6\x82\x84a\x1F\x11V[_a\x04\xC6\x82\x84a\x1FSV[_\x82_\x03a\x1B!WP_a\x04\xC9V[a\x1B+\x82\x84a \x9AV[\x90P\x81a\x1B8\x84\x83a\x1FSV[\x14a\x04\xC9W`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`\x1F`$\x82\x01R\x7FOverflow during multiplication.\0`D\x82\x01R`d\x01a\x02NV[_\x82_R\x81` R` _`@_`\x02Z\xFAP` _` _`\x02Z\xFAPP_Q\x92\x91PPV[__\x83`\x1F\x84\x01\x12a\x1B\xBCW__\xFD[P\x815g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\x1B\xD3W__\xFD[` \x83\x01\x91P\x83` \x82\x85\x01\x01\x11\x15a\x1B\xEAW__\xFD[\x92P\x92\x90PV[_______`\xA0\x88\x8A\x03\x12\x15a\x1C\x07W__\xFD[\x875g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\x1C\x1DW__\xFD[a\x1C)\x8A\x82\x8B\x01a\x1B\xACV[\x90\x98P\x96PP` \x88\x015g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\x1CHW__\xFD[a\x1CT\x8A\x82\x8B\x01a\x1B\xACV[\x90\x96P\x94PP`@\x88\x015\x92P``\x88\x015\x91P`\x80\x88\x015`\xFF\x81\x16\x81\x14a\x1C{W__\xFD[\x80\x91PP\x92\x95\x98\x91\x94\x97P\x92\x95PV[__`@\x83\x85\x03\x12\x15a\x1C\x9CW__\xFD[PP\x805\x92` \x90\x91\x015\x91PV[_` \x82\x84\x03\x12\x15a\x1C\xBBW__\xFD[P5\x91\x90PV[____`@\x85\x87\x03\x12\x15a\x1C\xD5W__\xFD[\x845g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\x1C\xEBW__\xFD[a\x1C\xF7\x87\x82\x88\x01a\x1B\xACV[\x90\x95P\x93PP` \x85\x015g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\x1D\x16W__\xFD[a\x1D\"\x87\x82\x88\x01a\x1B\xACV[\x95\x98\x94\x97P\x95PPPPV[______`\x80\x87\x89\x03\x12\x15a\x1DCW__\xFD[\x865\x95P` \x87\x015g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\x1D`W__\xFD[a\x1Dl\x89\x82\x8A\x01a\x1B\xACV[\x90\x96P\x94PP`@\x87\x015g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\x1D\x8BW__\xFD[a\x1D\x97\x89\x82\x8A\x01a\x1B\xACV[\x97\x9A\x96\x99P\x94\x97\x94\x96\x95``\x90\x95\x015\x94\x93PPPPV[______``\x87\x89\x03\x12\x15a\x1D\xC4W__\xFD[\x865g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\x1D\xDAW__\xFD[a\x1D\xE6\x89\x82\x8A\x01a\x1B\xACV[\x90\x97P\x95PP` \x87\x015g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\x1E\x05W__\xFD[a\x1E\x11\x89\x82\x8A\x01a\x1B\xACV[\x90\x95P\x93PP`@\x87\x015g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\x1E0W__\xFD[a\x1E<\x89\x82\x8A\x01a\x1B\xACV[\x97\x9A\x96\x99P\x94\x97P\x92\x95\x93\x94\x92PPPV[___``\x84\x86\x03\x12\x15a\x1E`W__\xFD[PP\x815\x93` \x83\x015\x93P`@\x90\x92\x015\x91\x90PV[\x7FNH{q\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0_R`\x12`\x04R`$_\xFD[_\x82a\x1E\xB2Wa\x1E\xB2a\x1EwV[P\x06\x90V[_\x82Q\x80` \x85\x01\x84^_\x92\x01\x91\x82RP\x91\x90PV[_` \x82\x84\x03\x12\x15a\x1E\xDDW__\xFD[PQ\x91\x90PV[\x7FNH{q\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0_R`\x11`\x04R`$_\xFD[\x81\x81\x03\x81\x81\x11\x15a\x04\xC9Wa\x04\xC9a\x1E\xE4V[c\xFF\xFF\xFF\xFF\x81\x81\x16\x83\x82\x16\x01\x90\x81\x11\x15a\x04\xC9Wa\x04\xC9a\x1E\xE4V[\x80\x82\x01\x80\x82\x11\x15a\x04\xC9Wa\x04\xC9a\x1E\xE4V[_\x82a\x1FaWa\x1Faa\x1EwV[P\x04\x90V[\x7FNH{q\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0_R`2`\x04R`$_\xFD[`\xFF\x82\x81\x16\x82\x82\x16\x03\x90\x81\x11\x15a\x04\xC9Wa\x04\xC9a\x1E\xE4V[`\x01\x81[`\x01\x84\x11\x15a\x1F\xE7W\x80\x85\x04\x81\x11\x15a\x1F\xCBWa\x1F\xCBa\x1E\xE4V[`\x01\x84\x16\x15a\x1F\xD9W\x90\x81\x02\x90[`\x01\x93\x90\x93\x1C\x92\x80\x02a\x1F\xB0V[\x93P\x93\x91PPV[_\x82a\x1F\xFDWP`\x01a\x04\xC9V[\x81a \tWP_a\x04\xC9V[\x81`\x01\x81\x14a \x1FW`\x02\x81\x14a )Wa EV[`\x01\x91PPa\x04\xC9V[`\xFF\x84\x11\x15a :Wa :a\x1E\xE4V[PP`\x01\x82\x1Ba\x04\xC9V[P` \x83\x10a\x013\x83\x10\x16`N\x84\x10`\x0B\x84\x10\x16\x17\x15a hWP\x81\x81\na\x04\xC9V[a t_\x19\x84\x84a\x1F\xACV[\x80_\x19\x04\x82\x11\x15a \x87Wa \x87a\x1E\xE4V[\x02\x93\x92PPPV[_a\x04\xC6\x83\x83a\x1F\xEFV[\x80\x82\x02\x81\x15\x82\x82\x04\x84\x14\x17a\x04\xC9Wa\x04\xC9a\x1E\xE4V\xFE\xA2dipfsX\"\x12 @\xDF5\xF8\r\xCE$,\xBB\x92\x9Aj\xD8\xD6\x04\xF1\xF9\x8F\xF2Y9\xDF\x9D\xAA\xCD\x8C$\xAA\xB7\xF1RXdsolcC\0\x08\x1C\x003",
    );
    /**Event with signature `Extension(bytes32,bytes32)` and selector `0xf90e4f1d9cd0dd55e339411cbc9b152482307c3a23ed64715e4a2858f641a3f5`.
```solidity
event Extension(bytes32 indexed _first, bytes32 indexed _last);
```*/
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    #[derive(Clone)]
    pub struct Extension {
        #[allow(missing_docs)]
        pub _first: alloy::sol_types::private::FixedBytes<32>,
        #[allow(missing_docs)]
        pub _last: alloy::sol_types::private::FixedBytes<32>,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[automatically_derived]
        impl alloy_sol_types::SolEvent for Extension {
            type DataTuple<'a> = ();
            type DataToken<'a> = <Self::DataTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type TopicList = (
                alloy_sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::FixedBytes<32>,
            );
            const SIGNATURE: &'static str = "Extension(bytes32,bytes32)";
            const SIGNATURE_HASH: alloy_sol_types::private::B256 = alloy_sol_types::private::B256::new([
                249u8,
                14u8,
                79u8,
                29u8,
                156u8,
                208u8,
                221u8,
                85u8,
                227u8,
                57u8,
                65u8,
                28u8,
                188u8,
                155u8,
                21u8,
                36u8,
                130u8,
                48u8,
                124u8,
                58u8,
                35u8,
                237u8,
                100u8,
                113u8,
                94u8,
                74u8,
                40u8,
                88u8,
                246u8,
                65u8,
                163u8,
                245u8,
            ]);
            const ANONYMOUS: bool = false;
            #[allow(unused_variables)]
            #[inline]
            fn new(
                topics: <Self::TopicList as alloy_sol_types::SolType>::RustType,
                data: <Self::DataTuple<'_> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                Self {
                    _first: topics.1,
                    _last: topics.2,
                }
            }
            #[inline]
            fn check_signature(
                topics: &<Self::TopicList as alloy_sol_types::SolType>::RustType,
            ) -> alloy_sol_types::Result<()> {
                if topics.0 != Self::SIGNATURE_HASH {
                    return Err(
                        alloy_sol_types::Error::invalid_event_signature_hash(
                            Self::SIGNATURE,
                            topics.0,
                            Self::SIGNATURE_HASH,
                        ),
                    );
                }
                Ok(())
            }
            #[inline]
            fn tokenize_body(&self) -> Self::DataToken<'_> {
                ()
            }
            #[inline]
            fn topics(&self) -> <Self::TopicList as alloy_sol_types::SolType>::RustType {
                (Self::SIGNATURE_HASH.into(), self._first.clone(), self._last.clone())
            }
            #[inline]
            fn encode_topics_raw(
                &self,
                out: &mut [alloy_sol_types::abi::token::WordToken],
            ) -> alloy_sol_types::Result<()> {
                if out.len() < <Self::TopicList as alloy_sol_types::TopicList>::COUNT {
                    return Err(alloy_sol_types::Error::Overrun);
                }
                out[0usize] = alloy_sol_types::abi::token::WordToken(
                    Self::SIGNATURE_HASH,
                );
                out[1usize] = <alloy::sol_types::sol_data::FixedBytes<
                    32,
                > as alloy_sol_types::EventTopic>::encode_topic(&self._first);
                out[2usize] = <alloy::sol_types::sol_data::FixedBytes<
                    32,
                > as alloy_sol_types::EventTopic>::encode_topic(&self._last);
                Ok(())
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::private::IntoLogData for Extension {
            fn to_log_data(&self) -> alloy_sol_types::private::LogData {
                From::from(self)
            }
            fn into_log_data(self) -> alloy_sol_types::private::LogData {
                From::from(&self)
            }
        }
        #[automatically_derived]
        impl From<&Extension> for alloy_sol_types::private::LogData {
            #[inline]
            fn from(this: &Extension) -> alloy_sol_types::private::LogData {
                alloy_sol_types::SolEvent::encode_log_data(this)
            }
        }
    };
    /**Event with signature `NewTip(bytes32,bytes32,bytes32)` and selector `0x3cc13de64df0f0239626235c51a2da251bbc8c85664ecce39263da3ee03f606c`.
```solidity
event NewTip(bytes32 indexed _from, bytes32 indexed _to, bytes32 indexed _gcd);
```*/
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    #[derive(Clone)]
    pub struct NewTip {
        #[allow(missing_docs)]
        pub _from: alloy::sol_types::private::FixedBytes<32>,
        #[allow(missing_docs)]
        pub _to: alloy::sol_types::private::FixedBytes<32>,
        #[allow(missing_docs)]
        pub _gcd: alloy::sol_types::private::FixedBytes<32>,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[automatically_derived]
        impl alloy_sol_types::SolEvent for NewTip {
            type DataTuple<'a> = ();
            type DataToken<'a> = <Self::DataTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type TopicList = (
                alloy_sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::FixedBytes<32>,
            );
            const SIGNATURE: &'static str = "NewTip(bytes32,bytes32,bytes32)";
            const SIGNATURE_HASH: alloy_sol_types::private::B256 = alloy_sol_types::private::B256::new([
                60u8,
                193u8,
                61u8,
                230u8,
                77u8,
                240u8,
                240u8,
                35u8,
                150u8,
                38u8,
                35u8,
                92u8,
                81u8,
                162u8,
                218u8,
                37u8,
                27u8,
                188u8,
                140u8,
                133u8,
                102u8,
                78u8,
                204u8,
                227u8,
                146u8,
                99u8,
                218u8,
                62u8,
                224u8,
                63u8,
                96u8,
                108u8,
            ]);
            const ANONYMOUS: bool = false;
            #[allow(unused_variables)]
            #[inline]
            fn new(
                topics: <Self::TopicList as alloy_sol_types::SolType>::RustType,
                data: <Self::DataTuple<'_> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                Self {
                    _from: topics.1,
                    _to: topics.2,
                    _gcd: topics.3,
                }
            }
            #[inline]
            fn check_signature(
                topics: &<Self::TopicList as alloy_sol_types::SolType>::RustType,
            ) -> alloy_sol_types::Result<()> {
                if topics.0 != Self::SIGNATURE_HASH {
                    return Err(
                        alloy_sol_types::Error::invalid_event_signature_hash(
                            Self::SIGNATURE,
                            topics.0,
                            Self::SIGNATURE_HASH,
                        ),
                    );
                }
                Ok(())
            }
            #[inline]
            fn tokenize_body(&self) -> Self::DataToken<'_> {
                ()
            }
            #[inline]
            fn topics(&self) -> <Self::TopicList as alloy_sol_types::SolType>::RustType {
                (
                    Self::SIGNATURE_HASH.into(),
                    self._from.clone(),
                    self._to.clone(),
                    self._gcd.clone(),
                )
            }
            #[inline]
            fn encode_topics_raw(
                &self,
                out: &mut [alloy_sol_types::abi::token::WordToken],
            ) -> alloy_sol_types::Result<()> {
                if out.len() < <Self::TopicList as alloy_sol_types::TopicList>::COUNT {
                    return Err(alloy_sol_types::Error::Overrun);
                }
                out[0usize] = alloy_sol_types::abi::token::WordToken(
                    Self::SIGNATURE_HASH,
                );
                out[1usize] = <alloy::sol_types::sol_data::FixedBytes<
                    32,
                > as alloy_sol_types::EventTopic>::encode_topic(&self._from);
                out[2usize] = <alloy::sol_types::sol_data::FixedBytes<
                    32,
                > as alloy_sol_types::EventTopic>::encode_topic(&self._to);
                out[3usize] = <alloy::sol_types::sol_data::FixedBytes<
                    32,
                > as alloy_sol_types::EventTopic>::encode_topic(&self._gcd);
                Ok(())
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::private::IntoLogData for NewTip {
            fn to_log_data(&self) -> alloy_sol_types::private::LogData {
                From::from(self)
            }
            fn into_log_data(self) -> alloy_sol_types::private::LogData {
                From::from(&self)
            }
        }
        #[automatically_derived]
        impl From<&NewTip> for alloy_sol_types::private::LogData {
            #[inline]
            fn from(this: &NewTip) -> alloy_sol_types::private::LogData {
                alloy_sol_types::SolEvent::encode_log_data(this)
            }
        }
    };
    /**Constructor`.
```solidity
constructor(bytes _genesisHeader, uint256 _height, bytes32 _periodStart);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct constructorCall {
        #[allow(missing_docs)]
        pub _genesisHeader: alloy::sol_types::private::Bytes,
        #[allow(missing_docs)]
        pub _height: alloy::sol_types::private::primitives::aliases::U256,
        #[allow(missing_docs)]
        pub _periodStart: alloy::sol_types::private::FixedBytes<32>,
    }
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::Bytes,
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::FixedBytes<32>,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::Bytes,
                alloy::sol_types::private::primitives::aliases::U256,
                alloy::sol_types::private::FixedBytes<32>,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<constructorCall> for UnderlyingRustTuple<'_> {
                fn from(value: constructorCall) -> Self {
                    (value._genesisHeader, value._height, value._periodStart)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for constructorCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        _genesisHeader: tuple.0,
                        _height: tuple.1,
                        _periodStart: tuple.2,
                    }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolConstructor for constructorCall {
            type Parameters<'a> = (
                alloy::sol_types::sol_data::Bytes,
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::FixedBytes<32>,
            );
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Bytes as alloy_sol_types::SolType>::tokenize(
                        &self._genesisHeader,
                    ),
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self._height),
                    <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::SolType>::tokenize(&self._periodStart),
                )
            }
        }
    };
    /**Function with signature `HEIGHT_INTERVAL()` and selector `0x70d53c18`.
```solidity
function HEIGHT_INTERVAL() external view returns (uint32);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct HEIGHT_INTERVALCall {}
    ///Container type for the return parameters of the [`HEIGHT_INTERVAL()`](HEIGHT_INTERVALCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct HEIGHT_INTERVALReturn {
        #[allow(missing_docs)]
        pub _0: u32,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<HEIGHT_INTERVALCall> for UnderlyingRustTuple<'_> {
                fn from(value: HEIGHT_INTERVALCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for HEIGHT_INTERVALCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<32>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (u32,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<HEIGHT_INTERVALReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: HEIGHT_INTERVALReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for HEIGHT_INTERVALReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for HEIGHT_INTERVALCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = HEIGHT_INTERVALReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Uint<32>,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "HEIGHT_INTERVAL()";
            const SELECTOR: [u8; 4] = [112u8, 213u8, 60u8, 24u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `addHeaders(bytes,bytes)` and selector `0x65da41b9`.
```solidity
function addHeaders(bytes memory _anchor, bytes memory _headers) external returns (bool);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct addHeadersCall {
        #[allow(missing_docs)]
        pub _anchor: alloy::sol_types::private::Bytes,
        #[allow(missing_docs)]
        pub _headers: alloy::sol_types::private::Bytes,
    }
    ///Container type for the return parameters of the [`addHeaders(bytes,bytes)`](addHeadersCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct addHeadersReturn {
        #[allow(missing_docs)]
        pub _0: bool,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::Bytes,
                alloy::sol_types::sol_data::Bytes,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::Bytes,
                alloy::sol_types::private::Bytes,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<addHeadersCall> for UnderlyingRustTuple<'_> {
                fn from(value: addHeadersCall) -> Self {
                    (value._anchor, value._headers)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for addHeadersCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        _anchor: tuple.0,
                        _headers: tuple.1,
                    }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Bool,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (bool,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<addHeadersReturn> for UnderlyingRustTuple<'_> {
                fn from(value: addHeadersReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for addHeadersReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for addHeadersCall {
            type Parameters<'a> = (
                alloy::sol_types::sol_data::Bytes,
                alloy::sol_types::sol_data::Bytes,
            );
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = addHeadersReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Bool,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "addHeaders(bytes,bytes)";
            const SELECTOR: [u8; 4] = [101u8, 218u8, 65u8, 185u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Bytes as alloy_sol_types::SolType>::tokenize(
                        &self._anchor,
                    ),
                    <alloy::sol_types::sol_data::Bytes as alloy_sol_types::SolType>::tokenize(
                        &self._headers,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `addHeadersWithRetarget(bytes,bytes,bytes)` and selector `0x7fa637fc`.
```solidity
function addHeadersWithRetarget(bytes memory _oldPeriodStartHeader, bytes memory _oldPeriodEndHeader, bytes memory _headers) external returns (bool);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct addHeadersWithRetargetCall {
        #[allow(missing_docs)]
        pub _oldPeriodStartHeader: alloy::sol_types::private::Bytes,
        #[allow(missing_docs)]
        pub _oldPeriodEndHeader: alloy::sol_types::private::Bytes,
        #[allow(missing_docs)]
        pub _headers: alloy::sol_types::private::Bytes,
    }
    ///Container type for the return parameters of the [`addHeadersWithRetarget(bytes,bytes,bytes)`](addHeadersWithRetargetCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct addHeadersWithRetargetReturn {
        #[allow(missing_docs)]
        pub _0: bool,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::Bytes,
                alloy::sol_types::sol_data::Bytes,
                alloy::sol_types::sol_data::Bytes,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::Bytes,
                alloy::sol_types::private::Bytes,
                alloy::sol_types::private::Bytes,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<addHeadersWithRetargetCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: addHeadersWithRetargetCall) -> Self {
                    (
                        value._oldPeriodStartHeader,
                        value._oldPeriodEndHeader,
                        value._headers,
                    )
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for addHeadersWithRetargetCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        _oldPeriodStartHeader: tuple.0,
                        _oldPeriodEndHeader: tuple.1,
                        _headers: tuple.2,
                    }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Bool,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (bool,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<addHeadersWithRetargetReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: addHeadersWithRetargetReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for addHeadersWithRetargetReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for addHeadersWithRetargetCall {
            type Parameters<'a> = (
                alloy::sol_types::sol_data::Bytes,
                alloy::sol_types::sol_data::Bytes,
                alloy::sol_types::sol_data::Bytes,
            );
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = addHeadersWithRetargetReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Bool,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "addHeadersWithRetarget(bytes,bytes,bytes)";
            const SELECTOR: [u8; 4] = [127u8, 166u8, 55u8, 252u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Bytes as alloy_sol_types::SolType>::tokenize(
                        &self._oldPeriodStartHeader,
                    ),
                    <alloy::sol_types::sol_data::Bytes as alloy_sol_types::SolType>::tokenize(
                        &self._oldPeriodEndHeader,
                    ),
                    <alloy::sol_types::sol_data::Bytes as alloy_sol_types::SolType>::tokenize(
                        &self._headers,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `findAncestor(bytes32,uint256)` and selector `0x30017b3b`.
```solidity
function findAncestor(bytes32 _digest, uint256 _offset) external view returns (bytes32);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct findAncestorCall {
        #[allow(missing_docs)]
        pub _digest: alloy::sol_types::private::FixedBytes<32>,
        #[allow(missing_docs)]
        pub _offset: alloy::sol_types::private::primitives::aliases::U256,
    }
    ///Container type for the return parameters of the [`findAncestor(bytes32,uint256)`](findAncestorCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct findAncestorReturn {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::FixedBytes<32>,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::Uint<256>,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::FixedBytes<32>,
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<findAncestorCall> for UnderlyingRustTuple<'_> {
                fn from(value: findAncestorCall) -> Self {
                    (value._digest, value._offset)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for findAncestorCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        _digest: tuple.0,
                        _offset: tuple.1,
                    }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::FixedBytes<32>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::FixedBytes<32>,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<findAncestorReturn> for UnderlyingRustTuple<'_> {
                fn from(value: findAncestorReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for findAncestorReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for findAncestorCall {
            type Parameters<'a> = (
                alloy::sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::Uint<256>,
            );
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = findAncestorReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::FixedBytes<32>,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "findAncestor(bytes32,uint256)";
            const SELECTOR: [u8; 4] = [48u8, 1u8, 123u8, 59u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::SolType>::tokenize(&self._digest),
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self._offset),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `findHeight(bytes32)` and selector `0x60b5c390`.
```solidity
function findHeight(bytes32 _digest) external view returns (uint256);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct findHeightCall {
        #[allow(missing_docs)]
        pub _digest: alloy::sol_types::private::FixedBytes<32>,
    }
    ///Container type for the return parameters of the [`findHeight(bytes32)`](findHeightCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct findHeightReturn {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::FixedBytes<32>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::FixedBytes<32>,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<findHeightCall> for UnderlyingRustTuple<'_> {
                fn from(value: findHeightCall) -> Self {
                    (value._digest,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for findHeightCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _digest: tuple.0 }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<findHeightReturn> for UnderlyingRustTuple<'_> {
                fn from(value: findHeightReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for findHeightReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for findHeightCall {
            type Parameters<'a> = (alloy::sol_types::sol_data::FixedBytes<32>,);
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = findHeightReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "findHeight(bytes32)";
            const SELECTOR: [u8; 4] = [96u8, 181u8, 195u8, 144u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::SolType>::tokenize(&self._digest),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `getBestKnownDigest()` and selector `0x1910d973`.
```solidity
function getBestKnownDigest() external view returns (bytes32);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct getBestKnownDigestCall {}
    ///Container type for the return parameters of the [`getBestKnownDigest()`](getBestKnownDigestCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct getBestKnownDigestReturn {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::FixedBytes<32>,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<getBestKnownDigestCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: getBestKnownDigestCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for getBestKnownDigestCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::FixedBytes<32>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::FixedBytes<32>,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<getBestKnownDigestReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: getBestKnownDigestReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for getBestKnownDigestReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for getBestKnownDigestCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = getBestKnownDigestReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::FixedBytes<32>,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "getBestKnownDigest()";
            const SELECTOR: [u8; 4] = [25u8, 16u8, 217u8, 115u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `getCurrentEpochDifficulty()` and selector `0x113764be`.
```solidity
function getCurrentEpochDifficulty() external view returns (uint256);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct getCurrentEpochDifficultyCall {}
    ///Container type for the return parameters of the [`getCurrentEpochDifficulty()`](getCurrentEpochDifficultyCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct getCurrentEpochDifficultyReturn {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<getCurrentEpochDifficultyCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: getCurrentEpochDifficultyCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for getCurrentEpochDifficultyCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<getCurrentEpochDifficultyReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: getCurrentEpochDifficultyReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for getCurrentEpochDifficultyReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for getCurrentEpochDifficultyCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = getCurrentEpochDifficultyReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "getCurrentEpochDifficulty()";
            const SELECTOR: [u8; 4] = [17u8, 55u8, 100u8, 190u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `getLastReorgCommonAncestor()` and selector `0xc58242cd`.
```solidity
function getLastReorgCommonAncestor() external view returns (bytes32);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct getLastReorgCommonAncestorCall {}
    ///Container type for the return parameters of the [`getLastReorgCommonAncestor()`](getLastReorgCommonAncestorCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct getLastReorgCommonAncestorReturn {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::FixedBytes<32>,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<getLastReorgCommonAncestorCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: getLastReorgCommonAncestorCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for getLastReorgCommonAncestorCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::FixedBytes<32>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::FixedBytes<32>,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<getLastReorgCommonAncestorReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: getLastReorgCommonAncestorReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for getLastReorgCommonAncestorReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for getLastReorgCommonAncestorCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = getLastReorgCommonAncestorReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::FixedBytes<32>,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "getLastReorgCommonAncestor()";
            const SELECTOR: [u8; 4] = [197u8, 130u8, 66u8, 205u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `getPrevEpochDifficulty()` and selector `0x2b97be24`.
```solidity
function getPrevEpochDifficulty() external view returns (uint256);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct getPrevEpochDifficultyCall {}
    ///Container type for the return parameters of the [`getPrevEpochDifficulty()`](getPrevEpochDifficultyCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct getPrevEpochDifficultyReturn {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<getPrevEpochDifficultyCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: getPrevEpochDifficultyCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for getPrevEpochDifficultyCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<getPrevEpochDifficultyReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: getPrevEpochDifficultyReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for getPrevEpochDifficultyReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for getPrevEpochDifficultyCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = getPrevEpochDifficultyReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "getPrevEpochDifficulty()";
            const SELECTOR: [u8; 4] = [43u8, 151u8, 190u8, 36u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `getRelayGenesis()` and selector `0xe3d8d8d8`.
```solidity
function getRelayGenesis() external view returns (bytes32);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct getRelayGenesisCall {}
    ///Container type for the return parameters of the [`getRelayGenesis()`](getRelayGenesisCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct getRelayGenesisReturn {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::FixedBytes<32>,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<getRelayGenesisCall> for UnderlyingRustTuple<'_> {
                fn from(value: getRelayGenesisCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for getRelayGenesisCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::FixedBytes<32>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::FixedBytes<32>,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<getRelayGenesisReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: getRelayGenesisReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for getRelayGenesisReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for getRelayGenesisCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = getRelayGenesisReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::FixedBytes<32>,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "getRelayGenesis()";
            const SELECTOR: [u8; 4] = [227u8, 216u8, 216u8, 216u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `isAncestor(bytes32,bytes32,uint256)` and selector `0xb985621a`.
```solidity
function isAncestor(bytes32 _ancestor, bytes32 _descendant, uint256 _limit) external view returns (bool);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct isAncestorCall {
        #[allow(missing_docs)]
        pub _ancestor: alloy::sol_types::private::FixedBytes<32>,
        #[allow(missing_docs)]
        pub _descendant: alloy::sol_types::private::FixedBytes<32>,
        #[allow(missing_docs)]
        pub _limit: alloy::sol_types::private::primitives::aliases::U256,
    }
    ///Container type for the return parameters of the [`isAncestor(bytes32,bytes32,uint256)`](isAncestorCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct isAncestorReturn {
        #[allow(missing_docs)]
        pub _0: bool,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::Uint<256>,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::FixedBytes<32>,
                alloy::sol_types::private::FixedBytes<32>,
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<isAncestorCall> for UnderlyingRustTuple<'_> {
                fn from(value: isAncestorCall) -> Self {
                    (value._ancestor, value._descendant, value._limit)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for isAncestorCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        _ancestor: tuple.0,
                        _descendant: tuple.1,
                        _limit: tuple.2,
                    }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Bool,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (bool,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<isAncestorReturn> for UnderlyingRustTuple<'_> {
                fn from(value: isAncestorReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for isAncestorReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for isAncestorCall {
            type Parameters<'a> = (
                alloy::sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::Uint<256>,
            );
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = isAncestorReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Bool,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "isAncestor(bytes32,bytes32,uint256)";
            const SELECTOR: [u8; 4] = [185u8, 133u8, 98u8, 26u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::SolType>::tokenize(&self._ancestor),
                    <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::SolType>::tokenize(&self._descendant),
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self._limit),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `markNewHeaviest(bytes32,bytes,bytes,uint256)` and selector `0x74c3a3a9`.
```solidity
function markNewHeaviest(bytes32 _ancestor, bytes memory _currentBest, bytes memory _newBest, uint256 _limit) external returns (bool);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct markNewHeaviestCall {
        #[allow(missing_docs)]
        pub _ancestor: alloy::sol_types::private::FixedBytes<32>,
        #[allow(missing_docs)]
        pub _currentBest: alloy::sol_types::private::Bytes,
        #[allow(missing_docs)]
        pub _newBest: alloy::sol_types::private::Bytes,
        #[allow(missing_docs)]
        pub _limit: alloy::sol_types::private::primitives::aliases::U256,
    }
    ///Container type for the return parameters of the [`markNewHeaviest(bytes32,bytes,bytes,uint256)`](markNewHeaviestCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct markNewHeaviestReturn {
        #[allow(missing_docs)]
        pub _0: bool,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::Bytes,
                alloy::sol_types::sol_data::Bytes,
                alloy::sol_types::sol_data::Uint<256>,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::FixedBytes<32>,
                alloy::sol_types::private::Bytes,
                alloy::sol_types::private::Bytes,
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<markNewHeaviestCall> for UnderlyingRustTuple<'_> {
                fn from(value: markNewHeaviestCall) -> Self {
                    (value._ancestor, value._currentBest, value._newBest, value._limit)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for markNewHeaviestCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        _ancestor: tuple.0,
                        _currentBest: tuple.1,
                        _newBest: tuple.2,
                        _limit: tuple.3,
                    }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Bool,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (bool,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<markNewHeaviestReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: markNewHeaviestReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for markNewHeaviestReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for markNewHeaviestCall {
            type Parameters<'a> = (
                alloy::sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::Bytes,
                alloy::sol_types::sol_data::Bytes,
                alloy::sol_types::sol_data::Uint<256>,
            );
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = markNewHeaviestReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Bool,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "markNewHeaviest(bytes32,bytes,bytes,uint256)";
            const SELECTOR: [u8; 4] = [116u8, 195u8, 163u8, 169u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::SolType>::tokenize(&self._ancestor),
                    <alloy::sol_types::sol_data::Bytes as alloy_sol_types::SolType>::tokenize(
                        &self._currentBest,
                    ),
                    <alloy::sol_types::sol_data::Bytes as alloy_sol_types::SolType>::tokenize(
                        &self._newBest,
                    ),
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self._limit),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `verifyProof(bytes,bytes,bytes32,uint256,uint8)` and selector `0x05d09a70`.
```solidity
function verifyProof(bytes memory _header, bytes memory _proof, bytes32 _txId, uint256 _index, uint8 _numConfs) external view;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct verifyProofCall {
        #[allow(missing_docs)]
        pub _header: alloy::sol_types::private::Bytes,
        #[allow(missing_docs)]
        pub _proof: alloy::sol_types::private::Bytes,
        #[allow(missing_docs)]
        pub _txId: alloy::sol_types::private::FixedBytes<32>,
        #[allow(missing_docs)]
        pub _index: alloy::sol_types::private::primitives::aliases::U256,
        #[allow(missing_docs)]
        pub _numConfs: u8,
    }
    ///Container type for the return parameters of the [`verifyProof(bytes,bytes,bytes32,uint256,uint8)`](verifyProofCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct verifyProofReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::Bytes,
                alloy::sol_types::sol_data::Bytes,
                alloy::sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Uint<8>,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::Bytes,
                alloy::sol_types::private::Bytes,
                alloy::sol_types::private::FixedBytes<32>,
                alloy::sol_types::private::primitives::aliases::U256,
                u8,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<verifyProofCall> for UnderlyingRustTuple<'_> {
                fn from(value: verifyProofCall) -> Self {
                    (
                        value._header,
                        value._proof,
                        value._txId,
                        value._index,
                        value._numConfs,
                    )
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for verifyProofCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        _header: tuple.0,
                        _proof: tuple.1,
                        _txId: tuple.2,
                        _index: tuple.3,
                        _numConfs: tuple.4,
                    }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<verifyProofReturn> for UnderlyingRustTuple<'_> {
                fn from(value: verifyProofReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for verifyProofReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for verifyProofCall {
            type Parameters<'a> = (
                alloy::sol_types::sol_data::Bytes,
                alloy::sol_types::sol_data::Bytes,
                alloy::sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Uint<8>,
            );
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = verifyProofReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "verifyProof(bytes,bytes,bytes32,uint256,uint8)";
            const SELECTOR: [u8; 4] = [5u8, 208u8, 154u8, 112u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Bytes as alloy_sol_types::SolType>::tokenize(
                        &self._header,
                    ),
                    <alloy::sol_types::sol_data::Bytes as alloy_sol_types::SolType>::tokenize(
                        &self._proof,
                    ),
                    <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::SolType>::tokenize(&self._txId),
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self._index),
                    <alloy::sol_types::sol_data::Uint<
                        8,
                    > as alloy_sol_types::SolType>::tokenize(&self._numConfs),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    ///Container for all the [`FullRelayWithVerify`](self) function calls.
    pub enum FullRelayWithVerifyCalls {
        #[allow(missing_docs)]
        HEIGHT_INTERVAL(HEIGHT_INTERVALCall),
        #[allow(missing_docs)]
        addHeaders(addHeadersCall),
        #[allow(missing_docs)]
        addHeadersWithRetarget(addHeadersWithRetargetCall),
        #[allow(missing_docs)]
        findAncestor(findAncestorCall),
        #[allow(missing_docs)]
        findHeight(findHeightCall),
        #[allow(missing_docs)]
        getBestKnownDigest(getBestKnownDigestCall),
        #[allow(missing_docs)]
        getCurrentEpochDifficulty(getCurrentEpochDifficultyCall),
        #[allow(missing_docs)]
        getLastReorgCommonAncestor(getLastReorgCommonAncestorCall),
        #[allow(missing_docs)]
        getPrevEpochDifficulty(getPrevEpochDifficultyCall),
        #[allow(missing_docs)]
        getRelayGenesis(getRelayGenesisCall),
        #[allow(missing_docs)]
        isAncestor(isAncestorCall),
        #[allow(missing_docs)]
        markNewHeaviest(markNewHeaviestCall),
        #[allow(missing_docs)]
        verifyProof(verifyProofCall),
    }
    #[automatically_derived]
    impl FullRelayWithVerifyCalls {
        /// All the selectors of this enum.
        ///
        /// Note that the selectors might not be in the same order as the variants.
        /// No guarantees are made about the order of the selectors.
        ///
        /// Prefer using `SolInterface` methods instead.
        pub const SELECTORS: &'static [[u8; 4usize]] = &[
            [5u8, 208u8, 154u8, 112u8],
            [17u8, 55u8, 100u8, 190u8],
            [25u8, 16u8, 217u8, 115u8],
            [43u8, 151u8, 190u8, 36u8],
            [48u8, 1u8, 123u8, 59u8],
            [96u8, 181u8, 195u8, 144u8],
            [101u8, 218u8, 65u8, 185u8],
            [112u8, 213u8, 60u8, 24u8],
            [116u8, 195u8, 163u8, 169u8],
            [127u8, 166u8, 55u8, 252u8],
            [185u8, 133u8, 98u8, 26u8],
            [197u8, 130u8, 66u8, 205u8],
            [227u8, 216u8, 216u8, 216u8],
        ];
    }
    #[automatically_derived]
    impl alloy_sol_types::SolInterface for FullRelayWithVerifyCalls {
        const NAME: &'static str = "FullRelayWithVerifyCalls";
        const MIN_DATA_LENGTH: usize = 0usize;
        const COUNT: usize = 13usize;
        #[inline]
        fn selector(&self) -> [u8; 4] {
            match self {
                Self::HEIGHT_INTERVAL(_) => {
                    <HEIGHT_INTERVALCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::addHeaders(_) => {
                    <addHeadersCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::addHeadersWithRetarget(_) => {
                    <addHeadersWithRetargetCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::findAncestor(_) => {
                    <findAncestorCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::findHeight(_) => {
                    <findHeightCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::getBestKnownDigest(_) => {
                    <getBestKnownDigestCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::getCurrentEpochDifficulty(_) => {
                    <getCurrentEpochDifficultyCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::getLastReorgCommonAncestor(_) => {
                    <getLastReorgCommonAncestorCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::getPrevEpochDifficulty(_) => {
                    <getPrevEpochDifficultyCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::getRelayGenesis(_) => {
                    <getRelayGenesisCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::isAncestor(_) => {
                    <isAncestorCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::markNewHeaviest(_) => {
                    <markNewHeaviestCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::verifyProof(_) => {
                    <verifyProofCall as alloy_sol_types::SolCall>::SELECTOR
                }
            }
        }
        #[inline]
        fn selector_at(i: usize) -> ::core::option::Option<[u8; 4]> {
            Self::SELECTORS.get(i).copied()
        }
        #[inline]
        fn valid_selector(selector: [u8; 4]) -> bool {
            Self::SELECTORS.binary_search(&selector).is_ok()
        }
        #[inline]
        #[allow(non_snake_case)]
        fn abi_decode_raw(
            selector: [u8; 4],
            data: &[u8],
            validate: bool,
        ) -> alloy_sol_types::Result<Self> {
            static DECODE_SHIMS: &[fn(
                &[u8],
                bool,
            ) -> alloy_sol_types::Result<FullRelayWithVerifyCalls>] = &[
                {
                    fn verifyProof(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<FullRelayWithVerifyCalls> {
                        <verifyProofCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(FullRelayWithVerifyCalls::verifyProof)
                    }
                    verifyProof
                },
                {
                    fn getCurrentEpochDifficulty(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<FullRelayWithVerifyCalls> {
                        <getCurrentEpochDifficultyCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(FullRelayWithVerifyCalls::getCurrentEpochDifficulty)
                    }
                    getCurrentEpochDifficulty
                },
                {
                    fn getBestKnownDigest(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<FullRelayWithVerifyCalls> {
                        <getBestKnownDigestCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(FullRelayWithVerifyCalls::getBestKnownDigest)
                    }
                    getBestKnownDigest
                },
                {
                    fn getPrevEpochDifficulty(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<FullRelayWithVerifyCalls> {
                        <getPrevEpochDifficultyCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(FullRelayWithVerifyCalls::getPrevEpochDifficulty)
                    }
                    getPrevEpochDifficulty
                },
                {
                    fn findAncestor(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<FullRelayWithVerifyCalls> {
                        <findAncestorCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(FullRelayWithVerifyCalls::findAncestor)
                    }
                    findAncestor
                },
                {
                    fn findHeight(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<FullRelayWithVerifyCalls> {
                        <findHeightCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(FullRelayWithVerifyCalls::findHeight)
                    }
                    findHeight
                },
                {
                    fn addHeaders(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<FullRelayWithVerifyCalls> {
                        <addHeadersCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(FullRelayWithVerifyCalls::addHeaders)
                    }
                    addHeaders
                },
                {
                    fn HEIGHT_INTERVAL(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<FullRelayWithVerifyCalls> {
                        <HEIGHT_INTERVALCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(FullRelayWithVerifyCalls::HEIGHT_INTERVAL)
                    }
                    HEIGHT_INTERVAL
                },
                {
                    fn markNewHeaviest(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<FullRelayWithVerifyCalls> {
                        <markNewHeaviestCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(FullRelayWithVerifyCalls::markNewHeaviest)
                    }
                    markNewHeaviest
                },
                {
                    fn addHeadersWithRetarget(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<FullRelayWithVerifyCalls> {
                        <addHeadersWithRetargetCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(FullRelayWithVerifyCalls::addHeadersWithRetarget)
                    }
                    addHeadersWithRetarget
                },
                {
                    fn isAncestor(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<FullRelayWithVerifyCalls> {
                        <isAncestorCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(FullRelayWithVerifyCalls::isAncestor)
                    }
                    isAncestor
                },
                {
                    fn getLastReorgCommonAncestor(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<FullRelayWithVerifyCalls> {
                        <getLastReorgCommonAncestorCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(FullRelayWithVerifyCalls::getLastReorgCommonAncestor)
                    }
                    getLastReorgCommonAncestor
                },
                {
                    fn getRelayGenesis(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<FullRelayWithVerifyCalls> {
                        <getRelayGenesisCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(FullRelayWithVerifyCalls::getRelayGenesis)
                    }
                    getRelayGenesis
                },
            ];
            let Ok(idx) = Self::SELECTORS.binary_search(&selector) else {
                return Err(
                    alloy_sol_types::Error::unknown_selector(
                        <Self as alloy_sol_types::SolInterface>::NAME,
                        selector,
                    ),
                );
            };
            DECODE_SHIMS[idx](data, validate)
        }
        #[inline]
        fn abi_encoded_size(&self) -> usize {
            match self {
                Self::HEIGHT_INTERVAL(inner) => {
                    <HEIGHT_INTERVALCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::addHeaders(inner) => {
                    <addHeadersCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
                Self::addHeadersWithRetarget(inner) => {
                    <addHeadersWithRetargetCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::findAncestor(inner) => {
                    <findAncestorCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::findHeight(inner) => {
                    <findHeightCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
                Self::getBestKnownDigest(inner) => {
                    <getBestKnownDigestCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::getCurrentEpochDifficulty(inner) => {
                    <getCurrentEpochDifficultyCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::getLastReorgCommonAncestor(inner) => {
                    <getLastReorgCommonAncestorCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::getPrevEpochDifficulty(inner) => {
                    <getPrevEpochDifficultyCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::getRelayGenesis(inner) => {
                    <getRelayGenesisCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::isAncestor(inner) => {
                    <isAncestorCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
                Self::markNewHeaviest(inner) => {
                    <markNewHeaviestCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::verifyProof(inner) => {
                    <verifyProofCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
            }
        }
        #[inline]
        fn abi_encode_raw(&self, out: &mut alloy_sol_types::private::Vec<u8>) {
            match self {
                Self::HEIGHT_INTERVAL(inner) => {
                    <HEIGHT_INTERVALCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::addHeaders(inner) => {
                    <addHeadersCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::addHeadersWithRetarget(inner) => {
                    <addHeadersWithRetargetCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::findAncestor(inner) => {
                    <findAncestorCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::findHeight(inner) => {
                    <findHeightCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::getBestKnownDigest(inner) => {
                    <getBestKnownDigestCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::getCurrentEpochDifficulty(inner) => {
                    <getCurrentEpochDifficultyCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::getLastReorgCommonAncestor(inner) => {
                    <getLastReorgCommonAncestorCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::getPrevEpochDifficulty(inner) => {
                    <getPrevEpochDifficultyCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::getRelayGenesis(inner) => {
                    <getRelayGenesisCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::isAncestor(inner) => {
                    <isAncestorCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::markNewHeaviest(inner) => {
                    <markNewHeaviestCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::verifyProof(inner) => {
                    <verifyProofCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
            }
        }
    }
    ///Container for all the [`FullRelayWithVerify`](self) events.
    pub enum FullRelayWithVerifyEvents {
        #[allow(missing_docs)]
        Extension(Extension),
        #[allow(missing_docs)]
        NewTip(NewTip),
    }
    #[automatically_derived]
    impl FullRelayWithVerifyEvents {
        /// All the selectors of this enum.
        ///
        /// Note that the selectors might not be in the same order as the variants.
        /// No guarantees are made about the order of the selectors.
        ///
        /// Prefer using `SolInterface` methods instead.
        pub const SELECTORS: &'static [[u8; 32usize]] = &[
            [
                60u8,
                193u8,
                61u8,
                230u8,
                77u8,
                240u8,
                240u8,
                35u8,
                150u8,
                38u8,
                35u8,
                92u8,
                81u8,
                162u8,
                218u8,
                37u8,
                27u8,
                188u8,
                140u8,
                133u8,
                102u8,
                78u8,
                204u8,
                227u8,
                146u8,
                99u8,
                218u8,
                62u8,
                224u8,
                63u8,
                96u8,
                108u8,
            ],
            [
                249u8,
                14u8,
                79u8,
                29u8,
                156u8,
                208u8,
                221u8,
                85u8,
                227u8,
                57u8,
                65u8,
                28u8,
                188u8,
                155u8,
                21u8,
                36u8,
                130u8,
                48u8,
                124u8,
                58u8,
                35u8,
                237u8,
                100u8,
                113u8,
                94u8,
                74u8,
                40u8,
                88u8,
                246u8,
                65u8,
                163u8,
                245u8,
            ],
        ];
    }
    #[automatically_derived]
    impl alloy_sol_types::SolEventInterface for FullRelayWithVerifyEvents {
        const NAME: &'static str = "FullRelayWithVerifyEvents";
        const COUNT: usize = 2usize;
        fn decode_raw_log(
            topics: &[alloy_sol_types::Word],
            data: &[u8],
            validate: bool,
        ) -> alloy_sol_types::Result<Self> {
            match topics.first().copied() {
                Some(<Extension as alloy_sol_types::SolEvent>::SIGNATURE_HASH) => {
                    <Extension as alloy_sol_types::SolEvent>::decode_raw_log(
                            topics,
                            data,
                            validate,
                        )
                        .map(Self::Extension)
                }
                Some(<NewTip as alloy_sol_types::SolEvent>::SIGNATURE_HASH) => {
                    <NewTip as alloy_sol_types::SolEvent>::decode_raw_log(
                            topics,
                            data,
                            validate,
                        )
                        .map(Self::NewTip)
                }
                _ => {
                    alloy_sol_types::private::Err(alloy_sol_types::Error::InvalidLog {
                        name: <Self as alloy_sol_types::SolEventInterface>::NAME,
                        log: alloy_sol_types::private::Box::new(
                            alloy_sol_types::private::LogData::new_unchecked(
                                topics.to_vec(),
                                data.to_vec().into(),
                            ),
                        ),
                    })
                }
            }
        }
    }
    #[automatically_derived]
    impl alloy_sol_types::private::IntoLogData for FullRelayWithVerifyEvents {
        fn to_log_data(&self) -> alloy_sol_types::private::LogData {
            match self {
                Self::Extension(inner) => {
                    alloy_sol_types::private::IntoLogData::to_log_data(inner)
                }
                Self::NewTip(inner) => {
                    alloy_sol_types::private::IntoLogData::to_log_data(inner)
                }
            }
        }
        fn into_log_data(self) -> alloy_sol_types::private::LogData {
            match self {
                Self::Extension(inner) => {
                    alloy_sol_types::private::IntoLogData::into_log_data(inner)
                }
                Self::NewTip(inner) => {
                    alloy_sol_types::private::IntoLogData::into_log_data(inner)
                }
            }
        }
    }
    use alloy::contract as alloy_contract;
    /**Creates a new wrapper around an on-chain [`FullRelayWithVerify`](self) contract instance.

See the [wrapper's documentation](`FullRelayWithVerifyInstance`) for more details.*/
    #[inline]
    pub const fn new<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    >(
        address: alloy_sol_types::private::Address,
        provider: P,
    ) -> FullRelayWithVerifyInstance<T, P, N> {
        FullRelayWithVerifyInstance::<T, P, N>::new(address, provider)
    }
    /**Deploys this contract using the given `provider` and constructor arguments, if any.

Returns a new instance of the contract, if the deployment was successful.

For more fine-grained control over the deployment process, use [`deploy_builder`] instead.*/
    #[inline]
    pub fn deploy<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    >(
        provider: P,
        _genesisHeader: alloy::sol_types::private::Bytes,
        _height: alloy::sol_types::private::primitives::aliases::U256,
        _periodStart: alloy::sol_types::private::FixedBytes<32>,
    ) -> impl ::core::future::Future<
        Output = alloy_contract::Result<FullRelayWithVerifyInstance<T, P, N>>,
    > {
        FullRelayWithVerifyInstance::<
            T,
            P,
            N,
        >::deploy(provider, _genesisHeader, _height, _periodStart)
    }
    /**Creates a `RawCallBuilder` for deploying this contract using the given `provider`
and constructor arguments, if any.

This is a simple wrapper around creating a `RawCallBuilder` with the data set to
the bytecode concatenated with the constructor's ABI-encoded arguments.*/
    #[inline]
    pub fn deploy_builder<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    >(
        provider: P,
        _genesisHeader: alloy::sol_types::private::Bytes,
        _height: alloy::sol_types::private::primitives::aliases::U256,
        _periodStart: alloy::sol_types::private::FixedBytes<32>,
    ) -> alloy_contract::RawCallBuilder<T, P, N> {
        FullRelayWithVerifyInstance::<
            T,
            P,
            N,
        >::deploy_builder(provider, _genesisHeader, _height, _periodStart)
    }
    /**A [`FullRelayWithVerify`](self) instance.

Contains type-safe methods for interacting with an on-chain instance of the
[`FullRelayWithVerify`](self) contract located at a given `address`, using a given
provider `P`.

If the contract bytecode is available (see the [`sol!`](alloy_sol_types::sol!)
documentation on how to provide it), the `deploy` and `deploy_builder` methods can
be used to deploy a new instance of the contract.

See the [module-level documentation](self) for all the available methods.*/
    #[derive(Clone)]
    pub struct FullRelayWithVerifyInstance<T, P, N = alloy_contract::private::Ethereum> {
        address: alloy_sol_types::private::Address,
        provider: P,
        _network_transport: ::core::marker::PhantomData<(N, T)>,
    }
    #[automatically_derived]
    impl<T, P, N> ::core::fmt::Debug for FullRelayWithVerifyInstance<T, P, N> {
        #[inline]
        fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
            f.debug_tuple("FullRelayWithVerifyInstance").field(&self.address).finish()
        }
    }
    /// Instantiation and getters/setters.
    #[automatically_derived]
    impl<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    > FullRelayWithVerifyInstance<T, P, N> {
        /**Creates a new wrapper around an on-chain [`FullRelayWithVerify`](self) contract instance.

See the [wrapper's documentation](`FullRelayWithVerifyInstance`) for more details.*/
        #[inline]
        pub const fn new(
            address: alloy_sol_types::private::Address,
            provider: P,
        ) -> Self {
            Self {
                address,
                provider,
                _network_transport: ::core::marker::PhantomData,
            }
        }
        /**Deploys this contract using the given `provider` and constructor arguments, if any.

Returns a new instance of the contract, if the deployment was successful.

For more fine-grained control over the deployment process, use [`deploy_builder`] instead.*/
        #[inline]
        pub async fn deploy(
            provider: P,
            _genesisHeader: alloy::sol_types::private::Bytes,
            _height: alloy::sol_types::private::primitives::aliases::U256,
            _periodStart: alloy::sol_types::private::FixedBytes<32>,
        ) -> alloy_contract::Result<FullRelayWithVerifyInstance<T, P, N>> {
            let call_builder = Self::deploy_builder(
                provider,
                _genesisHeader,
                _height,
                _periodStart,
            );
            let contract_address = call_builder.deploy().await?;
            Ok(Self::new(contract_address, call_builder.provider))
        }
        /**Creates a `RawCallBuilder` for deploying this contract using the given `provider`
and constructor arguments, if any.

This is a simple wrapper around creating a `RawCallBuilder` with the data set to
the bytecode concatenated with the constructor's ABI-encoded arguments.*/
        #[inline]
        pub fn deploy_builder(
            provider: P,
            _genesisHeader: alloy::sol_types::private::Bytes,
            _height: alloy::sol_types::private::primitives::aliases::U256,
            _periodStart: alloy::sol_types::private::FixedBytes<32>,
        ) -> alloy_contract::RawCallBuilder<T, P, N> {
            alloy_contract::RawCallBuilder::new_raw_deploy(
                provider,
                [
                    &BYTECODE[..],
                    &alloy_sol_types::SolConstructor::abi_encode(
                        &constructorCall {
                            _genesisHeader,
                            _height,
                            _periodStart,
                        },
                    )[..],
                ]
                    .concat()
                    .into(),
            )
        }
        /// Returns a reference to the address.
        #[inline]
        pub const fn address(&self) -> &alloy_sol_types::private::Address {
            &self.address
        }
        /// Sets the address.
        #[inline]
        pub fn set_address(&mut self, address: alloy_sol_types::private::Address) {
            self.address = address;
        }
        /// Sets the address and returns `self`.
        pub fn at(mut self, address: alloy_sol_types::private::Address) -> Self {
            self.set_address(address);
            self
        }
        /// Returns a reference to the provider.
        #[inline]
        pub const fn provider(&self) -> &P {
            &self.provider
        }
    }
    impl<T, P: ::core::clone::Clone, N> FullRelayWithVerifyInstance<T, &P, N> {
        /// Clones the provider and returns a new instance with the cloned provider.
        #[inline]
        pub fn with_cloned_provider(self) -> FullRelayWithVerifyInstance<T, P, N> {
            FullRelayWithVerifyInstance {
                address: self.address,
                provider: ::core::clone::Clone::clone(&self.provider),
                _network_transport: ::core::marker::PhantomData,
            }
        }
    }
    /// Function calls.
    #[automatically_derived]
    impl<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    > FullRelayWithVerifyInstance<T, P, N> {
        /// Creates a new call builder using this contract instance's provider and address.
        ///
        /// Note that the call can be any function call, not just those defined in this
        /// contract. Prefer using the other methods for building type-safe contract calls.
        pub fn call_builder<C: alloy_sol_types::SolCall>(
            &self,
            call: &C,
        ) -> alloy_contract::SolCallBuilder<T, &P, C, N> {
            alloy_contract::SolCallBuilder::new_sol(&self.provider, &self.address, call)
        }
        ///Creates a new call builder for the [`HEIGHT_INTERVAL`] function.
        pub fn HEIGHT_INTERVAL(
            &self,
        ) -> alloy_contract::SolCallBuilder<T, &P, HEIGHT_INTERVALCall, N> {
            self.call_builder(&HEIGHT_INTERVALCall {})
        }
        ///Creates a new call builder for the [`addHeaders`] function.
        pub fn addHeaders(
            &self,
            _anchor: alloy::sol_types::private::Bytes,
            _headers: alloy::sol_types::private::Bytes,
        ) -> alloy_contract::SolCallBuilder<T, &P, addHeadersCall, N> {
            self.call_builder(
                &addHeadersCall {
                    _anchor,
                    _headers,
                },
            )
        }
        ///Creates a new call builder for the [`addHeadersWithRetarget`] function.
        pub fn addHeadersWithRetarget(
            &self,
            _oldPeriodStartHeader: alloy::sol_types::private::Bytes,
            _oldPeriodEndHeader: alloy::sol_types::private::Bytes,
            _headers: alloy::sol_types::private::Bytes,
        ) -> alloy_contract::SolCallBuilder<T, &P, addHeadersWithRetargetCall, N> {
            self.call_builder(
                &addHeadersWithRetargetCall {
                    _oldPeriodStartHeader,
                    _oldPeriodEndHeader,
                    _headers,
                },
            )
        }
        ///Creates a new call builder for the [`findAncestor`] function.
        pub fn findAncestor(
            &self,
            _digest: alloy::sol_types::private::FixedBytes<32>,
            _offset: alloy::sol_types::private::primitives::aliases::U256,
        ) -> alloy_contract::SolCallBuilder<T, &P, findAncestorCall, N> {
            self.call_builder(
                &findAncestorCall {
                    _digest,
                    _offset,
                },
            )
        }
        ///Creates a new call builder for the [`findHeight`] function.
        pub fn findHeight(
            &self,
            _digest: alloy::sol_types::private::FixedBytes<32>,
        ) -> alloy_contract::SolCallBuilder<T, &P, findHeightCall, N> {
            self.call_builder(&findHeightCall { _digest })
        }
        ///Creates a new call builder for the [`getBestKnownDigest`] function.
        pub fn getBestKnownDigest(
            &self,
        ) -> alloy_contract::SolCallBuilder<T, &P, getBestKnownDigestCall, N> {
            self.call_builder(&getBestKnownDigestCall {})
        }
        ///Creates a new call builder for the [`getCurrentEpochDifficulty`] function.
        pub fn getCurrentEpochDifficulty(
            &self,
        ) -> alloy_contract::SolCallBuilder<T, &P, getCurrentEpochDifficultyCall, N> {
            self.call_builder(&getCurrentEpochDifficultyCall {})
        }
        ///Creates a new call builder for the [`getLastReorgCommonAncestor`] function.
        pub fn getLastReorgCommonAncestor(
            &self,
        ) -> alloy_contract::SolCallBuilder<T, &P, getLastReorgCommonAncestorCall, N> {
            self.call_builder(&getLastReorgCommonAncestorCall {})
        }
        ///Creates a new call builder for the [`getPrevEpochDifficulty`] function.
        pub fn getPrevEpochDifficulty(
            &self,
        ) -> alloy_contract::SolCallBuilder<T, &P, getPrevEpochDifficultyCall, N> {
            self.call_builder(&getPrevEpochDifficultyCall {})
        }
        ///Creates a new call builder for the [`getRelayGenesis`] function.
        pub fn getRelayGenesis(
            &self,
        ) -> alloy_contract::SolCallBuilder<T, &P, getRelayGenesisCall, N> {
            self.call_builder(&getRelayGenesisCall {})
        }
        ///Creates a new call builder for the [`isAncestor`] function.
        pub fn isAncestor(
            &self,
            _ancestor: alloy::sol_types::private::FixedBytes<32>,
            _descendant: alloy::sol_types::private::FixedBytes<32>,
            _limit: alloy::sol_types::private::primitives::aliases::U256,
        ) -> alloy_contract::SolCallBuilder<T, &P, isAncestorCall, N> {
            self.call_builder(
                &isAncestorCall {
                    _ancestor,
                    _descendant,
                    _limit,
                },
            )
        }
        ///Creates a new call builder for the [`markNewHeaviest`] function.
        pub fn markNewHeaviest(
            &self,
            _ancestor: alloy::sol_types::private::FixedBytes<32>,
            _currentBest: alloy::sol_types::private::Bytes,
            _newBest: alloy::sol_types::private::Bytes,
            _limit: alloy::sol_types::private::primitives::aliases::U256,
        ) -> alloy_contract::SolCallBuilder<T, &P, markNewHeaviestCall, N> {
            self.call_builder(
                &markNewHeaviestCall {
                    _ancestor,
                    _currentBest,
                    _newBest,
                    _limit,
                },
            )
        }
        ///Creates a new call builder for the [`verifyProof`] function.
        pub fn verifyProof(
            &self,
            _header: alloy::sol_types::private::Bytes,
            _proof: alloy::sol_types::private::Bytes,
            _txId: alloy::sol_types::private::FixedBytes<32>,
            _index: alloy::sol_types::private::primitives::aliases::U256,
            _numConfs: u8,
        ) -> alloy_contract::SolCallBuilder<T, &P, verifyProofCall, N> {
            self.call_builder(
                &verifyProofCall {
                    _header,
                    _proof,
                    _txId,
                    _index,
                    _numConfs,
                },
            )
        }
    }
    /// Event filters.
    #[automatically_derived]
    impl<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    > FullRelayWithVerifyInstance<T, P, N> {
        /// Creates a new event filter using this contract instance's provider and address.
        ///
        /// Note that the type can be any event, not just those defined in this contract.
        /// Prefer using the other methods for building type-safe event filters.
        pub fn event_filter<E: alloy_sol_types::SolEvent>(
            &self,
        ) -> alloy_contract::Event<T, &P, E, N> {
            alloy_contract::Event::new_sol(&self.provider, &self.address)
        }
        ///Creates a new event filter for the [`Extension`] event.
        pub fn Extension_filter(&self) -> alloy_contract::Event<T, &P, Extension, N> {
            self.event_filter::<Extension>()
        }
        ///Creates a new event filter for the [`NewTip`] event.
        pub fn NewTip_filter(&self) -> alloy_contract::Event<T, &P, NewTip, N> {
            self.event_filter::<NewTip>()
        }
    }
}
