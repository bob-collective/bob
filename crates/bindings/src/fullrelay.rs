/**

Generated by the following Solidity interface...
```solidity
interface FullRelay {
    event Extension(bytes32 indexed _first, bytes32 indexed _last);
    event NewTip(bytes32 indexed _from, bytes32 indexed _to, bytes32 indexed _gcd);

    constructor(bytes _genesisHeader, uint256 _height, bytes32 _periodStart);

    function HEIGHT_INTERVAL() external view returns (uint32);
    function addHeaders(bytes memory _anchor, bytes memory _headers) external returns (bool);
    function addHeadersWithRetarget(bytes memory _oldPeriodStartHeader, bytes memory _oldPeriodEndHeader, bytes memory _headers) external returns (bool);
    function findAncestor(bytes32 _digest, uint256 _offset) external view returns (bytes32);
    function findHeight(bytes32 _digest) external view returns (uint256);
    function getBestKnownDigest() external view returns (bytes32);
    function getCurrentEpochDifficulty() external view returns (uint256);
    function getLastReorgCommonAncestor() external view returns (bytes32);
    function getPrevEpochDifficulty() external view returns (uint256);
    function getRelayGenesis() external view returns (bytes32);
    function isAncestor(bytes32 _ancestor, bytes32 _descendant, uint256 _limit) external view returns (bool);
    function markNewHeaviest(bytes32 _ancestor, bytes memory _currentBest, bytes memory _newBest, uint256 _limit) external returns (bool);
}
```

...which was generated by the following JSON ABI:
```json
[
  {
    "type": "constructor",
    "inputs": [
      {
        "name": "_genesisHeader",
        "type": "bytes",
        "internalType": "bytes"
      },
      {
        "name": "_height",
        "type": "uint256",
        "internalType": "uint256"
      },
      {
        "name": "_periodStart",
        "type": "bytes32",
        "internalType": "bytes32"
      }
    ],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "HEIGHT_INTERVAL",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "uint32",
        "internalType": "uint32"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "addHeaders",
    "inputs": [
      {
        "name": "_anchor",
        "type": "bytes",
        "internalType": "bytes"
      },
      {
        "name": "_headers",
        "type": "bytes",
        "internalType": "bytes"
      }
    ],
    "outputs": [
      {
        "name": "",
        "type": "bool",
        "internalType": "bool"
      }
    ],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "addHeadersWithRetarget",
    "inputs": [
      {
        "name": "_oldPeriodStartHeader",
        "type": "bytes",
        "internalType": "bytes"
      },
      {
        "name": "_oldPeriodEndHeader",
        "type": "bytes",
        "internalType": "bytes"
      },
      {
        "name": "_headers",
        "type": "bytes",
        "internalType": "bytes"
      }
    ],
    "outputs": [
      {
        "name": "",
        "type": "bool",
        "internalType": "bool"
      }
    ],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "findAncestor",
    "inputs": [
      {
        "name": "_digest",
        "type": "bytes32",
        "internalType": "bytes32"
      },
      {
        "name": "_offset",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "outputs": [
      {
        "name": "",
        "type": "bytes32",
        "internalType": "bytes32"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "findHeight",
    "inputs": [
      {
        "name": "_digest",
        "type": "bytes32",
        "internalType": "bytes32"
      }
    ],
    "outputs": [
      {
        "name": "",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "getBestKnownDigest",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "bytes32",
        "internalType": "bytes32"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "getCurrentEpochDifficulty",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "getLastReorgCommonAncestor",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "bytes32",
        "internalType": "bytes32"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "getPrevEpochDifficulty",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "getRelayGenesis",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "bytes32",
        "internalType": "bytes32"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "isAncestor",
    "inputs": [
      {
        "name": "_ancestor",
        "type": "bytes32",
        "internalType": "bytes32"
      },
      {
        "name": "_descendant",
        "type": "bytes32",
        "internalType": "bytes32"
      },
      {
        "name": "_limit",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "outputs": [
      {
        "name": "",
        "type": "bool",
        "internalType": "bool"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "markNewHeaviest",
    "inputs": [
      {
        "name": "_ancestor",
        "type": "bytes32",
        "internalType": "bytes32"
      },
      {
        "name": "_currentBest",
        "type": "bytes",
        "internalType": "bytes"
      },
      {
        "name": "_newBest",
        "type": "bytes",
        "internalType": "bytes"
      },
      {
        "name": "_limit",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "outputs": [
      {
        "name": "",
        "type": "bool",
        "internalType": "bool"
      }
    ],
    "stateMutability": "nonpayable"
  },
  {
    "type": "event",
    "name": "Extension",
    "inputs": [
      {
        "name": "_first",
        "type": "bytes32",
        "indexed": true,
        "internalType": "bytes32"
      },
      {
        "name": "_last",
        "type": "bytes32",
        "indexed": true,
        "internalType": "bytes32"
      }
    ],
    "anonymous": false
  },
  {
    "type": "event",
    "name": "NewTip",
    "inputs": [
      {
        "name": "_from",
        "type": "bytes32",
        "indexed": true,
        "internalType": "bytes32"
      },
      {
        "name": "_to",
        "type": "bytes32",
        "indexed": true,
        "internalType": "bytes32"
      },
      {
        "name": "_gcd",
        "type": "bytes32",
        "indexed": true,
        "internalType": "bytes32"
      }
    ],
    "anonymous": false
  }
]
```*/
#[allow(
    non_camel_case_types,
    non_snake_case,
    clippy::pub_underscore_fields,
    clippy::style
)]
pub mod FullRelay {
    use super::*;
    use alloy::sol_types as alloy_sol_types;
    /// The creation / init bytecode of the contract.
    ///
    /// ```text
    ///0x608060405234801561000f575f5ffd5b506040516121b43803806121b483398101604081905261002e91610319565b82516050146100785760405162461bcd60e51b81526020600482015260116024820152704261642067656e6573697320626c6f636b60781b60448201526064015b60405180910390fd5b5f61008284610154565b905062ffffff8216156100fd5760405162461bcd60e51b815260206004820152603d60248201527f506572696f64207374617274206861736820646f6573206e6f7420686176652060448201527f776f726b2e2048696e743a2077726f6e672062797465206f726465723f000000606482015260840161006f565b5f818155600182905560028290558181526004602052604090208390556101266107e0846103ec565b6101309084610413565b5f8381526004602052604090205561014784610214565b600555506105ab92505050565b5f600280836040516101669190610426565b602060405180830381855afa158015610181573d5f5f3e3d5ffd5b5050506040513d601f19601f820116820180604052508101906101a4919061043c565b6040516020016101b691815260200190565b60408051601f19818403018152908290526101d091610426565b602060405180830381855afa1580156101eb573d5f5f3e3d5ffd5b5050506040513d601f19601f8201168201806040525081019061020e919061043c565b92915050565b5f61020e61022183610226565b610231565b5f61020e8282610241565b5f61020e61ffff60d01b836102e5565b5f80610258610251846048610453565b85906102f7565b60e81c90505f8461026a85604b610453565b8151811061027a5761027a610466565b016020015160f81c90505f6102ac835f60108262ffffff16901c8261ff001660108462ffffff16901b17179050919050565b62ffffff1690505f6102bf60038461047a565b60ff1690506102d081610100610576565b6102da9083610581565b979650505050505050565b5f6102f08284610598565b9392505050565b5f6102f08383016020015190565b634e487b7160e01b5f52604160045260245ffd5b5f5f5f6060848603121561032b575f5ffd5b83516001600160401b03811115610340575f5ffd5b8401601f81018613610350575f5ffd5b80516001600160401b0381111561036957610369610305565b604051601f8201601f19908116603f011681016001600160401b038111828210171561039757610397610305565b6040528181528282016020018810156103ae575f5ffd5b8160208401602083015e5f6020928201830152908601516040909601519097959650949350505050565b634e487b7160e01b5f52601260045260245ffd5b5f826103fa576103fa6103d8565b500690565b634e487b7160e01b5f52601160045260245ffd5b8181038181111561020e5761020e6103ff565b5f82518060208501845e5f920191825250919050565b5f6020828403121561044c575f5ffd5b5051919050565b8082018082111561020e5761020e6103ff565b634e487b7160e01b5f52603260045260245ffd5b60ff828116828216039081111561020e5761020e6103ff565b6001815b60018411156104ce578085048111156104b2576104b26103ff565b60018416156104c057908102905b60019390931c928002610497565b935093915050565b5f826104e45750600161020e565b816104f057505f61020e565b816001811461050657600281146105105761052c565b600191505061020e565b60ff841115610521576105216103ff565b50506001821b61020e565b5060208310610133831016604e8410600b841016171561054f575081810a61020e565b61055b5f198484610493565b805f190482111561056e5761056e6103ff565b029392505050565b5f6102f083836104d6565b808202811582820484141761020e5761020e6103ff565b5f826105a6576105a66103d8565b500490565b611bfc806105b85f395ff3fe608060405234801561000f575f5ffd5b50600436106100cf575f3560e01c806370d53c181161007d578063b985621a11610058578063b985621a14610186578063c58242cd14610199578063e3d8d8d8146101a1575f5ffd5b806370d53c181461014357806374c3a3a9146101605780637fa637fc14610173575f5ffd5b806330017b3b116100ad57806330017b3b146100fa57806360b5c3901461010d57806365da41b914610120575f5ffd5b8063113764be146100d35780631910d973146100ea5780632b97be24146100f2575b5f5ffd5b6005545b6040519081526020015b60405180910390f35b6001546100d7565b6006546100d7565b6100d761010836600461175b565b6101a8565b6100d761011b36600461177b565b6101bc565b61013361012e3660046117d7565b6101c6565b60405190151581526020016100e1565b61014b600481565b60405163ffffffff90911681526020016100e1565b61013361016e366004611843565b610382565b6101336101813660046118c4565b6104f7565b610133610194366004611963565b6106d6565b6002546100d7565b5f546100d7565b5f6101b383836106ec565b90505b92915050565b5f6101b68261075e565b5f61020583838080601f0160208091040260200160405190810160405280939291908181526020018383808284375f9201919091525061080c92505050565b61027c5760405162461bcd60e51b815260206004820152602b60248201527f486561646572206172726179206c656e677468206d757374206265206469766960448201527f7369626c6520627920383000000000000000000000000000000000000000000060648201526084015b60405180910390fd5b6102ba85858080601f0160208091040260200160405190810160405280939291908181526020018383808284375f9201919091525061082292505050565b6103065760405162461bcd60e51b815260206004820152601760248201527f416e63686f72206d7573742062652038302062797465730000000000000000006044820152606401610273565b61037785858080601f0160208091040260200160405190810160405280939291908181526020018383808284375f9201919091525050604080516020601f890181900481028201810190925287815292508791508690819084018382808284375f9201829052509250610829915050565b90505b949350505050565b5f6103c184848080601f0160208091040260200160405190810160405280939291908181526020018383808284375f9201919091525061082292505050565b8015610406575061040686868080601f0160208091040260200160405190810160405280939291908181526020018383808284375f9201919091525061082292505050565b6104785760405162461bcd60e51b815260206004820152602e60248201527f42616420617267732e20436865636b2068656164657220616e6420617272617960448201527f2062797465206c656e677468732e0000000000000000000000000000000000006064820152608401610273565b6104ec8787878080601f0160208091040260200160405190810160405280939291908181526020018383808284375f9201919091525050604080516020601f8b0181900481028201810190925289815292508991508890819084018382808284375f92019190915250889250610c16915050565b979650505050505050565b5f61053687878080601f0160208091040260200160405190810160405280939291908181526020018383808284375f9201919091525061082292505050565b801561057b575061057b85858080601f0160208091040260200160405190810160405280939291908181526020018383808284375f9201919091525061082292505050565b80156105c057506105c083838080601f0160208091040260200160405190810160405280939291908181526020018383808284375f9201919091525061080c92505050565b6106325760405162461bcd60e51b815260206004820152602e60248201527f42616420617267732e20436865636b2068656164657220616e6420617272617960448201527f2062797465206c656e677468732e0000000000000000000000000000000000006064820152608401610273565b6104ec87878080601f0160208091040260200160405190810160405280939291908181526020018383808284375f9201919091525050604080516020601f8b0181900481028201810190925289815292508991508890819084018382808284375f9201919091525050604080516020601f8a0181900481028201810190925288815292508891508790819084018382808284375f92019190915250610eb392505050565b5f6106e2848484611145565b90505b9392505050565b5f82815b83811015610710575f9182526003602052604090912054906001016106f0565b50806101b35760405162461bcd60e51b815260206004820152601060248201527f556e6b6e6f776e20616e636573746f72000000000000000000000000000000006044820152606401610273565b5f8082815b61076f600460016119b9565b63ffffffff168110156107c3575f8281526004602052604081205493508390036107a8575f9182526003602052604090912054906107bb565b6107b281846119d5565b95945050505050565b600101610763565b5060405162461bcd60e51b815260206004820152600d60248201527f556e6b6e6f776e20626c6f636b000000000000000000000000000000000000006044820152606401610273565b5f6050825161081b9190611a15565b1592915050565b5160501490565b5f5f61083485611186565b90505f6108408261075e565b90505f61084c8661125e565b9050848061086157508061085f8861125e565b145b6108d25760405162461bcd60e51b8152602060048201526024808201527f556e6578706563746564207265746172676574206f6e2065787465726e616c2060448201527f63616c6c000000000000000000000000000000000000000000000000000000006064820152608401610273565b85515f908190815b81811015610bd3576108ed605082611a28565b6108f89060016119d5565b61090290876119d5565b93506109108a826050611269565b5f81815260036020526040902054909350610ae65784610a66845f8190506008817eff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff16901b600882901c7eff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff161790506010817dffff0000ffff0000ffff0000ffff0000ffff0000ffff0000ffff0000ffff16901b601082901c7dffff0000ffff0000ffff0000ffff0000ffff0000ffff0000ffff0000ffff161790506020817bffffffff00000000ffffffff00000000ffffffff00000000ffffffff16901b602082901c7bffffffff00000000ffffffff00000000ffffffff00000000ffffffff1617905060408177ffffffffffffffff0000000000000000ffffffffffffffff16901b604082901c77ffffffffffffffff0000000000000000ffffffffffffffff16179050608081901b608082901c179050919050565b1115610ab45760405162461bcd60e51b815260206004820152601b60248201527f48656164657220776f726b20697320696e73756666696369656e7400000000006044820152606401610273565b5f838152600360205260409020879055610acf600485611a15565b5f03610ae6575f8381526004602052604090208490555b84610af18b8361128e565b14610b3e5760405162461bcd60e51b815260206004820152601b60248201527f546172676574206368616e67656420756e65787065637465646c7900000000006044820152606401610273565b86610b498b83611327565b14610bbc5760405162461bcd60e51b815260206004820152602660248201527f4865616465727320646f206e6f7420666f726d206120636f6e73697374656e7460448201527f20636861696e00000000000000000000000000000000000000000000000000006064820152608401610273565b829650605081610bcc91906119d5565b90506108da565b5081610bde8b611186565b6040517ff90e4f1d9cd0dd55e339411cbc9b152482307c3a23ed64715e4a2858f641a3f5905f90a35060019998505050505050505050565b5f6107e0821115610c8f5760405162461bcd60e51b815260206004820152603360248201527f526571756573746564206c696d69742069732067726561746572207468616e2060448201527f3120646966666963756c747920706572696f64000000000000000000000000006064820152608401610273565b5f610c9984611186565b90505f610ca586611186565b90506001548114610cf85760405162461bcd60e51b815260206004820181905260248201527f50617373656420696e2062657374206973206e6f742062657374206b6e6f776e6044820152606401610273565b5f82815260036020526040902054610d525760405162461bcd60e51b815260206004820152601360248201527f4e6577206265737420697320756e6b6e6f776e000000000000000000000000006044820152606401610273565b610d6087600154848761133f565b610dd25760405162461bcd60e51b815260206004820152602960248201527f416e636573746f72206d75737420626520686561766965737420636f6d6d6f6e60448201527f20616e636573746f7200000000000000000000000000000000000000000000006064820152608401610273565b81610dde8888886113d9565b14610e515760405162461bcd60e51b815260206004820152603360248201527f4e65772062657374206861736820646f6573206e6f742068617665206d6f726560448201527f20776f726b207468616e2070726576696f7573000000000000000000000000006064820152608401610273565b600182905560028790555f610e658661156a565b90506005548114610e765760058190555b8783837f3cc13de64df0f0239626235c51a2da251bbc8c85664ecce39263da3ee03f606c60405160405180910390a4506001979650505050505050565b5f5f610ec6610ec186611186565b61075e565b90505f610ed5610ec186611186565b9050610ee36107e082611a15565b6107df14610f595760405162461bcd60e51b815260206004820152603d60248201527f4d7573742070726f7669646520746865206c61737420686561646572206f662060448201527f74686520636c6f73696e6720646966666963756c747920706572696f640000006064820152608401610273565b610f65826107df6119d5565b8114610fd95760405162461bcd60e51b815260206004820152602860248201527f4d7573742070726f766964652065786163746c79203120646966666963756c7460448201527f7920706572696f640000000000000000000000000000000000000000000000006064820152608401610273565b610fe28561156a565b610feb8761156a565b1461105e5760405162461bcd60e51b815260206004820152602760248201527f506572696f642068656164657220646966666963756c7469657320646f206e6f60448201527f74206d61746368000000000000000000000000000000000000000000000000006064820152608401610273565b5f6110688561125e565b90505f61109a6110778961125e565b6110808a61157c565b63ffffffff1661108f8a61157c565b63ffffffff166115af565b905081818316146110ed5760405162461bcd60e51b815260206004820152601960248201527f496e76616c69642072657461726765742070726f7669646564000000000000006044820152606401610273565b5f6110f78961156a565b9050806006541415801561112157506107e061111460015461075e565b61111e9190611a3b565b84115b1561112c5760068190555b61113888886001610829565b9998505050505050505050565b5f82815b8381101561117b57858203611163576001925050506106e5565b5f918252600360205260409091205490600101611149565b505f95945050505050565b5f600280836040516111989190611a4e565b602060405180830381855afa1580156111b3573d5f5f3e3d5ffd5b5050506040513d601f19601f820116820180604052508101906111d69190611a64565b6040516020016111e891815260200190565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529082905261122091611a4e565b602060405180830381855afa15801561123b573d5f5f3e3d5ffd5b5050506040513d601f19601f820116820180604052508101906101b69190611a64565b5f6101b6825f61128e565b5f60205f8385602001870160025afa5060205f60205f60025afa50505f519392505050565b5f806112a561129e8460486119d5565b8590611641565b60e81c90505f846112b785604b6119d5565b815181106112c7576112c7611a7b565b016020015160f81c90505f6112f9835f60108262ffffff16901c8261ff001660108462ffffff16901b17179050919050565b62ffffff1690505f61130c600384611aa8565b60ff16905061131d81610100611ba4565b6104ec9083611baf565b5f6101b36113368360046119d5565b84016020015190565b5f838514801561134e57508285145b1561135b5750600161037a565b838381815f5b868110156113a357898314611382575f838152600360205260409020549294505b89821461139b575f828152600360205260409020549193505b600101611361565b508284036113b7575f94505050505061037a565b8082146113ca575f94505050505061037a565b50600198975050505050505050565b5f5f6113e48561075e565b90505f6113f3610ec186611186565b90505f611402610ec186611186565b90508282101580156114145750828110155b6114865760405162461bcd60e51b815260206004820152603060248201527f412064657363656e64616e74206865696768742069732062656c6f772074686560448201527f20616e636573746f7220686569676874000000000000000000000000000000006064820152608401610273565b5f6114936107e085611a15565b61149f856107e06119d5565b6114a99190611a3b565b90508083108183108115826114bb5750805b156114d6576114c989611186565b96505050505050506106e5565b8180156114e1575080155b156114ef576114c988611186565b8180156114f95750805b1561151d57838510156115145761150f88611186565b6114c9565b6114c989611186565b6115268861156a565b6115326107e086611a15565b61153c9190611baf565b6115458a61156a565b6115516107e088611a15565b61155b9190611baf565b1015611514576114c988611186565b5f6101b66115778361125e565b61164f565b5f6101b661158983611676565b60d881901c63ff00ff001662ff00ff60e89290921c9190911617601081811b91901c1790565b5f806115bb8385611682565b90506115cb6212750060046116dd565b8110156115e3576115e06212750060046116dd565b90505b6115f16212750060046116e8565b811115611609576116066212750060046116e8565b90505b5f6116218261161b88620100006116dd565b906116e8565b90506116376201000061161b83621275006116dd565b9695505050505050565b5f6101b38383016020015190565b5f6101b67bffff0000000000000000000000000000000000000000000000000000836116dd565b5f6101b6826044611641565b5f828211156116d35760405162461bcd60e51b815260206004820152601d60248201527f556e646572666c6f7720647572696e67207375627472616374696f6e2e0000006044820152606401610273565b6101b38284611a3b565b5f6101b38284611a28565b5f825f036116f757505f6101b6565b6117018284611baf565b90508161170e8483611a28565b146101b65760405162461bcd60e51b815260206004820152601f60248201527f4f766572666c6f7720647572696e67206d756c7469706c69636174696f6e2e006044820152606401610273565b5f5f6040838503121561176c575f5ffd5b50508035926020909101359150565b5f6020828403121561178b575f5ffd5b5035919050565b5f5f83601f8401126117a2575f5ffd5b50813567ffffffffffffffff8111156117b9575f5ffd5b6020830191508360208285010111156117d0575f5ffd5b9250929050565b5f5f5f5f604085870312156117ea575f5ffd5b843567ffffffffffffffff811115611800575f5ffd5b61180c87828801611792565b909550935050602085013567ffffffffffffffff81111561182b575f5ffd5b61183787828801611792565b95989497509550505050565b5f5f5f5f5f5f60808789031215611858575f5ffd5b86359550602087013567ffffffffffffffff811115611875575f5ffd5b61188189828a01611792565b909650945050604087013567ffffffffffffffff8111156118a0575f5ffd5b6118ac89828a01611792565b979a9699509497949695606090950135949350505050565b5f5f5f5f5f5f606087890312156118d9575f5ffd5b863567ffffffffffffffff8111156118ef575f5ffd5b6118fb89828a01611792565b909750955050602087013567ffffffffffffffff81111561191a575f5ffd5b61192689828a01611792565b909550935050604087013567ffffffffffffffff811115611945575f5ffd5b61195189828a01611792565b979a9699509497509295939492505050565b5f5f5f60608486031215611975575f5ffd5b505081359360208301359350604090920135919050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52601160045260245ffd5b63ffffffff81811683821601908111156101b6576101b661198c565b808201808211156101b6576101b661198c565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52601260045260245ffd5b5f82611a2357611a236119e8565b500690565b5f82611a3657611a366119e8565b500490565b818103818111156101b6576101b661198c565b5f82518060208501845e5f920191825250919050565b5f60208284031215611a74575f5ffd5b5051919050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52603260045260245ffd5b60ff82811682821603908111156101b6576101b661198c565b6001815b6001841115611afc57808504811115611ae057611ae061198c565b6001841615611aee57908102905b60019390931c928002611ac5565b935093915050565b5f82611b12575060016101b6565b81611b1e57505f6101b6565b8160018114611b345760028114611b3e57611b5a565b60019150506101b6565b60ff841115611b4f57611b4f61198c565b50506001821b6101b6565b5060208310610133831016604e8410600b8410161715611b7d575081810a6101b6565b611b895f198484611ac1565b805f1904821115611b9c57611b9c61198c565b029392505050565b5f6101b38383611b04565b80820281158282048414176101b6576101b661198c56fea26469706673582212205fbf154bdfaadaf4ea7cf9fd90b19e52d20ff89374c4b3c8caa9f683d488a16664736f6c634300081b0033
    /// ```
    #[rustfmt::skip]
    #[allow(clippy::all)]
    pub static BYTECODE: alloy_sol_types::private::Bytes = alloy_sol_types::private::Bytes::from_static(
        b"`\x80`@R4\x80\x15a\0\x0FW__\xFD[P`@Qa!\xB48\x03\x80a!\xB4\x839\x81\x01`@\x81\x90Ra\0.\x91a\x03\x19V[\x82Q`P\x14a\0xW`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`\x11`$\x82\x01RpBad genesis block`x\x1B`D\x82\x01R`d\x01[`@Q\x80\x91\x03\x90\xFD[_a\0\x82\x84a\x01TV[\x90Pb\xFF\xFF\xFF\x82\x16\x15a\0\xFDW`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`=`$\x82\x01R\x7FPeriod start hash does not have `D\x82\x01R\x7Fwork. Hint: wrong byte order?\0\0\0`d\x82\x01R`\x84\x01a\0oV[_\x81\x81U`\x01\x82\x90U`\x02\x82\x90U\x81\x81R`\x04` R`@\x90 \x83\x90Ua\x01&a\x07\xE0\x84a\x03\xECV[a\x010\x90\x84a\x04\x13V[_\x83\x81R`\x04` R`@\x90 Ua\x01G\x84a\x02\x14V[`\x05UPa\x05\xAB\x92PPPV[_`\x02\x80\x83`@Qa\x01f\x91\x90a\x04&V[` `@Q\x80\x83\x03\x81\x85Z\xFA\x15\x80\x15a\x01\x81W=__>=_\xFD[PPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90a\x01\xA4\x91\x90a\x04<V[`@Q` \x01a\x01\xB6\x91\x81R` \x01\x90V[`@\x80Q`\x1F\x19\x81\x84\x03\x01\x81R\x90\x82\x90Ra\x01\xD0\x91a\x04&V[` `@Q\x80\x83\x03\x81\x85Z\xFA\x15\x80\x15a\x01\xEBW=__>=_\xFD[PPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90a\x02\x0E\x91\x90a\x04<V[\x92\x91PPV[_a\x02\x0Ea\x02!\x83a\x02&V[a\x021V[_a\x02\x0E\x82\x82a\x02AV[_a\x02\x0Ea\xFF\xFF`\xD0\x1B\x83a\x02\xE5V[_\x80a\x02Xa\x02Q\x84`Ha\x04SV[\x85\x90a\x02\xF7V[`\xE8\x1C\x90P_\x84a\x02j\x85`Ka\x04SV[\x81Q\x81\x10a\x02zWa\x02za\x04fV[\x01` \x01Q`\xF8\x1C\x90P_a\x02\xAC\x83_`\x10\x82b\xFF\xFF\xFF\x16\x90\x1C\x82a\xFF\0\x16`\x10\x84b\xFF\xFF\xFF\x16\x90\x1B\x17\x17\x90P\x91\x90PV[b\xFF\xFF\xFF\x16\x90P_a\x02\xBF`\x03\x84a\x04zV[`\xFF\x16\x90Pa\x02\xD0\x81a\x01\0a\x05vV[a\x02\xDA\x90\x83a\x05\x81V[\x97\x96PPPPPPPV[_a\x02\xF0\x82\x84a\x05\x98V[\x93\x92PPPV[_a\x02\xF0\x83\x83\x01` \x01Q\x90V[cNH{q`\xE0\x1B_R`A`\x04R`$_\xFD[___``\x84\x86\x03\x12\x15a\x03+W__\xFD[\x83Q`\x01`\x01`@\x1B\x03\x81\x11\x15a\x03@W__\xFD[\x84\x01`\x1F\x81\x01\x86\x13a\x03PW__\xFD[\x80Q`\x01`\x01`@\x1B\x03\x81\x11\x15a\x03iWa\x03ia\x03\x05V[`@Q`\x1F\x82\x01`\x1F\x19\x90\x81\x16`?\x01\x16\x81\x01`\x01`\x01`@\x1B\x03\x81\x11\x82\x82\x10\x17\x15a\x03\x97Wa\x03\x97a\x03\x05V[`@R\x81\x81R\x82\x82\x01` \x01\x88\x10\x15a\x03\xAEW__\xFD[\x81` \x84\x01` \x83\x01^_` \x92\x82\x01\x83\x01R\x90\x86\x01Q`@\x90\x96\x01Q\x90\x97\x95\x96P\x94\x93PPPPV[cNH{q`\xE0\x1B_R`\x12`\x04R`$_\xFD[_\x82a\x03\xFAWa\x03\xFAa\x03\xD8V[P\x06\x90V[cNH{q`\xE0\x1B_R`\x11`\x04R`$_\xFD[\x81\x81\x03\x81\x81\x11\x15a\x02\x0EWa\x02\x0Ea\x03\xFFV[_\x82Q\x80` \x85\x01\x84^_\x92\x01\x91\x82RP\x91\x90PV[_` \x82\x84\x03\x12\x15a\x04LW__\xFD[PQ\x91\x90PV[\x80\x82\x01\x80\x82\x11\x15a\x02\x0EWa\x02\x0Ea\x03\xFFV[cNH{q`\xE0\x1B_R`2`\x04R`$_\xFD[`\xFF\x82\x81\x16\x82\x82\x16\x03\x90\x81\x11\x15a\x02\x0EWa\x02\x0Ea\x03\xFFV[`\x01\x81[`\x01\x84\x11\x15a\x04\xCEW\x80\x85\x04\x81\x11\x15a\x04\xB2Wa\x04\xB2a\x03\xFFV[`\x01\x84\x16\x15a\x04\xC0W\x90\x81\x02\x90[`\x01\x93\x90\x93\x1C\x92\x80\x02a\x04\x97V[\x93P\x93\x91PPV[_\x82a\x04\xE4WP`\x01a\x02\x0EV[\x81a\x04\xF0WP_a\x02\x0EV[\x81`\x01\x81\x14a\x05\x06W`\x02\x81\x14a\x05\x10Wa\x05,V[`\x01\x91PPa\x02\x0EV[`\xFF\x84\x11\x15a\x05!Wa\x05!a\x03\xFFV[PP`\x01\x82\x1Ba\x02\x0EV[P` \x83\x10a\x013\x83\x10\x16`N\x84\x10`\x0B\x84\x10\x16\x17\x15a\x05OWP\x81\x81\na\x02\x0EV[a\x05[_\x19\x84\x84a\x04\x93V[\x80_\x19\x04\x82\x11\x15a\x05nWa\x05na\x03\xFFV[\x02\x93\x92PPPV[_a\x02\xF0\x83\x83a\x04\xD6V[\x80\x82\x02\x81\x15\x82\x82\x04\x84\x14\x17a\x02\x0EWa\x02\x0Ea\x03\xFFV[_\x82a\x05\xA6Wa\x05\xA6a\x03\xD8V[P\x04\x90V[a\x1B\xFC\x80a\x05\xB8_9_\xF3\xFE`\x80`@R4\x80\x15a\0\x0FW__\xFD[P`\x046\x10a\0\xCFW_5`\xE0\x1C\x80cp\xD5<\x18\x11a\0}W\x80c\xB9\x85b\x1A\x11a\0XW\x80c\xB9\x85b\x1A\x14a\x01\x86W\x80c\xC5\x82B\xCD\x14a\x01\x99W\x80c\xE3\xD8\xD8\xD8\x14a\x01\xA1W__\xFD[\x80cp\xD5<\x18\x14a\x01CW\x80ct\xC3\xA3\xA9\x14a\x01`W\x80c\x7F\xA67\xFC\x14a\x01sW__\xFD[\x80c0\x01{;\x11a\0\xADW\x80c0\x01{;\x14a\0\xFAW\x80c`\xB5\xC3\x90\x14a\x01\rW\x80ce\xDAA\xB9\x14a\x01 W__\xFD[\x80c\x117d\xBE\x14a\0\xD3W\x80c\x19\x10\xD9s\x14a\0\xEAW\x80c+\x97\xBE$\x14a\0\xF2W[__\xFD[`\x05T[`@Q\x90\x81R` \x01[`@Q\x80\x91\x03\x90\xF3[`\x01Ta\0\xD7V[`\x06Ta\0\xD7V[a\0\xD7a\x01\x086`\x04a\x17[V[a\x01\xA8V[a\0\xD7a\x01\x1B6`\x04a\x17{V[a\x01\xBCV[a\x013a\x01.6`\x04a\x17\xD7V[a\x01\xC6V[`@Q\x90\x15\x15\x81R` \x01a\0\xE1V[a\x01K`\x04\x81V[`@Qc\xFF\xFF\xFF\xFF\x90\x91\x16\x81R` \x01a\0\xE1V[a\x013a\x01n6`\x04a\x18CV[a\x03\x82V[a\x013a\x01\x816`\x04a\x18\xC4V[a\x04\xF7V[a\x013a\x01\x946`\x04a\x19cV[a\x06\xD6V[`\x02Ta\0\xD7V[_Ta\0\xD7V[_a\x01\xB3\x83\x83a\x06\xECV[\x90P[\x92\x91PPV[_a\x01\xB6\x82a\x07^V[_a\x02\x05\x83\x83\x80\x80`\x1F\x01` \x80\x91\x04\x02` \x01`@Q\x90\x81\x01`@R\x80\x93\x92\x91\x90\x81\x81R` \x01\x83\x83\x80\x82\x847_\x92\x01\x91\x90\x91RPa\x08\x0C\x92PPPV[a\x02|W`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`+`$\x82\x01R\x7FHeader array length must be divi`D\x82\x01R\x7Fsible by 80\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`d\x82\x01R`\x84\x01[`@Q\x80\x91\x03\x90\xFD[a\x02\xBA\x85\x85\x80\x80`\x1F\x01` \x80\x91\x04\x02` \x01`@Q\x90\x81\x01`@R\x80\x93\x92\x91\x90\x81\x81R` \x01\x83\x83\x80\x82\x847_\x92\x01\x91\x90\x91RPa\x08\"\x92PPPV[a\x03\x06W`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`\x17`$\x82\x01R\x7FAnchor must be 80 bytes\0\0\0\0\0\0\0\0\0`D\x82\x01R`d\x01a\x02sV[a\x03w\x85\x85\x80\x80`\x1F\x01` \x80\x91\x04\x02` \x01`@Q\x90\x81\x01`@R\x80\x93\x92\x91\x90\x81\x81R` \x01\x83\x83\x80\x82\x847_\x92\x01\x91\x90\x91RPP`@\x80Q` `\x1F\x89\x01\x81\x90\x04\x81\x02\x82\x01\x81\x01\x90\x92R\x87\x81R\x92P\x87\x91P\x86\x90\x81\x90\x84\x01\x83\x82\x80\x82\x847_\x92\x01\x82\x90RP\x92Pa\x08)\x91PPV[\x90P[\x94\x93PPPPV[_a\x03\xC1\x84\x84\x80\x80`\x1F\x01` \x80\x91\x04\x02` \x01`@Q\x90\x81\x01`@R\x80\x93\x92\x91\x90\x81\x81R` \x01\x83\x83\x80\x82\x847_\x92\x01\x91\x90\x91RPa\x08\"\x92PPPV[\x80\x15a\x04\x06WPa\x04\x06\x86\x86\x80\x80`\x1F\x01` \x80\x91\x04\x02` \x01`@Q\x90\x81\x01`@R\x80\x93\x92\x91\x90\x81\x81R` \x01\x83\x83\x80\x82\x847_\x92\x01\x91\x90\x91RPa\x08\"\x92PPPV[a\x04xW`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`.`$\x82\x01R\x7FBad args. Check header and array`D\x82\x01R\x7F byte lengths.\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`d\x82\x01R`\x84\x01a\x02sV[a\x04\xEC\x87\x87\x87\x80\x80`\x1F\x01` \x80\x91\x04\x02` \x01`@Q\x90\x81\x01`@R\x80\x93\x92\x91\x90\x81\x81R` \x01\x83\x83\x80\x82\x847_\x92\x01\x91\x90\x91RPP`@\x80Q` `\x1F\x8B\x01\x81\x90\x04\x81\x02\x82\x01\x81\x01\x90\x92R\x89\x81R\x92P\x89\x91P\x88\x90\x81\x90\x84\x01\x83\x82\x80\x82\x847_\x92\x01\x91\x90\x91RP\x88\x92Pa\x0C\x16\x91PPV[\x97\x96PPPPPPPV[_a\x056\x87\x87\x80\x80`\x1F\x01` \x80\x91\x04\x02` \x01`@Q\x90\x81\x01`@R\x80\x93\x92\x91\x90\x81\x81R` \x01\x83\x83\x80\x82\x847_\x92\x01\x91\x90\x91RPa\x08\"\x92PPPV[\x80\x15a\x05{WPa\x05{\x85\x85\x80\x80`\x1F\x01` \x80\x91\x04\x02` \x01`@Q\x90\x81\x01`@R\x80\x93\x92\x91\x90\x81\x81R` \x01\x83\x83\x80\x82\x847_\x92\x01\x91\x90\x91RPa\x08\"\x92PPPV[\x80\x15a\x05\xC0WPa\x05\xC0\x83\x83\x80\x80`\x1F\x01` \x80\x91\x04\x02` \x01`@Q\x90\x81\x01`@R\x80\x93\x92\x91\x90\x81\x81R` \x01\x83\x83\x80\x82\x847_\x92\x01\x91\x90\x91RPa\x08\x0C\x92PPPV[a\x062W`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`.`$\x82\x01R\x7FBad args. Check header and array`D\x82\x01R\x7F byte lengths.\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`d\x82\x01R`\x84\x01a\x02sV[a\x04\xEC\x87\x87\x80\x80`\x1F\x01` \x80\x91\x04\x02` \x01`@Q\x90\x81\x01`@R\x80\x93\x92\x91\x90\x81\x81R` \x01\x83\x83\x80\x82\x847_\x92\x01\x91\x90\x91RPP`@\x80Q` `\x1F\x8B\x01\x81\x90\x04\x81\x02\x82\x01\x81\x01\x90\x92R\x89\x81R\x92P\x89\x91P\x88\x90\x81\x90\x84\x01\x83\x82\x80\x82\x847_\x92\x01\x91\x90\x91RPP`@\x80Q` `\x1F\x8A\x01\x81\x90\x04\x81\x02\x82\x01\x81\x01\x90\x92R\x88\x81R\x92P\x88\x91P\x87\x90\x81\x90\x84\x01\x83\x82\x80\x82\x847_\x92\x01\x91\x90\x91RPa\x0E\xB3\x92PPPV[_a\x06\xE2\x84\x84\x84a\x11EV[\x90P[\x93\x92PPPV[_\x82\x81[\x83\x81\x10\x15a\x07\x10W_\x91\x82R`\x03` R`@\x90\x91 T\x90`\x01\x01a\x06\xF0V[P\x80a\x01\xB3W`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`\x10`$\x82\x01R\x7FUnknown ancestor\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`D\x82\x01R`d\x01a\x02sV[_\x80\x82\x81[a\x07o`\x04`\x01a\x19\xB9V[c\xFF\xFF\xFF\xFF\x16\x81\x10\x15a\x07\xC3W_\x82\x81R`\x04` R`@\x81 T\x93P\x83\x90\x03a\x07\xA8W_\x91\x82R`\x03` R`@\x90\x91 T\x90a\x07\xBBV[a\x07\xB2\x81\x84a\x19\xD5V[\x95\x94PPPPPV[`\x01\x01a\x07cV[P`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`\r`$\x82\x01R\x7FUnknown block\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`D\x82\x01R`d\x01a\x02sV[_`P\x82Qa\x08\x1B\x91\x90a\x1A\x15V[\x15\x92\x91PPV[Q`P\x14\x90V[__a\x084\x85a\x11\x86V[\x90P_a\x08@\x82a\x07^V[\x90P_a\x08L\x86a\x12^V[\x90P\x84\x80a\x08aWP\x80a\x08_\x88a\x12^V[\x14[a\x08\xD2W`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`$\x80\x82\x01R\x7FUnexpected retarget on external `D\x82\x01R\x7Fcall\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`d\x82\x01R`\x84\x01a\x02sV[\x85Q_\x90\x81\x90\x81[\x81\x81\x10\x15a\x0B\xD3Wa\x08\xED`P\x82a\x1A(V[a\x08\xF8\x90`\x01a\x19\xD5V[a\t\x02\x90\x87a\x19\xD5V[\x93Pa\t\x10\x8A\x82`Pa\x12iV[_\x81\x81R`\x03` R`@\x90 T\x90\x93Pa\n\xE6W\x84a\nf\x84_\x81\x90P`\x08\x81~\xFF\0\xFF\0\xFF\0\xFF\0\xFF\0\xFF\0\xFF\0\xFF\0\xFF\0\xFF\0\xFF\0\xFF\0\xFF\0\xFF\0\xFF\0\xFF\x16\x90\x1B`\x08\x82\x90\x1C~\xFF\0\xFF\0\xFF\0\xFF\0\xFF\0\xFF\0\xFF\0\xFF\0\xFF\0\xFF\0\xFF\0\xFF\0\xFF\0\xFF\0\xFF\0\xFF\x16\x17\x90P`\x10\x81}\xFF\xFF\0\0\xFF\xFF\0\0\xFF\xFF\0\0\xFF\xFF\0\0\xFF\xFF\0\0\xFF\xFF\0\0\xFF\xFF\0\0\xFF\xFF\x16\x90\x1B`\x10\x82\x90\x1C}\xFF\xFF\0\0\xFF\xFF\0\0\xFF\xFF\0\0\xFF\xFF\0\0\xFF\xFF\0\0\xFF\xFF\0\0\xFF\xFF\0\0\xFF\xFF\x16\x17\x90P` \x81{\xFF\xFF\xFF\xFF\0\0\0\0\xFF\xFF\xFF\xFF\0\0\0\0\xFF\xFF\xFF\xFF\0\0\0\0\xFF\xFF\xFF\xFF\x16\x90\x1B` \x82\x90\x1C{\xFF\xFF\xFF\xFF\0\0\0\0\xFF\xFF\xFF\xFF\0\0\0\0\xFF\xFF\xFF\xFF\0\0\0\0\xFF\xFF\xFF\xFF\x16\x17\x90P`@\x81w\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\0\0\0\0\0\0\0\0\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x90\x1B`@\x82\x90\x1Cw\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\0\0\0\0\0\0\0\0\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x17\x90P`\x80\x81\x90\x1B`\x80\x82\x90\x1C\x17\x90P\x91\x90PV[\x11\x15a\n\xB4W`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`\x1B`$\x82\x01R\x7FHeader work is insufficient\0\0\0\0\0`D\x82\x01R`d\x01a\x02sV[_\x83\x81R`\x03` R`@\x90 \x87\x90Ua\n\xCF`\x04\x85a\x1A\x15V[_\x03a\n\xE6W_\x83\x81R`\x04` R`@\x90 \x84\x90U[\x84a\n\xF1\x8B\x83a\x12\x8EV[\x14a\x0B>W`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`\x1B`$\x82\x01R\x7FTarget changed unexpectedly\0\0\0\0\0`D\x82\x01R`d\x01a\x02sV[\x86a\x0BI\x8B\x83a\x13'V[\x14a\x0B\xBCW`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`&`$\x82\x01R\x7FHeaders do not form a consistent`D\x82\x01R\x7F chain\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`d\x82\x01R`\x84\x01a\x02sV[\x82\x96P`P\x81a\x0B\xCC\x91\x90a\x19\xD5V[\x90Pa\x08\xDAV[P\x81a\x0B\xDE\x8Ba\x11\x86V[`@Q\x7F\xF9\x0EO\x1D\x9C\xD0\xDDU\xE39A\x1C\xBC\x9B\x15$\x820|:#\xEDdq^J(X\xF6A\xA3\xF5\x90_\x90\xA3P`\x01\x99\x98PPPPPPPPPV[_a\x07\xE0\x82\x11\x15a\x0C\x8FW`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`3`$\x82\x01R\x7FRequested limit is greater than `D\x82\x01R\x7F1 difficulty period\0\0\0\0\0\0\0\0\0\0\0\0\0`d\x82\x01R`\x84\x01a\x02sV[_a\x0C\x99\x84a\x11\x86V[\x90P_a\x0C\xA5\x86a\x11\x86V[\x90P`\x01T\x81\x14a\x0C\xF8W`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01\x81\x90R`$\x82\x01R\x7FPassed in best is not best known`D\x82\x01R`d\x01a\x02sV[_\x82\x81R`\x03` R`@\x90 Ta\rRW`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`\x13`$\x82\x01R\x7FNew best is unknown\0\0\0\0\0\0\0\0\0\0\0\0\0`D\x82\x01R`d\x01a\x02sV[a\r`\x87`\x01T\x84\x87a\x13?V[a\r\xD2W`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`)`$\x82\x01R\x7FAncestor must be heaviest common`D\x82\x01R\x7F ancestor\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`d\x82\x01R`\x84\x01a\x02sV[\x81a\r\xDE\x88\x88\x88a\x13\xD9V[\x14a\x0EQW`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`3`$\x82\x01R\x7FNew best hash does not have more`D\x82\x01R\x7F work than previous\0\0\0\0\0\0\0\0\0\0\0\0\0`d\x82\x01R`\x84\x01a\x02sV[`\x01\x82\x90U`\x02\x87\x90U_a\x0Ee\x86a\x15jV[\x90P`\x05T\x81\x14a\x0EvW`\x05\x81\x90U[\x87\x83\x83\x7F<\xC1=\xE6M\xF0\xF0#\x96&#\\Q\xA2\xDA%\x1B\xBC\x8C\x85fN\xCC\xE3\x92c\xDA>\xE0?`l`@Q`@Q\x80\x91\x03\x90\xA4P`\x01\x97\x96PPPPPPPV[__a\x0E\xC6a\x0E\xC1\x86a\x11\x86V[a\x07^V[\x90P_a\x0E\xD5a\x0E\xC1\x86a\x11\x86V[\x90Pa\x0E\xE3a\x07\xE0\x82a\x1A\x15V[a\x07\xDF\x14a\x0FYW`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`=`$\x82\x01R\x7FMust provide the last header of `D\x82\x01R\x7Fthe closing difficulty period\0\0\0`d\x82\x01R`\x84\x01a\x02sV[a\x0Fe\x82a\x07\xDFa\x19\xD5V[\x81\x14a\x0F\xD9W`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`(`$\x82\x01R\x7FMust provide exactly 1 difficult`D\x82\x01R\x7Fy period\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`d\x82\x01R`\x84\x01a\x02sV[a\x0F\xE2\x85a\x15jV[a\x0F\xEB\x87a\x15jV[\x14a\x10^W`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`'`$\x82\x01R\x7FPeriod header difficulties do no`D\x82\x01R\x7Ft match\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`d\x82\x01R`\x84\x01a\x02sV[_a\x10h\x85a\x12^V[\x90P_a\x10\x9Aa\x10w\x89a\x12^V[a\x10\x80\x8Aa\x15|V[c\xFF\xFF\xFF\xFF\x16a\x10\x8F\x8Aa\x15|V[c\xFF\xFF\xFF\xFF\x16a\x15\xAFV[\x90P\x81\x81\x83\x16\x14a\x10\xEDW`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`\x19`$\x82\x01R\x7FInvalid retarget provided\0\0\0\0\0\0\0`D\x82\x01R`d\x01a\x02sV[_a\x10\xF7\x89a\x15jV[\x90P\x80`\x06T\x14\x15\x80\x15a\x11!WPa\x07\xE0a\x11\x14`\x01Ta\x07^V[a\x11\x1E\x91\x90a\x1A;V[\x84\x11[\x15a\x11,W`\x06\x81\x90U[a\x118\x88\x88`\x01a\x08)V[\x99\x98PPPPPPPPPV[_\x82\x81[\x83\x81\x10\x15a\x11{W\x85\x82\x03a\x11cW`\x01\x92PPPa\x06\xE5V[_\x91\x82R`\x03` R`@\x90\x91 T\x90`\x01\x01a\x11IV[P_\x95\x94PPPPPV[_`\x02\x80\x83`@Qa\x11\x98\x91\x90a\x1ANV[` `@Q\x80\x83\x03\x81\x85Z\xFA\x15\x80\x15a\x11\xB3W=__>=_\xFD[PPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90a\x11\xD6\x91\x90a\x1AdV[`@Q` \x01a\x11\xE8\x91\x81R` \x01\x90V[`@\x80Q\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xE0\x81\x84\x03\x01\x81R\x90\x82\x90Ra\x12 \x91a\x1ANV[` `@Q\x80\x83\x03\x81\x85Z\xFA\x15\x80\x15a\x12;W=__>=_\xFD[PPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90a\x01\xB6\x91\x90a\x1AdV[_a\x01\xB6\x82_a\x12\x8EV[_` _\x83\x85` \x01\x87\x01`\x02Z\xFAP` _` _`\x02Z\xFAPP_Q\x93\x92PPPV[_\x80a\x12\xA5a\x12\x9E\x84`Ha\x19\xD5V[\x85\x90a\x16AV[`\xE8\x1C\x90P_\x84a\x12\xB7\x85`Ka\x19\xD5V[\x81Q\x81\x10a\x12\xC7Wa\x12\xC7a\x1A{V[\x01` \x01Q`\xF8\x1C\x90P_a\x12\xF9\x83_`\x10\x82b\xFF\xFF\xFF\x16\x90\x1C\x82a\xFF\0\x16`\x10\x84b\xFF\xFF\xFF\x16\x90\x1B\x17\x17\x90P\x91\x90PV[b\xFF\xFF\xFF\x16\x90P_a\x13\x0C`\x03\x84a\x1A\xA8V[`\xFF\x16\x90Pa\x13\x1D\x81a\x01\0a\x1B\xA4V[a\x04\xEC\x90\x83a\x1B\xAFV[_a\x01\xB3a\x136\x83`\x04a\x19\xD5V[\x84\x01` \x01Q\x90V[_\x83\x85\x14\x80\x15a\x13NWP\x82\x85\x14[\x15a\x13[WP`\x01a\x03zV[\x83\x83\x81\x81_[\x86\x81\x10\x15a\x13\xA3W\x89\x83\x14a\x13\x82W_\x83\x81R`\x03` R`@\x90 T\x92\x94P[\x89\x82\x14a\x13\x9BW_\x82\x81R`\x03` R`@\x90 T\x91\x93P[`\x01\x01a\x13aV[P\x82\x84\x03a\x13\xB7W_\x94PPPPPa\x03zV[\x80\x82\x14a\x13\xCAW_\x94PPPPPa\x03zV[P`\x01\x98\x97PPPPPPPPV[__a\x13\xE4\x85a\x07^V[\x90P_a\x13\xF3a\x0E\xC1\x86a\x11\x86V[\x90P_a\x14\x02a\x0E\xC1\x86a\x11\x86V[\x90P\x82\x82\x10\x15\x80\x15a\x14\x14WP\x82\x81\x10\x15[a\x14\x86W`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`0`$\x82\x01R\x7FA descendant height is below the`D\x82\x01R\x7F ancestor height\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`d\x82\x01R`\x84\x01a\x02sV[_a\x14\x93a\x07\xE0\x85a\x1A\x15V[a\x14\x9F\x85a\x07\xE0a\x19\xD5V[a\x14\xA9\x91\x90a\x1A;V[\x90P\x80\x83\x10\x81\x83\x10\x81\x15\x82a\x14\xBBWP\x80[\x15a\x14\xD6Wa\x14\xC9\x89a\x11\x86V[\x96PPPPPPPa\x06\xE5V[\x81\x80\x15a\x14\xE1WP\x80\x15[\x15a\x14\xEFWa\x14\xC9\x88a\x11\x86V[\x81\x80\x15a\x14\xF9WP\x80[\x15a\x15\x1DW\x83\x85\x10\x15a\x15\x14Wa\x15\x0F\x88a\x11\x86V[a\x14\xC9V[a\x14\xC9\x89a\x11\x86V[a\x15&\x88a\x15jV[a\x152a\x07\xE0\x86a\x1A\x15V[a\x15<\x91\x90a\x1B\xAFV[a\x15E\x8Aa\x15jV[a\x15Qa\x07\xE0\x88a\x1A\x15V[a\x15[\x91\x90a\x1B\xAFV[\x10\x15a\x15\x14Wa\x14\xC9\x88a\x11\x86V[_a\x01\xB6a\x15w\x83a\x12^V[a\x16OV[_a\x01\xB6a\x15\x89\x83a\x16vV[`\xD8\x81\x90\x1Cc\xFF\0\xFF\0\x16b\xFF\0\xFF`\xE8\x92\x90\x92\x1C\x91\x90\x91\x16\x17`\x10\x81\x81\x1B\x91\x90\x1C\x17\x90V[_\x80a\x15\xBB\x83\x85a\x16\x82V[\x90Pa\x15\xCBb\x12u\0`\x04a\x16\xDDV[\x81\x10\x15a\x15\xE3Wa\x15\xE0b\x12u\0`\x04a\x16\xDDV[\x90P[a\x15\xF1b\x12u\0`\x04a\x16\xE8V[\x81\x11\x15a\x16\tWa\x16\x06b\x12u\0`\x04a\x16\xE8V[\x90P[_a\x16!\x82a\x16\x1B\x88b\x01\0\0a\x16\xDDV[\x90a\x16\xE8V[\x90Pa\x167b\x01\0\0a\x16\x1B\x83b\x12u\0a\x16\xDDV[\x96\x95PPPPPPV[_a\x01\xB3\x83\x83\x01` \x01Q\x90V[_a\x01\xB6{\xFF\xFF\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x83a\x16\xDDV[_a\x01\xB6\x82`Da\x16AV[_\x82\x82\x11\x15a\x16\xD3W`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`\x1D`$\x82\x01R\x7FUnderflow during subtraction.\0\0\0`D\x82\x01R`d\x01a\x02sV[a\x01\xB3\x82\x84a\x1A;V[_a\x01\xB3\x82\x84a\x1A(V[_\x82_\x03a\x16\xF7WP_a\x01\xB6V[a\x17\x01\x82\x84a\x1B\xAFV[\x90P\x81a\x17\x0E\x84\x83a\x1A(V[\x14a\x01\xB6W`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`\x1F`$\x82\x01R\x7FOverflow during multiplication.\0`D\x82\x01R`d\x01a\x02sV[__`@\x83\x85\x03\x12\x15a\x17lW__\xFD[PP\x805\x92` \x90\x91\x015\x91PV[_` \x82\x84\x03\x12\x15a\x17\x8BW__\xFD[P5\x91\x90PV[__\x83`\x1F\x84\x01\x12a\x17\xA2W__\xFD[P\x815g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\x17\xB9W__\xFD[` \x83\x01\x91P\x83` \x82\x85\x01\x01\x11\x15a\x17\xD0W__\xFD[\x92P\x92\x90PV[____`@\x85\x87\x03\x12\x15a\x17\xEAW__\xFD[\x845g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\x18\0W__\xFD[a\x18\x0C\x87\x82\x88\x01a\x17\x92V[\x90\x95P\x93PP` \x85\x015g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\x18+W__\xFD[a\x187\x87\x82\x88\x01a\x17\x92V[\x95\x98\x94\x97P\x95PPPPV[______`\x80\x87\x89\x03\x12\x15a\x18XW__\xFD[\x865\x95P` \x87\x015g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\x18uW__\xFD[a\x18\x81\x89\x82\x8A\x01a\x17\x92V[\x90\x96P\x94PP`@\x87\x015g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\x18\xA0W__\xFD[a\x18\xAC\x89\x82\x8A\x01a\x17\x92V[\x97\x9A\x96\x99P\x94\x97\x94\x96\x95``\x90\x95\x015\x94\x93PPPPV[______``\x87\x89\x03\x12\x15a\x18\xD9W__\xFD[\x865g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\x18\xEFW__\xFD[a\x18\xFB\x89\x82\x8A\x01a\x17\x92V[\x90\x97P\x95PP` \x87\x015g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\x19\x1AW__\xFD[a\x19&\x89\x82\x8A\x01a\x17\x92V[\x90\x95P\x93PP`@\x87\x015g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\x19EW__\xFD[a\x19Q\x89\x82\x8A\x01a\x17\x92V[\x97\x9A\x96\x99P\x94\x97P\x92\x95\x93\x94\x92PPPV[___``\x84\x86\x03\x12\x15a\x19uW__\xFD[PP\x815\x93` \x83\x015\x93P`@\x90\x92\x015\x91\x90PV[\x7FNH{q\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0_R`\x11`\x04R`$_\xFD[c\xFF\xFF\xFF\xFF\x81\x81\x16\x83\x82\x16\x01\x90\x81\x11\x15a\x01\xB6Wa\x01\xB6a\x19\x8CV[\x80\x82\x01\x80\x82\x11\x15a\x01\xB6Wa\x01\xB6a\x19\x8CV[\x7FNH{q\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0_R`\x12`\x04R`$_\xFD[_\x82a\x1A#Wa\x1A#a\x19\xE8V[P\x06\x90V[_\x82a\x1A6Wa\x1A6a\x19\xE8V[P\x04\x90V[\x81\x81\x03\x81\x81\x11\x15a\x01\xB6Wa\x01\xB6a\x19\x8CV[_\x82Q\x80` \x85\x01\x84^_\x92\x01\x91\x82RP\x91\x90PV[_` \x82\x84\x03\x12\x15a\x1AtW__\xFD[PQ\x91\x90PV[\x7FNH{q\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0_R`2`\x04R`$_\xFD[`\xFF\x82\x81\x16\x82\x82\x16\x03\x90\x81\x11\x15a\x01\xB6Wa\x01\xB6a\x19\x8CV[`\x01\x81[`\x01\x84\x11\x15a\x1A\xFCW\x80\x85\x04\x81\x11\x15a\x1A\xE0Wa\x1A\xE0a\x19\x8CV[`\x01\x84\x16\x15a\x1A\xEEW\x90\x81\x02\x90[`\x01\x93\x90\x93\x1C\x92\x80\x02a\x1A\xC5V[\x93P\x93\x91PPV[_\x82a\x1B\x12WP`\x01a\x01\xB6V[\x81a\x1B\x1EWP_a\x01\xB6V[\x81`\x01\x81\x14a\x1B4W`\x02\x81\x14a\x1B>Wa\x1BZV[`\x01\x91PPa\x01\xB6V[`\xFF\x84\x11\x15a\x1BOWa\x1BOa\x19\x8CV[PP`\x01\x82\x1Ba\x01\xB6V[P` \x83\x10a\x013\x83\x10\x16`N\x84\x10`\x0B\x84\x10\x16\x17\x15a\x1B}WP\x81\x81\na\x01\xB6V[a\x1B\x89_\x19\x84\x84a\x1A\xC1V[\x80_\x19\x04\x82\x11\x15a\x1B\x9CWa\x1B\x9Ca\x19\x8CV[\x02\x93\x92PPPV[_a\x01\xB3\x83\x83a\x1B\x04V[\x80\x82\x02\x81\x15\x82\x82\x04\x84\x14\x17a\x01\xB6Wa\x01\xB6a\x19\x8CV\xFE\xA2dipfsX\"\x12 _\xBF\x15K\xDF\xAA\xDA\xF4\xEA|\xF9\xFD\x90\xB1\x9ER\xD2\x0F\xF8\x93t\xC4\xB3\xC8\xCA\xA9\xF6\x83\xD4\x88\xA1fdsolcC\0\x08\x1B\x003",
    );
    /// The runtime bytecode of the contract, as deployed on the network.
    ///
    /// ```text
    ///0x608060405234801561000f575f5ffd5b50600436106100cf575f3560e01c806370d53c181161007d578063b985621a11610058578063b985621a14610186578063c58242cd14610199578063e3d8d8d8146101a1575f5ffd5b806370d53c181461014357806374c3a3a9146101605780637fa637fc14610173575f5ffd5b806330017b3b116100ad57806330017b3b146100fa57806360b5c3901461010d57806365da41b914610120575f5ffd5b8063113764be146100d35780631910d973146100ea5780632b97be24146100f2575b5f5ffd5b6005545b6040519081526020015b60405180910390f35b6001546100d7565b6006546100d7565b6100d761010836600461175b565b6101a8565b6100d761011b36600461177b565b6101bc565b61013361012e3660046117d7565b6101c6565b60405190151581526020016100e1565b61014b600481565b60405163ffffffff90911681526020016100e1565b61013361016e366004611843565b610382565b6101336101813660046118c4565b6104f7565b610133610194366004611963565b6106d6565b6002546100d7565b5f546100d7565b5f6101b383836106ec565b90505b92915050565b5f6101b68261075e565b5f61020583838080601f0160208091040260200160405190810160405280939291908181526020018383808284375f9201919091525061080c92505050565b61027c5760405162461bcd60e51b815260206004820152602b60248201527f486561646572206172726179206c656e677468206d757374206265206469766960448201527f7369626c6520627920383000000000000000000000000000000000000000000060648201526084015b60405180910390fd5b6102ba85858080601f0160208091040260200160405190810160405280939291908181526020018383808284375f9201919091525061082292505050565b6103065760405162461bcd60e51b815260206004820152601760248201527f416e63686f72206d7573742062652038302062797465730000000000000000006044820152606401610273565b61037785858080601f0160208091040260200160405190810160405280939291908181526020018383808284375f9201919091525050604080516020601f890181900481028201810190925287815292508791508690819084018382808284375f9201829052509250610829915050565b90505b949350505050565b5f6103c184848080601f0160208091040260200160405190810160405280939291908181526020018383808284375f9201919091525061082292505050565b8015610406575061040686868080601f0160208091040260200160405190810160405280939291908181526020018383808284375f9201919091525061082292505050565b6104785760405162461bcd60e51b815260206004820152602e60248201527f42616420617267732e20436865636b2068656164657220616e6420617272617960448201527f2062797465206c656e677468732e0000000000000000000000000000000000006064820152608401610273565b6104ec8787878080601f0160208091040260200160405190810160405280939291908181526020018383808284375f9201919091525050604080516020601f8b0181900481028201810190925289815292508991508890819084018382808284375f92019190915250889250610c16915050565b979650505050505050565b5f61053687878080601f0160208091040260200160405190810160405280939291908181526020018383808284375f9201919091525061082292505050565b801561057b575061057b85858080601f0160208091040260200160405190810160405280939291908181526020018383808284375f9201919091525061082292505050565b80156105c057506105c083838080601f0160208091040260200160405190810160405280939291908181526020018383808284375f9201919091525061080c92505050565b6106325760405162461bcd60e51b815260206004820152602e60248201527f42616420617267732e20436865636b2068656164657220616e6420617272617960448201527f2062797465206c656e677468732e0000000000000000000000000000000000006064820152608401610273565b6104ec87878080601f0160208091040260200160405190810160405280939291908181526020018383808284375f9201919091525050604080516020601f8b0181900481028201810190925289815292508991508890819084018382808284375f9201919091525050604080516020601f8a0181900481028201810190925288815292508891508790819084018382808284375f92019190915250610eb392505050565b5f6106e2848484611145565b90505b9392505050565b5f82815b83811015610710575f9182526003602052604090912054906001016106f0565b50806101b35760405162461bcd60e51b815260206004820152601060248201527f556e6b6e6f776e20616e636573746f72000000000000000000000000000000006044820152606401610273565b5f8082815b61076f600460016119b9565b63ffffffff168110156107c3575f8281526004602052604081205493508390036107a8575f9182526003602052604090912054906107bb565b6107b281846119d5565b95945050505050565b600101610763565b5060405162461bcd60e51b815260206004820152600d60248201527f556e6b6e6f776e20626c6f636b000000000000000000000000000000000000006044820152606401610273565b5f6050825161081b9190611a15565b1592915050565b5160501490565b5f5f61083485611186565b90505f6108408261075e565b90505f61084c8661125e565b9050848061086157508061085f8861125e565b145b6108d25760405162461bcd60e51b8152602060048201526024808201527f556e6578706563746564207265746172676574206f6e2065787465726e616c2060448201527f63616c6c000000000000000000000000000000000000000000000000000000006064820152608401610273565b85515f908190815b81811015610bd3576108ed605082611a28565b6108f89060016119d5565b61090290876119d5565b93506109108a826050611269565b5f81815260036020526040902054909350610ae65784610a66845f8190506008817eff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff16901b600882901c7eff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff161790506010817dffff0000ffff0000ffff0000ffff0000ffff0000ffff0000ffff0000ffff16901b601082901c7dffff0000ffff0000ffff0000ffff0000ffff0000ffff0000ffff0000ffff161790506020817bffffffff00000000ffffffff00000000ffffffff00000000ffffffff16901b602082901c7bffffffff00000000ffffffff00000000ffffffff00000000ffffffff1617905060408177ffffffffffffffff0000000000000000ffffffffffffffff16901b604082901c77ffffffffffffffff0000000000000000ffffffffffffffff16179050608081901b608082901c179050919050565b1115610ab45760405162461bcd60e51b815260206004820152601b60248201527f48656164657220776f726b20697320696e73756666696369656e7400000000006044820152606401610273565b5f838152600360205260409020879055610acf600485611a15565b5f03610ae6575f8381526004602052604090208490555b84610af18b8361128e565b14610b3e5760405162461bcd60e51b815260206004820152601b60248201527f546172676574206368616e67656420756e65787065637465646c7900000000006044820152606401610273565b86610b498b83611327565b14610bbc5760405162461bcd60e51b815260206004820152602660248201527f4865616465727320646f206e6f7420666f726d206120636f6e73697374656e7460448201527f20636861696e00000000000000000000000000000000000000000000000000006064820152608401610273565b829650605081610bcc91906119d5565b90506108da565b5081610bde8b611186565b6040517ff90e4f1d9cd0dd55e339411cbc9b152482307c3a23ed64715e4a2858f641a3f5905f90a35060019998505050505050505050565b5f6107e0821115610c8f5760405162461bcd60e51b815260206004820152603360248201527f526571756573746564206c696d69742069732067726561746572207468616e2060448201527f3120646966666963756c747920706572696f64000000000000000000000000006064820152608401610273565b5f610c9984611186565b90505f610ca586611186565b90506001548114610cf85760405162461bcd60e51b815260206004820181905260248201527f50617373656420696e2062657374206973206e6f742062657374206b6e6f776e6044820152606401610273565b5f82815260036020526040902054610d525760405162461bcd60e51b815260206004820152601360248201527f4e6577206265737420697320756e6b6e6f776e000000000000000000000000006044820152606401610273565b610d6087600154848761133f565b610dd25760405162461bcd60e51b815260206004820152602960248201527f416e636573746f72206d75737420626520686561766965737420636f6d6d6f6e60448201527f20616e636573746f7200000000000000000000000000000000000000000000006064820152608401610273565b81610dde8888886113d9565b14610e515760405162461bcd60e51b815260206004820152603360248201527f4e65772062657374206861736820646f6573206e6f742068617665206d6f726560448201527f20776f726b207468616e2070726576696f7573000000000000000000000000006064820152608401610273565b600182905560028790555f610e658661156a565b90506005548114610e765760058190555b8783837f3cc13de64df0f0239626235c51a2da251bbc8c85664ecce39263da3ee03f606c60405160405180910390a4506001979650505050505050565b5f5f610ec6610ec186611186565b61075e565b90505f610ed5610ec186611186565b9050610ee36107e082611a15565b6107df14610f595760405162461bcd60e51b815260206004820152603d60248201527f4d7573742070726f7669646520746865206c61737420686561646572206f662060448201527f74686520636c6f73696e6720646966666963756c747920706572696f640000006064820152608401610273565b610f65826107df6119d5565b8114610fd95760405162461bcd60e51b815260206004820152602860248201527f4d7573742070726f766964652065786163746c79203120646966666963756c7460448201527f7920706572696f640000000000000000000000000000000000000000000000006064820152608401610273565b610fe28561156a565b610feb8761156a565b1461105e5760405162461bcd60e51b815260206004820152602760248201527f506572696f642068656164657220646966666963756c7469657320646f206e6f60448201527f74206d61746368000000000000000000000000000000000000000000000000006064820152608401610273565b5f6110688561125e565b90505f61109a6110778961125e565b6110808a61157c565b63ffffffff1661108f8a61157c565b63ffffffff166115af565b905081818316146110ed5760405162461bcd60e51b815260206004820152601960248201527f496e76616c69642072657461726765742070726f7669646564000000000000006044820152606401610273565b5f6110f78961156a565b9050806006541415801561112157506107e061111460015461075e565b61111e9190611a3b565b84115b1561112c5760068190555b61113888886001610829565b9998505050505050505050565b5f82815b8381101561117b57858203611163576001925050506106e5565b5f918252600360205260409091205490600101611149565b505f95945050505050565b5f600280836040516111989190611a4e565b602060405180830381855afa1580156111b3573d5f5f3e3d5ffd5b5050506040513d601f19601f820116820180604052508101906111d69190611a64565b6040516020016111e891815260200190565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529082905261122091611a4e565b602060405180830381855afa15801561123b573d5f5f3e3d5ffd5b5050506040513d601f19601f820116820180604052508101906101b69190611a64565b5f6101b6825f61128e565b5f60205f8385602001870160025afa5060205f60205f60025afa50505f519392505050565b5f806112a561129e8460486119d5565b8590611641565b60e81c90505f846112b785604b6119d5565b815181106112c7576112c7611a7b565b016020015160f81c90505f6112f9835f60108262ffffff16901c8261ff001660108462ffffff16901b17179050919050565b62ffffff1690505f61130c600384611aa8565b60ff16905061131d81610100611ba4565b6104ec9083611baf565b5f6101b36113368360046119d5565b84016020015190565b5f838514801561134e57508285145b1561135b5750600161037a565b838381815f5b868110156113a357898314611382575f838152600360205260409020549294505b89821461139b575f828152600360205260409020549193505b600101611361565b508284036113b7575f94505050505061037a565b8082146113ca575f94505050505061037a565b50600198975050505050505050565b5f5f6113e48561075e565b90505f6113f3610ec186611186565b90505f611402610ec186611186565b90508282101580156114145750828110155b6114865760405162461bcd60e51b815260206004820152603060248201527f412064657363656e64616e74206865696768742069732062656c6f772074686560448201527f20616e636573746f7220686569676874000000000000000000000000000000006064820152608401610273565b5f6114936107e085611a15565b61149f856107e06119d5565b6114a99190611a3b565b90508083108183108115826114bb5750805b156114d6576114c989611186565b96505050505050506106e5565b8180156114e1575080155b156114ef576114c988611186565b8180156114f95750805b1561151d57838510156115145761150f88611186565b6114c9565b6114c989611186565b6115268861156a565b6115326107e086611a15565b61153c9190611baf565b6115458a61156a565b6115516107e088611a15565b61155b9190611baf565b1015611514576114c988611186565b5f6101b66115778361125e565b61164f565b5f6101b661158983611676565b60d881901c63ff00ff001662ff00ff60e89290921c9190911617601081811b91901c1790565b5f806115bb8385611682565b90506115cb6212750060046116dd565b8110156115e3576115e06212750060046116dd565b90505b6115f16212750060046116e8565b811115611609576116066212750060046116e8565b90505b5f6116218261161b88620100006116dd565b906116e8565b90506116376201000061161b83621275006116dd565b9695505050505050565b5f6101b38383016020015190565b5f6101b67bffff0000000000000000000000000000000000000000000000000000836116dd565b5f6101b6826044611641565b5f828211156116d35760405162461bcd60e51b815260206004820152601d60248201527f556e646572666c6f7720647572696e67207375627472616374696f6e2e0000006044820152606401610273565b6101b38284611a3b565b5f6101b38284611a28565b5f825f036116f757505f6101b6565b6117018284611baf565b90508161170e8483611a28565b146101b65760405162461bcd60e51b815260206004820152601f60248201527f4f766572666c6f7720647572696e67206d756c7469706c69636174696f6e2e006044820152606401610273565b5f5f6040838503121561176c575f5ffd5b50508035926020909101359150565b5f6020828403121561178b575f5ffd5b5035919050565b5f5f83601f8401126117a2575f5ffd5b50813567ffffffffffffffff8111156117b9575f5ffd5b6020830191508360208285010111156117d0575f5ffd5b9250929050565b5f5f5f5f604085870312156117ea575f5ffd5b843567ffffffffffffffff811115611800575f5ffd5b61180c87828801611792565b909550935050602085013567ffffffffffffffff81111561182b575f5ffd5b61183787828801611792565b95989497509550505050565b5f5f5f5f5f5f60808789031215611858575f5ffd5b86359550602087013567ffffffffffffffff811115611875575f5ffd5b61188189828a01611792565b909650945050604087013567ffffffffffffffff8111156118a0575f5ffd5b6118ac89828a01611792565b979a9699509497949695606090950135949350505050565b5f5f5f5f5f5f606087890312156118d9575f5ffd5b863567ffffffffffffffff8111156118ef575f5ffd5b6118fb89828a01611792565b909750955050602087013567ffffffffffffffff81111561191a575f5ffd5b61192689828a01611792565b909550935050604087013567ffffffffffffffff811115611945575f5ffd5b61195189828a01611792565b979a9699509497509295939492505050565b5f5f5f60608486031215611975575f5ffd5b505081359360208301359350604090920135919050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52601160045260245ffd5b63ffffffff81811683821601908111156101b6576101b661198c565b808201808211156101b6576101b661198c565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52601260045260245ffd5b5f82611a2357611a236119e8565b500690565b5f82611a3657611a366119e8565b500490565b818103818111156101b6576101b661198c565b5f82518060208501845e5f920191825250919050565b5f60208284031215611a74575f5ffd5b5051919050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52603260045260245ffd5b60ff82811682821603908111156101b6576101b661198c565b6001815b6001841115611afc57808504811115611ae057611ae061198c565b6001841615611aee57908102905b60019390931c928002611ac5565b935093915050565b5f82611b12575060016101b6565b81611b1e57505f6101b6565b8160018114611b345760028114611b3e57611b5a565b60019150506101b6565b60ff841115611b4f57611b4f61198c565b50506001821b6101b6565b5060208310610133831016604e8410600b8410161715611b7d575081810a6101b6565b611b895f198484611ac1565b805f1904821115611b9c57611b9c61198c565b029392505050565b5f6101b38383611b04565b80820281158282048414176101b6576101b661198c56fea26469706673582212205fbf154bdfaadaf4ea7cf9fd90b19e52d20ff89374c4b3c8caa9f683d488a16664736f6c634300081b0033
    /// ```
    #[rustfmt::skip]
    #[allow(clippy::all)]
    pub static DEPLOYED_BYTECODE: alloy_sol_types::private::Bytes = alloy_sol_types::private::Bytes::from_static(
        b"`\x80`@R4\x80\x15a\0\x0FW__\xFD[P`\x046\x10a\0\xCFW_5`\xE0\x1C\x80cp\xD5<\x18\x11a\0}W\x80c\xB9\x85b\x1A\x11a\0XW\x80c\xB9\x85b\x1A\x14a\x01\x86W\x80c\xC5\x82B\xCD\x14a\x01\x99W\x80c\xE3\xD8\xD8\xD8\x14a\x01\xA1W__\xFD[\x80cp\xD5<\x18\x14a\x01CW\x80ct\xC3\xA3\xA9\x14a\x01`W\x80c\x7F\xA67\xFC\x14a\x01sW__\xFD[\x80c0\x01{;\x11a\0\xADW\x80c0\x01{;\x14a\0\xFAW\x80c`\xB5\xC3\x90\x14a\x01\rW\x80ce\xDAA\xB9\x14a\x01 W__\xFD[\x80c\x117d\xBE\x14a\0\xD3W\x80c\x19\x10\xD9s\x14a\0\xEAW\x80c+\x97\xBE$\x14a\0\xF2W[__\xFD[`\x05T[`@Q\x90\x81R` \x01[`@Q\x80\x91\x03\x90\xF3[`\x01Ta\0\xD7V[`\x06Ta\0\xD7V[a\0\xD7a\x01\x086`\x04a\x17[V[a\x01\xA8V[a\0\xD7a\x01\x1B6`\x04a\x17{V[a\x01\xBCV[a\x013a\x01.6`\x04a\x17\xD7V[a\x01\xC6V[`@Q\x90\x15\x15\x81R` \x01a\0\xE1V[a\x01K`\x04\x81V[`@Qc\xFF\xFF\xFF\xFF\x90\x91\x16\x81R` \x01a\0\xE1V[a\x013a\x01n6`\x04a\x18CV[a\x03\x82V[a\x013a\x01\x816`\x04a\x18\xC4V[a\x04\xF7V[a\x013a\x01\x946`\x04a\x19cV[a\x06\xD6V[`\x02Ta\0\xD7V[_Ta\0\xD7V[_a\x01\xB3\x83\x83a\x06\xECV[\x90P[\x92\x91PPV[_a\x01\xB6\x82a\x07^V[_a\x02\x05\x83\x83\x80\x80`\x1F\x01` \x80\x91\x04\x02` \x01`@Q\x90\x81\x01`@R\x80\x93\x92\x91\x90\x81\x81R` \x01\x83\x83\x80\x82\x847_\x92\x01\x91\x90\x91RPa\x08\x0C\x92PPPV[a\x02|W`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`+`$\x82\x01R\x7FHeader array length must be divi`D\x82\x01R\x7Fsible by 80\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`d\x82\x01R`\x84\x01[`@Q\x80\x91\x03\x90\xFD[a\x02\xBA\x85\x85\x80\x80`\x1F\x01` \x80\x91\x04\x02` \x01`@Q\x90\x81\x01`@R\x80\x93\x92\x91\x90\x81\x81R` \x01\x83\x83\x80\x82\x847_\x92\x01\x91\x90\x91RPa\x08\"\x92PPPV[a\x03\x06W`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`\x17`$\x82\x01R\x7FAnchor must be 80 bytes\0\0\0\0\0\0\0\0\0`D\x82\x01R`d\x01a\x02sV[a\x03w\x85\x85\x80\x80`\x1F\x01` \x80\x91\x04\x02` \x01`@Q\x90\x81\x01`@R\x80\x93\x92\x91\x90\x81\x81R` \x01\x83\x83\x80\x82\x847_\x92\x01\x91\x90\x91RPP`@\x80Q` `\x1F\x89\x01\x81\x90\x04\x81\x02\x82\x01\x81\x01\x90\x92R\x87\x81R\x92P\x87\x91P\x86\x90\x81\x90\x84\x01\x83\x82\x80\x82\x847_\x92\x01\x82\x90RP\x92Pa\x08)\x91PPV[\x90P[\x94\x93PPPPV[_a\x03\xC1\x84\x84\x80\x80`\x1F\x01` \x80\x91\x04\x02` \x01`@Q\x90\x81\x01`@R\x80\x93\x92\x91\x90\x81\x81R` \x01\x83\x83\x80\x82\x847_\x92\x01\x91\x90\x91RPa\x08\"\x92PPPV[\x80\x15a\x04\x06WPa\x04\x06\x86\x86\x80\x80`\x1F\x01` \x80\x91\x04\x02` \x01`@Q\x90\x81\x01`@R\x80\x93\x92\x91\x90\x81\x81R` \x01\x83\x83\x80\x82\x847_\x92\x01\x91\x90\x91RPa\x08\"\x92PPPV[a\x04xW`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`.`$\x82\x01R\x7FBad args. Check header and array`D\x82\x01R\x7F byte lengths.\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`d\x82\x01R`\x84\x01a\x02sV[a\x04\xEC\x87\x87\x87\x80\x80`\x1F\x01` \x80\x91\x04\x02` \x01`@Q\x90\x81\x01`@R\x80\x93\x92\x91\x90\x81\x81R` \x01\x83\x83\x80\x82\x847_\x92\x01\x91\x90\x91RPP`@\x80Q` `\x1F\x8B\x01\x81\x90\x04\x81\x02\x82\x01\x81\x01\x90\x92R\x89\x81R\x92P\x89\x91P\x88\x90\x81\x90\x84\x01\x83\x82\x80\x82\x847_\x92\x01\x91\x90\x91RP\x88\x92Pa\x0C\x16\x91PPV[\x97\x96PPPPPPPV[_a\x056\x87\x87\x80\x80`\x1F\x01` \x80\x91\x04\x02` \x01`@Q\x90\x81\x01`@R\x80\x93\x92\x91\x90\x81\x81R` \x01\x83\x83\x80\x82\x847_\x92\x01\x91\x90\x91RPa\x08\"\x92PPPV[\x80\x15a\x05{WPa\x05{\x85\x85\x80\x80`\x1F\x01` \x80\x91\x04\x02` \x01`@Q\x90\x81\x01`@R\x80\x93\x92\x91\x90\x81\x81R` \x01\x83\x83\x80\x82\x847_\x92\x01\x91\x90\x91RPa\x08\"\x92PPPV[\x80\x15a\x05\xC0WPa\x05\xC0\x83\x83\x80\x80`\x1F\x01` \x80\x91\x04\x02` \x01`@Q\x90\x81\x01`@R\x80\x93\x92\x91\x90\x81\x81R` \x01\x83\x83\x80\x82\x847_\x92\x01\x91\x90\x91RPa\x08\x0C\x92PPPV[a\x062W`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`.`$\x82\x01R\x7FBad args. Check header and array`D\x82\x01R\x7F byte lengths.\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`d\x82\x01R`\x84\x01a\x02sV[a\x04\xEC\x87\x87\x80\x80`\x1F\x01` \x80\x91\x04\x02` \x01`@Q\x90\x81\x01`@R\x80\x93\x92\x91\x90\x81\x81R` \x01\x83\x83\x80\x82\x847_\x92\x01\x91\x90\x91RPP`@\x80Q` `\x1F\x8B\x01\x81\x90\x04\x81\x02\x82\x01\x81\x01\x90\x92R\x89\x81R\x92P\x89\x91P\x88\x90\x81\x90\x84\x01\x83\x82\x80\x82\x847_\x92\x01\x91\x90\x91RPP`@\x80Q` `\x1F\x8A\x01\x81\x90\x04\x81\x02\x82\x01\x81\x01\x90\x92R\x88\x81R\x92P\x88\x91P\x87\x90\x81\x90\x84\x01\x83\x82\x80\x82\x847_\x92\x01\x91\x90\x91RPa\x0E\xB3\x92PPPV[_a\x06\xE2\x84\x84\x84a\x11EV[\x90P[\x93\x92PPPV[_\x82\x81[\x83\x81\x10\x15a\x07\x10W_\x91\x82R`\x03` R`@\x90\x91 T\x90`\x01\x01a\x06\xF0V[P\x80a\x01\xB3W`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`\x10`$\x82\x01R\x7FUnknown ancestor\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`D\x82\x01R`d\x01a\x02sV[_\x80\x82\x81[a\x07o`\x04`\x01a\x19\xB9V[c\xFF\xFF\xFF\xFF\x16\x81\x10\x15a\x07\xC3W_\x82\x81R`\x04` R`@\x81 T\x93P\x83\x90\x03a\x07\xA8W_\x91\x82R`\x03` R`@\x90\x91 T\x90a\x07\xBBV[a\x07\xB2\x81\x84a\x19\xD5V[\x95\x94PPPPPV[`\x01\x01a\x07cV[P`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`\r`$\x82\x01R\x7FUnknown block\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`D\x82\x01R`d\x01a\x02sV[_`P\x82Qa\x08\x1B\x91\x90a\x1A\x15V[\x15\x92\x91PPV[Q`P\x14\x90V[__a\x084\x85a\x11\x86V[\x90P_a\x08@\x82a\x07^V[\x90P_a\x08L\x86a\x12^V[\x90P\x84\x80a\x08aWP\x80a\x08_\x88a\x12^V[\x14[a\x08\xD2W`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`$\x80\x82\x01R\x7FUnexpected retarget on external `D\x82\x01R\x7Fcall\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`d\x82\x01R`\x84\x01a\x02sV[\x85Q_\x90\x81\x90\x81[\x81\x81\x10\x15a\x0B\xD3Wa\x08\xED`P\x82a\x1A(V[a\x08\xF8\x90`\x01a\x19\xD5V[a\t\x02\x90\x87a\x19\xD5V[\x93Pa\t\x10\x8A\x82`Pa\x12iV[_\x81\x81R`\x03` R`@\x90 T\x90\x93Pa\n\xE6W\x84a\nf\x84_\x81\x90P`\x08\x81~\xFF\0\xFF\0\xFF\0\xFF\0\xFF\0\xFF\0\xFF\0\xFF\0\xFF\0\xFF\0\xFF\0\xFF\0\xFF\0\xFF\0\xFF\0\xFF\x16\x90\x1B`\x08\x82\x90\x1C~\xFF\0\xFF\0\xFF\0\xFF\0\xFF\0\xFF\0\xFF\0\xFF\0\xFF\0\xFF\0\xFF\0\xFF\0\xFF\0\xFF\0\xFF\0\xFF\x16\x17\x90P`\x10\x81}\xFF\xFF\0\0\xFF\xFF\0\0\xFF\xFF\0\0\xFF\xFF\0\0\xFF\xFF\0\0\xFF\xFF\0\0\xFF\xFF\0\0\xFF\xFF\x16\x90\x1B`\x10\x82\x90\x1C}\xFF\xFF\0\0\xFF\xFF\0\0\xFF\xFF\0\0\xFF\xFF\0\0\xFF\xFF\0\0\xFF\xFF\0\0\xFF\xFF\0\0\xFF\xFF\x16\x17\x90P` \x81{\xFF\xFF\xFF\xFF\0\0\0\0\xFF\xFF\xFF\xFF\0\0\0\0\xFF\xFF\xFF\xFF\0\0\0\0\xFF\xFF\xFF\xFF\x16\x90\x1B` \x82\x90\x1C{\xFF\xFF\xFF\xFF\0\0\0\0\xFF\xFF\xFF\xFF\0\0\0\0\xFF\xFF\xFF\xFF\0\0\0\0\xFF\xFF\xFF\xFF\x16\x17\x90P`@\x81w\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\0\0\0\0\0\0\0\0\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x90\x1B`@\x82\x90\x1Cw\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\0\0\0\0\0\0\0\0\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x17\x90P`\x80\x81\x90\x1B`\x80\x82\x90\x1C\x17\x90P\x91\x90PV[\x11\x15a\n\xB4W`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`\x1B`$\x82\x01R\x7FHeader work is insufficient\0\0\0\0\0`D\x82\x01R`d\x01a\x02sV[_\x83\x81R`\x03` R`@\x90 \x87\x90Ua\n\xCF`\x04\x85a\x1A\x15V[_\x03a\n\xE6W_\x83\x81R`\x04` R`@\x90 \x84\x90U[\x84a\n\xF1\x8B\x83a\x12\x8EV[\x14a\x0B>W`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`\x1B`$\x82\x01R\x7FTarget changed unexpectedly\0\0\0\0\0`D\x82\x01R`d\x01a\x02sV[\x86a\x0BI\x8B\x83a\x13'V[\x14a\x0B\xBCW`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`&`$\x82\x01R\x7FHeaders do not form a consistent`D\x82\x01R\x7F chain\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`d\x82\x01R`\x84\x01a\x02sV[\x82\x96P`P\x81a\x0B\xCC\x91\x90a\x19\xD5V[\x90Pa\x08\xDAV[P\x81a\x0B\xDE\x8Ba\x11\x86V[`@Q\x7F\xF9\x0EO\x1D\x9C\xD0\xDDU\xE39A\x1C\xBC\x9B\x15$\x820|:#\xEDdq^J(X\xF6A\xA3\xF5\x90_\x90\xA3P`\x01\x99\x98PPPPPPPPPV[_a\x07\xE0\x82\x11\x15a\x0C\x8FW`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`3`$\x82\x01R\x7FRequested limit is greater than `D\x82\x01R\x7F1 difficulty period\0\0\0\0\0\0\0\0\0\0\0\0\0`d\x82\x01R`\x84\x01a\x02sV[_a\x0C\x99\x84a\x11\x86V[\x90P_a\x0C\xA5\x86a\x11\x86V[\x90P`\x01T\x81\x14a\x0C\xF8W`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01\x81\x90R`$\x82\x01R\x7FPassed in best is not best known`D\x82\x01R`d\x01a\x02sV[_\x82\x81R`\x03` R`@\x90 Ta\rRW`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`\x13`$\x82\x01R\x7FNew best is unknown\0\0\0\0\0\0\0\0\0\0\0\0\0`D\x82\x01R`d\x01a\x02sV[a\r`\x87`\x01T\x84\x87a\x13?V[a\r\xD2W`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`)`$\x82\x01R\x7FAncestor must be heaviest common`D\x82\x01R\x7F ancestor\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`d\x82\x01R`\x84\x01a\x02sV[\x81a\r\xDE\x88\x88\x88a\x13\xD9V[\x14a\x0EQW`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`3`$\x82\x01R\x7FNew best hash does not have more`D\x82\x01R\x7F work than previous\0\0\0\0\0\0\0\0\0\0\0\0\0`d\x82\x01R`\x84\x01a\x02sV[`\x01\x82\x90U`\x02\x87\x90U_a\x0Ee\x86a\x15jV[\x90P`\x05T\x81\x14a\x0EvW`\x05\x81\x90U[\x87\x83\x83\x7F<\xC1=\xE6M\xF0\xF0#\x96&#\\Q\xA2\xDA%\x1B\xBC\x8C\x85fN\xCC\xE3\x92c\xDA>\xE0?`l`@Q`@Q\x80\x91\x03\x90\xA4P`\x01\x97\x96PPPPPPPV[__a\x0E\xC6a\x0E\xC1\x86a\x11\x86V[a\x07^V[\x90P_a\x0E\xD5a\x0E\xC1\x86a\x11\x86V[\x90Pa\x0E\xE3a\x07\xE0\x82a\x1A\x15V[a\x07\xDF\x14a\x0FYW`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`=`$\x82\x01R\x7FMust provide the last header of `D\x82\x01R\x7Fthe closing difficulty period\0\0\0`d\x82\x01R`\x84\x01a\x02sV[a\x0Fe\x82a\x07\xDFa\x19\xD5V[\x81\x14a\x0F\xD9W`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`(`$\x82\x01R\x7FMust provide exactly 1 difficult`D\x82\x01R\x7Fy period\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`d\x82\x01R`\x84\x01a\x02sV[a\x0F\xE2\x85a\x15jV[a\x0F\xEB\x87a\x15jV[\x14a\x10^W`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`'`$\x82\x01R\x7FPeriod header difficulties do no`D\x82\x01R\x7Ft match\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`d\x82\x01R`\x84\x01a\x02sV[_a\x10h\x85a\x12^V[\x90P_a\x10\x9Aa\x10w\x89a\x12^V[a\x10\x80\x8Aa\x15|V[c\xFF\xFF\xFF\xFF\x16a\x10\x8F\x8Aa\x15|V[c\xFF\xFF\xFF\xFF\x16a\x15\xAFV[\x90P\x81\x81\x83\x16\x14a\x10\xEDW`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`\x19`$\x82\x01R\x7FInvalid retarget provided\0\0\0\0\0\0\0`D\x82\x01R`d\x01a\x02sV[_a\x10\xF7\x89a\x15jV[\x90P\x80`\x06T\x14\x15\x80\x15a\x11!WPa\x07\xE0a\x11\x14`\x01Ta\x07^V[a\x11\x1E\x91\x90a\x1A;V[\x84\x11[\x15a\x11,W`\x06\x81\x90U[a\x118\x88\x88`\x01a\x08)V[\x99\x98PPPPPPPPPV[_\x82\x81[\x83\x81\x10\x15a\x11{W\x85\x82\x03a\x11cW`\x01\x92PPPa\x06\xE5V[_\x91\x82R`\x03` R`@\x90\x91 T\x90`\x01\x01a\x11IV[P_\x95\x94PPPPPV[_`\x02\x80\x83`@Qa\x11\x98\x91\x90a\x1ANV[` `@Q\x80\x83\x03\x81\x85Z\xFA\x15\x80\x15a\x11\xB3W=__>=_\xFD[PPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90a\x11\xD6\x91\x90a\x1AdV[`@Q` \x01a\x11\xE8\x91\x81R` \x01\x90V[`@\x80Q\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xE0\x81\x84\x03\x01\x81R\x90\x82\x90Ra\x12 \x91a\x1ANV[` `@Q\x80\x83\x03\x81\x85Z\xFA\x15\x80\x15a\x12;W=__>=_\xFD[PPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90a\x01\xB6\x91\x90a\x1AdV[_a\x01\xB6\x82_a\x12\x8EV[_` _\x83\x85` \x01\x87\x01`\x02Z\xFAP` _` _`\x02Z\xFAPP_Q\x93\x92PPPV[_\x80a\x12\xA5a\x12\x9E\x84`Ha\x19\xD5V[\x85\x90a\x16AV[`\xE8\x1C\x90P_\x84a\x12\xB7\x85`Ka\x19\xD5V[\x81Q\x81\x10a\x12\xC7Wa\x12\xC7a\x1A{V[\x01` \x01Q`\xF8\x1C\x90P_a\x12\xF9\x83_`\x10\x82b\xFF\xFF\xFF\x16\x90\x1C\x82a\xFF\0\x16`\x10\x84b\xFF\xFF\xFF\x16\x90\x1B\x17\x17\x90P\x91\x90PV[b\xFF\xFF\xFF\x16\x90P_a\x13\x0C`\x03\x84a\x1A\xA8V[`\xFF\x16\x90Pa\x13\x1D\x81a\x01\0a\x1B\xA4V[a\x04\xEC\x90\x83a\x1B\xAFV[_a\x01\xB3a\x136\x83`\x04a\x19\xD5V[\x84\x01` \x01Q\x90V[_\x83\x85\x14\x80\x15a\x13NWP\x82\x85\x14[\x15a\x13[WP`\x01a\x03zV[\x83\x83\x81\x81_[\x86\x81\x10\x15a\x13\xA3W\x89\x83\x14a\x13\x82W_\x83\x81R`\x03` R`@\x90 T\x92\x94P[\x89\x82\x14a\x13\x9BW_\x82\x81R`\x03` R`@\x90 T\x91\x93P[`\x01\x01a\x13aV[P\x82\x84\x03a\x13\xB7W_\x94PPPPPa\x03zV[\x80\x82\x14a\x13\xCAW_\x94PPPPPa\x03zV[P`\x01\x98\x97PPPPPPPPV[__a\x13\xE4\x85a\x07^V[\x90P_a\x13\xF3a\x0E\xC1\x86a\x11\x86V[\x90P_a\x14\x02a\x0E\xC1\x86a\x11\x86V[\x90P\x82\x82\x10\x15\x80\x15a\x14\x14WP\x82\x81\x10\x15[a\x14\x86W`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`0`$\x82\x01R\x7FA descendant height is below the`D\x82\x01R\x7F ancestor height\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`d\x82\x01R`\x84\x01a\x02sV[_a\x14\x93a\x07\xE0\x85a\x1A\x15V[a\x14\x9F\x85a\x07\xE0a\x19\xD5V[a\x14\xA9\x91\x90a\x1A;V[\x90P\x80\x83\x10\x81\x83\x10\x81\x15\x82a\x14\xBBWP\x80[\x15a\x14\xD6Wa\x14\xC9\x89a\x11\x86V[\x96PPPPPPPa\x06\xE5V[\x81\x80\x15a\x14\xE1WP\x80\x15[\x15a\x14\xEFWa\x14\xC9\x88a\x11\x86V[\x81\x80\x15a\x14\xF9WP\x80[\x15a\x15\x1DW\x83\x85\x10\x15a\x15\x14Wa\x15\x0F\x88a\x11\x86V[a\x14\xC9V[a\x14\xC9\x89a\x11\x86V[a\x15&\x88a\x15jV[a\x152a\x07\xE0\x86a\x1A\x15V[a\x15<\x91\x90a\x1B\xAFV[a\x15E\x8Aa\x15jV[a\x15Qa\x07\xE0\x88a\x1A\x15V[a\x15[\x91\x90a\x1B\xAFV[\x10\x15a\x15\x14Wa\x14\xC9\x88a\x11\x86V[_a\x01\xB6a\x15w\x83a\x12^V[a\x16OV[_a\x01\xB6a\x15\x89\x83a\x16vV[`\xD8\x81\x90\x1Cc\xFF\0\xFF\0\x16b\xFF\0\xFF`\xE8\x92\x90\x92\x1C\x91\x90\x91\x16\x17`\x10\x81\x81\x1B\x91\x90\x1C\x17\x90V[_\x80a\x15\xBB\x83\x85a\x16\x82V[\x90Pa\x15\xCBb\x12u\0`\x04a\x16\xDDV[\x81\x10\x15a\x15\xE3Wa\x15\xE0b\x12u\0`\x04a\x16\xDDV[\x90P[a\x15\xF1b\x12u\0`\x04a\x16\xE8V[\x81\x11\x15a\x16\tWa\x16\x06b\x12u\0`\x04a\x16\xE8V[\x90P[_a\x16!\x82a\x16\x1B\x88b\x01\0\0a\x16\xDDV[\x90a\x16\xE8V[\x90Pa\x167b\x01\0\0a\x16\x1B\x83b\x12u\0a\x16\xDDV[\x96\x95PPPPPPV[_a\x01\xB3\x83\x83\x01` \x01Q\x90V[_a\x01\xB6{\xFF\xFF\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x83a\x16\xDDV[_a\x01\xB6\x82`Da\x16AV[_\x82\x82\x11\x15a\x16\xD3W`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`\x1D`$\x82\x01R\x7FUnderflow during subtraction.\0\0\0`D\x82\x01R`d\x01a\x02sV[a\x01\xB3\x82\x84a\x1A;V[_a\x01\xB3\x82\x84a\x1A(V[_\x82_\x03a\x16\xF7WP_a\x01\xB6V[a\x17\x01\x82\x84a\x1B\xAFV[\x90P\x81a\x17\x0E\x84\x83a\x1A(V[\x14a\x01\xB6W`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`\x1F`$\x82\x01R\x7FOverflow during multiplication.\0`D\x82\x01R`d\x01a\x02sV[__`@\x83\x85\x03\x12\x15a\x17lW__\xFD[PP\x805\x92` \x90\x91\x015\x91PV[_` \x82\x84\x03\x12\x15a\x17\x8BW__\xFD[P5\x91\x90PV[__\x83`\x1F\x84\x01\x12a\x17\xA2W__\xFD[P\x815g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\x17\xB9W__\xFD[` \x83\x01\x91P\x83` \x82\x85\x01\x01\x11\x15a\x17\xD0W__\xFD[\x92P\x92\x90PV[____`@\x85\x87\x03\x12\x15a\x17\xEAW__\xFD[\x845g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\x18\0W__\xFD[a\x18\x0C\x87\x82\x88\x01a\x17\x92V[\x90\x95P\x93PP` \x85\x015g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\x18+W__\xFD[a\x187\x87\x82\x88\x01a\x17\x92V[\x95\x98\x94\x97P\x95PPPPV[______`\x80\x87\x89\x03\x12\x15a\x18XW__\xFD[\x865\x95P` \x87\x015g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\x18uW__\xFD[a\x18\x81\x89\x82\x8A\x01a\x17\x92V[\x90\x96P\x94PP`@\x87\x015g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\x18\xA0W__\xFD[a\x18\xAC\x89\x82\x8A\x01a\x17\x92V[\x97\x9A\x96\x99P\x94\x97\x94\x96\x95``\x90\x95\x015\x94\x93PPPPV[______``\x87\x89\x03\x12\x15a\x18\xD9W__\xFD[\x865g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\x18\xEFW__\xFD[a\x18\xFB\x89\x82\x8A\x01a\x17\x92V[\x90\x97P\x95PP` \x87\x015g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\x19\x1AW__\xFD[a\x19&\x89\x82\x8A\x01a\x17\x92V[\x90\x95P\x93PP`@\x87\x015g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\x19EW__\xFD[a\x19Q\x89\x82\x8A\x01a\x17\x92V[\x97\x9A\x96\x99P\x94\x97P\x92\x95\x93\x94\x92PPPV[___``\x84\x86\x03\x12\x15a\x19uW__\xFD[PP\x815\x93` \x83\x015\x93P`@\x90\x92\x015\x91\x90PV[\x7FNH{q\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0_R`\x11`\x04R`$_\xFD[c\xFF\xFF\xFF\xFF\x81\x81\x16\x83\x82\x16\x01\x90\x81\x11\x15a\x01\xB6Wa\x01\xB6a\x19\x8CV[\x80\x82\x01\x80\x82\x11\x15a\x01\xB6Wa\x01\xB6a\x19\x8CV[\x7FNH{q\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0_R`\x12`\x04R`$_\xFD[_\x82a\x1A#Wa\x1A#a\x19\xE8V[P\x06\x90V[_\x82a\x1A6Wa\x1A6a\x19\xE8V[P\x04\x90V[\x81\x81\x03\x81\x81\x11\x15a\x01\xB6Wa\x01\xB6a\x19\x8CV[_\x82Q\x80` \x85\x01\x84^_\x92\x01\x91\x82RP\x91\x90PV[_` \x82\x84\x03\x12\x15a\x1AtW__\xFD[PQ\x91\x90PV[\x7FNH{q\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0_R`2`\x04R`$_\xFD[`\xFF\x82\x81\x16\x82\x82\x16\x03\x90\x81\x11\x15a\x01\xB6Wa\x01\xB6a\x19\x8CV[`\x01\x81[`\x01\x84\x11\x15a\x1A\xFCW\x80\x85\x04\x81\x11\x15a\x1A\xE0Wa\x1A\xE0a\x19\x8CV[`\x01\x84\x16\x15a\x1A\xEEW\x90\x81\x02\x90[`\x01\x93\x90\x93\x1C\x92\x80\x02a\x1A\xC5V[\x93P\x93\x91PPV[_\x82a\x1B\x12WP`\x01a\x01\xB6V[\x81a\x1B\x1EWP_a\x01\xB6V[\x81`\x01\x81\x14a\x1B4W`\x02\x81\x14a\x1B>Wa\x1BZV[`\x01\x91PPa\x01\xB6V[`\xFF\x84\x11\x15a\x1BOWa\x1BOa\x19\x8CV[PP`\x01\x82\x1Ba\x01\xB6V[P` \x83\x10a\x013\x83\x10\x16`N\x84\x10`\x0B\x84\x10\x16\x17\x15a\x1B}WP\x81\x81\na\x01\xB6V[a\x1B\x89_\x19\x84\x84a\x1A\xC1V[\x80_\x19\x04\x82\x11\x15a\x1B\x9CWa\x1B\x9Ca\x19\x8CV[\x02\x93\x92PPPV[_a\x01\xB3\x83\x83a\x1B\x04V[\x80\x82\x02\x81\x15\x82\x82\x04\x84\x14\x17a\x01\xB6Wa\x01\xB6a\x19\x8CV\xFE\xA2dipfsX\"\x12 _\xBF\x15K\xDF\xAA\xDA\xF4\xEA|\xF9\xFD\x90\xB1\x9ER\xD2\x0F\xF8\x93t\xC4\xB3\xC8\xCA\xA9\xF6\x83\xD4\x88\xA1fdsolcC\0\x08\x1B\x003",
    );
    /**Event with signature `Extension(bytes32,bytes32)` and selector `0xf90e4f1d9cd0dd55e339411cbc9b152482307c3a23ed64715e4a2858f641a3f5`.
```solidity
event Extension(bytes32 indexed _first, bytes32 indexed _last);
```*/
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    #[derive(Clone)]
    pub struct Extension {
        #[allow(missing_docs)]
        pub _first: alloy::sol_types::private::FixedBytes<32>,
        #[allow(missing_docs)]
        pub _last: alloy::sol_types::private::FixedBytes<32>,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[automatically_derived]
        impl alloy_sol_types::SolEvent for Extension {
            type DataTuple<'a> = ();
            type DataToken<'a> = <Self::DataTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type TopicList = (
                alloy_sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::FixedBytes<32>,
            );
            const SIGNATURE: &'static str = "Extension(bytes32,bytes32)";
            const SIGNATURE_HASH: alloy_sol_types::private::B256 = alloy_sol_types::private::B256::new([
                249u8,
                14u8,
                79u8,
                29u8,
                156u8,
                208u8,
                221u8,
                85u8,
                227u8,
                57u8,
                65u8,
                28u8,
                188u8,
                155u8,
                21u8,
                36u8,
                130u8,
                48u8,
                124u8,
                58u8,
                35u8,
                237u8,
                100u8,
                113u8,
                94u8,
                74u8,
                40u8,
                88u8,
                246u8,
                65u8,
                163u8,
                245u8,
            ]);
            const ANONYMOUS: bool = false;
            #[allow(unused_variables)]
            #[inline]
            fn new(
                topics: <Self::TopicList as alloy_sol_types::SolType>::RustType,
                data: <Self::DataTuple<'_> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                Self {
                    _first: topics.1,
                    _last: topics.2,
                }
            }
            #[inline]
            fn check_signature(
                topics: &<Self::TopicList as alloy_sol_types::SolType>::RustType,
            ) -> alloy_sol_types::Result<()> {
                if topics.0 != Self::SIGNATURE_HASH {
                    return Err(
                        alloy_sol_types::Error::invalid_event_signature_hash(
                            Self::SIGNATURE,
                            topics.0,
                            Self::SIGNATURE_HASH,
                        ),
                    );
                }
                Ok(())
            }
            #[inline]
            fn tokenize_body(&self) -> Self::DataToken<'_> {
                ()
            }
            #[inline]
            fn topics(&self) -> <Self::TopicList as alloy_sol_types::SolType>::RustType {
                (Self::SIGNATURE_HASH.into(), self._first.clone(), self._last.clone())
            }
            #[inline]
            fn encode_topics_raw(
                &self,
                out: &mut [alloy_sol_types::abi::token::WordToken],
            ) -> alloy_sol_types::Result<()> {
                if out.len() < <Self::TopicList as alloy_sol_types::TopicList>::COUNT {
                    return Err(alloy_sol_types::Error::Overrun);
                }
                out[0usize] = alloy_sol_types::abi::token::WordToken(
                    Self::SIGNATURE_HASH,
                );
                out[1usize] = <alloy::sol_types::sol_data::FixedBytes<
                    32,
                > as alloy_sol_types::EventTopic>::encode_topic(&self._first);
                out[2usize] = <alloy::sol_types::sol_data::FixedBytes<
                    32,
                > as alloy_sol_types::EventTopic>::encode_topic(&self._last);
                Ok(())
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::private::IntoLogData for Extension {
            fn to_log_data(&self) -> alloy_sol_types::private::LogData {
                From::from(self)
            }
            fn into_log_data(self) -> alloy_sol_types::private::LogData {
                From::from(&self)
            }
        }
        #[automatically_derived]
        impl From<&Extension> for alloy_sol_types::private::LogData {
            #[inline]
            fn from(this: &Extension) -> alloy_sol_types::private::LogData {
                alloy_sol_types::SolEvent::encode_log_data(this)
            }
        }
    };
    /**Event with signature `NewTip(bytes32,bytes32,bytes32)` and selector `0x3cc13de64df0f0239626235c51a2da251bbc8c85664ecce39263da3ee03f606c`.
```solidity
event NewTip(bytes32 indexed _from, bytes32 indexed _to, bytes32 indexed _gcd);
```*/
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    #[derive(Clone)]
    pub struct NewTip {
        #[allow(missing_docs)]
        pub _from: alloy::sol_types::private::FixedBytes<32>,
        #[allow(missing_docs)]
        pub _to: alloy::sol_types::private::FixedBytes<32>,
        #[allow(missing_docs)]
        pub _gcd: alloy::sol_types::private::FixedBytes<32>,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[automatically_derived]
        impl alloy_sol_types::SolEvent for NewTip {
            type DataTuple<'a> = ();
            type DataToken<'a> = <Self::DataTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type TopicList = (
                alloy_sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::FixedBytes<32>,
            );
            const SIGNATURE: &'static str = "NewTip(bytes32,bytes32,bytes32)";
            const SIGNATURE_HASH: alloy_sol_types::private::B256 = alloy_sol_types::private::B256::new([
                60u8,
                193u8,
                61u8,
                230u8,
                77u8,
                240u8,
                240u8,
                35u8,
                150u8,
                38u8,
                35u8,
                92u8,
                81u8,
                162u8,
                218u8,
                37u8,
                27u8,
                188u8,
                140u8,
                133u8,
                102u8,
                78u8,
                204u8,
                227u8,
                146u8,
                99u8,
                218u8,
                62u8,
                224u8,
                63u8,
                96u8,
                108u8,
            ]);
            const ANONYMOUS: bool = false;
            #[allow(unused_variables)]
            #[inline]
            fn new(
                topics: <Self::TopicList as alloy_sol_types::SolType>::RustType,
                data: <Self::DataTuple<'_> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                Self {
                    _from: topics.1,
                    _to: topics.2,
                    _gcd: topics.3,
                }
            }
            #[inline]
            fn check_signature(
                topics: &<Self::TopicList as alloy_sol_types::SolType>::RustType,
            ) -> alloy_sol_types::Result<()> {
                if topics.0 != Self::SIGNATURE_HASH {
                    return Err(
                        alloy_sol_types::Error::invalid_event_signature_hash(
                            Self::SIGNATURE,
                            topics.0,
                            Self::SIGNATURE_HASH,
                        ),
                    );
                }
                Ok(())
            }
            #[inline]
            fn tokenize_body(&self) -> Self::DataToken<'_> {
                ()
            }
            #[inline]
            fn topics(&self) -> <Self::TopicList as alloy_sol_types::SolType>::RustType {
                (
                    Self::SIGNATURE_HASH.into(),
                    self._from.clone(),
                    self._to.clone(),
                    self._gcd.clone(),
                )
            }
            #[inline]
            fn encode_topics_raw(
                &self,
                out: &mut [alloy_sol_types::abi::token::WordToken],
            ) -> alloy_sol_types::Result<()> {
                if out.len() < <Self::TopicList as alloy_sol_types::TopicList>::COUNT {
                    return Err(alloy_sol_types::Error::Overrun);
                }
                out[0usize] = alloy_sol_types::abi::token::WordToken(
                    Self::SIGNATURE_HASH,
                );
                out[1usize] = <alloy::sol_types::sol_data::FixedBytes<
                    32,
                > as alloy_sol_types::EventTopic>::encode_topic(&self._from);
                out[2usize] = <alloy::sol_types::sol_data::FixedBytes<
                    32,
                > as alloy_sol_types::EventTopic>::encode_topic(&self._to);
                out[3usize] = <alloy::sol_types::sol_data::FixedBytes<
                    32,
                > as alloy_sol_types::EventTopic>::encode_topic(&self._gcd);
                Ok(())
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::private::IntoLogData for NewTip {
            fn to_log_data(&self) -> alloy_sol_types::private::LogData {
                From::from(self)
            }
            fn into_log_data(self) -> alloy_sol_types::private::LogData {
                From::from(&self)
            }
        }
        #[automatically_derived]
        impl From<&NewTip> for alloy_sol_types::private::LogData {
            #[inline]
            fn from(this: &NewTip) -> alloy_sol_types::private::LogData {
                alloy_sol_types::SolEvent::encode_log_data(this)
            }
        }
    };
    /**Constructor`.
```solidity
constructor(bytes _genesisHeader, uint256 _height, bytes32 _periodStart);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct constructorCall {
        pub _genesisHeader: alloy::sol_types::private::Bytes,
        pub _height: alloy::sol_types::private::primitives::aliases::U256,
        pub _periodStart: alloy::sol_types::private::FixedBytes<32>,
    }
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::Bytes,
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::FixedBytes<32>,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::Bytes,
                alloy::sol_types::private::primitives::aliases::U256,
                alloy::sol_types::private::FixedBytes<32>,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<constructorCall> for UnderlyingRustTuple<'_> {
                fn from(value: constructorCall) -> Self {
                    (value._genesisHeader, value._height, value._periodStart)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for constructorCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        _genesisHeader: tuple.0,
                        _height: tuple.1,
                        _periodStart: tuple.2,
                    }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolConstructor for constructorCall {
            type Parameters<'a> = (
                alloy::sol_types::sol_data::Bytes,
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::FixedBytes<32>,
            );
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Bytes as alloy_sol_types::SolType>::tokenize(
                        &self._genesisHeader,
                    ),
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self._height),
                    <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::SolType>::tokenize(&self._periodStart),
                )
            }
        }
    };
    /**Function with signature `HEIGHT_INTERVAL()` and selector `0x70d53c18`.
```solidity
function HEIGHT_INTERVAL() external view returns (uint32);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct HEIGHT_INTERVALCall {}
    ///Container type for the return parameters of the [`HEIGHT_INTERVAL()`](HEIGHT_INTERVALCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct HEIGHT_INTERVALReturn {
        pub _0: u32,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<HEIGHT_INTERVALCall> for UnderlyingRustTuple<'_> {
                fn from(value: HEIGHT_INTERVALCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for HEIGHT_INTERVALCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<32>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (u32,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<HEIGHT_INTERVALReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: HEIGHT_INTERVALReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for HEIGHT_INTERVALReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for HEIGHT_INTERVALCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = HEIGHT_INTERVALReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Uint<32>,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "HEIGHT_INTERVAL()";
            const SELECTOR: [u8; 4] = [112u8, 213u8, 60u8, 24u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `addHeaders(bytes,bytes)` and selector `0x65da41b9`.
```solidity
function addHeaders(bytes memory _anchor, bytes memory _headers) external returns (bool);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct addHeadersCall {
        pub _anchor: alloy::sol_types::private::Bytes,
        pub _headers: alloy::sol_types::private::Bytes,
    }
    ///Container type for the return parameters of the [`addHeaders(bytes,bytes)`](addHeadersCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct addHeadersReturn {
        pub _0: bool,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::Bytes,
                alloy::sol_types::sol_data::Bytes,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::Bytes,
                alloy::sol_types::private::Bytes,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<addHeadersCall> for UnderlyingRustTuple<'_> {
                fn from(value: addHeadersCall) -> Self {
                    (value._anchor, value._headers)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for addHeadersCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        _anchor: tuple.0,
                        _headers: tuple.1,
                    }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Bool,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (bool,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<addHeadersReturn> for UnderlyingRustTuple<'_> {
                fn from(value: addHeadersReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for addHeadersReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for addHeadersCall {
            type Parameters<'a> = (
                alloy::sol_types::sol_data::Bytes,
                alloy::sol_types::sol_data::Bytes,
            );
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = addHeadersReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Bool,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "addHeaders(bytes,bytes)";
            const SELECTOR: [u8; 4] = [101u8, 218u8, 65u8, 185u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Bytes as alloy_sol_types::SolType>::tokenize(
                        &self._anchor,
                    ),
                    <alloy::sol_types::sol_data::Bytes as alloy_sol_types::SolType>::tokenize(
                        &self._headers,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `addHeadersWithRetarget(bytes,bytes,bytes)` and selector `0x7fa637fc`.
```solidity
function addHeadersWithRetarget(bytes memory _oldPeriodStartHeader, bytes memory _oldPeriodEndHeader, bytes memory _headers) external returns (bool);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct addHeadersWithRetargetCall {
        pub _oldPeriodStartHeader: alloy::sol_types::private::Bytes,
        pub _oldPeriodEndHeader: alloy::sol_types::private::Bytes,
        pub _headers: alloy::sol_types::private::Bytes,
    }
    ///Container type for the return parameters of the [`addHeadersWithRetarget(bytes,bytes,bytes)`](addHeadersWithRetargetCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct addHeadersWithRetargetReturn {
        pub _0: bool,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::Bytes,
                alloy::sol_types::sol_data::Bytes,
                alloy::sol_types::sol_data::Bytes,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::Bytes,
                alloy::sol_types::private::Bytes,
                alloy::sol_types::private::Bytes,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<addHeadersWithRetargetCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: addHeadersWithRetargetCall) -> Self {
                    (
                        value._oldPeriodStartHeader,
                        value._oldPeriodEndHeader,
                        value._headers,
                    )
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for addHeadersWithRetargetCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        _oldPeriodStartHeader: tuple.0,
                        _oldPeriodEndHeader: tuple.1,
                        _headers: tuple.2,
                    }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Bool,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (bool,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<addHeadersWithRetargetReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: addHeadersWithRetargetReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for addHeadersWithRetargetReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for addHeadersWithRetargetCall {
            type Parameters<'a> = (
                alloy::sol_types::sol_data::Bytes,
                alloy::sol_types::sol_data::Bytes,
                alloy::sol_types::sol_data::Bytes,
            );
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = addHeadersWithRetargetReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Bool,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "addHeadersWithRetarget(bytes,bytes,bytes)";
            const SELECTOR: [u8; 4] = [127u8, 166u8, 55u8, 252u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Bytes as alloy_sol_types::SolType>::tokenize(
                        &self._oldPeriodStartHeader,
                    ),
                    <alloy::sol_types::sol_data::Bytes as alloy_sol_types::SolType>::tokenize(
                        &self._oldPeriodEndHeader,
                    ),
                    <alloy::sol_types::sol_data::Bytes as alloy_sol_types::SolType>::tokenize(
                        &self._headers,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `findAncestor(bytes32,uint256)` and selector `0x30017b3b`.
```solidity
function findAncestor(bytes32 _digest, uint256 _offset) external view returns (bytes32);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct findAncestorCall {
        pub _digest: alloy::sol_types::private::FixedBytes<32>,
        pub _offset: alloy::sol_types::private::primitives::aliases::U256,
    }
    ///Container type for the return parameters of the [`findAncestor(bytes32,uint256)`](findAncestorCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct findAncestorReturn {
        pub _0: alloy::sol_types::private::FixedBytes<32>,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::Uint<256>,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::FixedBytes<32>,
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<findAncestorCall> for UnderlyingRustTuple<'_> {
                fn from(value: findAncestorCall) -> Self {
                    (value._digest, value._offset)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for findAncestorCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        _digest: tuple.0,
                        _offset: tuple.1,
                    }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::FixedBytes<32>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::FixedBytes<32>,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<findAncestorReturn> for UnderlyingRustTuple<'_> {
                fn from(value: findAncestorReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for findAncestorReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for findAncestorCall {
            type Parameters<'a> = (
                alloy::sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::Uint<256>,
            );
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = findAncestorReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::FixedBytes<32>,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "findAncestor(bytes32,uint256)";
            const SELECTOR: [u8; 4] = [48u8, 1u8, 123u8, 59u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::SolType>::tokenize(&self._digest),
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self._offset),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `findHeight(bytes32)` and selector `0x60b5c390`.
```solidity
function findHeight(bytes32 _digest) external view returns (uint256);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct findHeightCall {
        pub _digest: alloy::sol_types::private::FixedBytes<32>,
    }
    ///Container type for the return parameters of the [`findHeight(bytes32)`](findHeightCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct findHeightReturn {
        pub _0: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::FixedBytes<32>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::FixedBytes<32>,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<findHeightCall> for UnderlyingRustTuple<'_> {
                fn from(value: findHeightCall) -> Self {
                    (value._digest,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for findHeightCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _digest: tuple.0 }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<findHeightReturn> for UnderlyingRustTuple<'_> {
                fn from(value: findHeightReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for findHeightReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for findHeightCall {
            type Parameters<'a> = (alloy::sol_types::sol_data::FixedBytes<32>,);
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = findHeightReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "findHeight(bytes32)";
            const SELECTOR: [u8; 4] = [96u8, 181u8, 195u8, 144u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::SolType>::tokenize(&self._digest),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `getBestKnownDigest()` and selector `0x1910d973`.
```solidity
function getBestKnownDigest() external view returns (bytes32);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct getBestKnownDigestCall {}
    ///Container type for the return parameters of the [`getBestKnownDigest()`](getBestKnownDigestCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct getBestKnownDigestReturn {
        pub _0: alloy::sol_types::private::FixedBytes<32>,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<getBestKnownDigestCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: getBestKnownDigestCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for getBestKnownDigestCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::FixedBytes<32>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::FixedBytes<32>,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<getBestKnownDigestReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: getBestKnownDigestReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for getBestKnownDigestReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for getBestKnownDigestCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = getBestKnownDigestReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::FixedBytes<32>,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "getBestKnownDigest()";
            const SELECTOR: [u8; 4] = [25u8, 16u8, 217u8, 115u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `getCurrentEpochDifficulty()` and selector `0x113764be`.
```solidity
function getCurrentEpochDifficulty() external view returns (uint256);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct getCurrentEpochDifficultyCall {}
    ///Container type for the return parameters of the [`getCurrentEpochDifficulty()`](getCurrentEpochDifficultyCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct getCurrentEpochDifficultyReturn {
        pub _0: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<getCurrentEpochDifficultyCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: getCurrentEpochDifficultyCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for getCurrentEpochDifficultyCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<getCurrentEpochDifficultyReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: getCurrentEpochDifficultyReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for getCurrentEpochDifficultyReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for getCurrentEpochDifficultyCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = getCurrentEpochDifficultyReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "getCurrentEpochDifficulty()";
            const SELECTOR: [u8; 4] = [17u8, 55u8, 100u8, 190u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `getLastReorgCommonAncestor()` and selector `0xc58242cd`.
```solidity
function getLastReorgCommonAncestor() external view returns (bytes32);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct getLastReorgCommonAncestorCall {}
    ///Container type for the return parameters of the [`getLastReorgCommonAncestor()`](getLastReorgCommonAncestorCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct getLastReorgCommonAncestorReturn {
        pub _0: alloy::sol_types::private::FixedBytes<32>,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<getLastReorgCommonAncestorCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: getLastReorgCommonAncestorCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for getLastReorgCommonAncestorCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::FixedBytes<32>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::FixedBytes<32>,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<getLastReorgCommonAncestorReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: getLastReorgCommonAncestorReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for getLastReorgCommonAncestorReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for getLastReorgCommonAncestorCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = getLastReorgCommonAncestorReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::FixedBytes<32>,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "getLastReorgCommonAncestor()";
            const SELECTOR: [u8; 4] = [197u8, 130u8, 66u8, 205u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `getPrevEpochDifficulty()` and selector `0x2b97be24`.
```solidity
function getPrevEpochDifficulty() external view returns (uint256);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct getPrevEpochDifficultyCall {}
    ///Container type for the return parameters of the [`getPrevEpochDifficulty()`](getPrevEpochDifficultyCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct getPrevEpochDifficultyReturn {
        pub _0: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<getPrevEpochDifficultyCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: getPrevEpochDifficultyCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for getPrevEpochDifficultyCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<getPrevEpochDifficultyReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: getPrevEpochDifficultyReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for getPrevEpochDifficultyReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for getPrevEpochDifficultyCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = getPrevEpochDifficultyReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "getPrevEpochDifficulty()";
            const SELECTOR: [u8; 4] = [43u8, 151u8, 190u8, 36u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `getRelayGenesis()` and selector `0xe3d8d8d8`.
```solidity
function getRelayGenesis() external view returns (bytes32);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct getRelayGenesisCall {}
    ///Container type for the return parameters of the [`getRelayGenesis()`](getRelayGenesisCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct getRelayGenesisReturn {
        pub _0: alloy::sol_types::private::FixedBytes<32>,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<getRelayGenesisCall> for UnderlyingRustTuple<'_> {
                fn from(value: getRelayGenesisCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for getRelayGenesisCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::FixedBytes<32>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::FixedBytes<32>,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<getRelayGenesisReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: getRelayGenesisReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for getRelayGenesisReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for getRelayGenesisCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = getRelayGenesisReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::FixedBytes<32>,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "getRelayGenesis()";
            const SELECTOR: [u8; 4] = [227u8, 216u8, 216u8, 216u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `isAncestor(bytes32,bytes32,uint256)` and selector `0xb985621a`.
```solidity
function isAncestor(bytes32 _ancestor, bytes32 _descendant, uint256 _limit) external view returns (bool);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct isAncestorCall {
        pub _ancestor: alloy::sol_types::private::FixedBytes<32>,
        pub _descendant: alloy::sol_types::private::FixedBytes<32>,
        pub _limit: alloy::sol_types::private::primitives::aliases::U256,
    }
    ///Container type for the return parameters of the [`isAncestor(bytes32,bytes32,uint256)`](isAncestorCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct isAncestorReturn {
        pub _0: bool,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::Uint<256>,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::FixedBytes<32>,
                alloy::sol_types::private::FixedBytes<32>,
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<isAncestorCall> for UnderlyingRustTuple<'_> {
                fn from(value: isAncestorCall) -> Self {
                    (value._ancestor, value._descendant, value._limit)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for isAncestorCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        _ancestor: tuple.0,
                        _descendant: tuple.1,
                        _limit: tuple.2,
                    }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Bool,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (bool,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<isAncestorReturn> for UnderlyingRustTuple<'_> {
                fn from(value: isAncestorReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for isAncestorReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for isAncestorCall {
            type Parameters<'a> = (
                alloy::sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::Uint<256>,
            );
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = isAncestorReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Bool,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "isAncestor(bytes32,bytes32,uint256)";
            const SELECTOR: [u8; 4] = [185u8, 133u8, 98u8, 26u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::SolType>::tokenize(&self._ancestor),
                    <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::SolType>::tokenize(&self._descendant),
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self._limit),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `markNewHeaviest(bytes32,bytes,bytes,uint256)` and selector `0x74c3a3a9`.
```solidity
function markNewHeaviest(bytes32 _ancestor, bytes memory _currentBest, bytes memory _newBest, uint256 _limit) external returns (bool);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct markNewHeaviestCall {
        pub _ancestor: alloy::sol_types::private::FixedBytes<32>,
        pub _currentBest: alloy::sol_types::private::Bytes,
        pub _newBest: alloy::sol_types::private::Bytes,
        pub _limit: alloy::sol_types::private::primitives::aliases::U256,
    }
    ///Container type for the return parameters of the [`markNewHeaviest(bytes32,bytes,bytes,uint256)`](markNewHeaviestCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct markNewHeaviestReturn {
        pub _0: bool,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::Bytes,
                alloy::sol_types::sol_data::Bytes,
                alloy::sol_types::sol_data::Uint<256>,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::FixedBytes<32>,
                alloy::sol_types::private::Bytes,
                alloy::sol_types::private::Bytes,
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<markNewHeaviestCall> for UnderlyingRustTuple<'_> {
                fn from(value: markNewHeaviestCall) -> Self {
                    (value._ancestor, value._currentBest, value._newBest, value._limit)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for markNewHeaviestCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        _ancestor: tuple.0,
                        _currentBest: tuple.1,
                        _newBest: tuple.2,
                        _limit: tuple.3,
                    }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Bool,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (bool,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<markNewHeaviestReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: markNewHeaviestReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for markNewHeaviestReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for markNewHeaviestCall {
            type Parameters<'a> = (
                alloy::sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::Bytes,
                alloy::sol_types::sol_data::Bytes,
                alloy::sol_types::sol_data::Uint<256>,
            );
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = markNewHeaviestReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Bool,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "markNewHeaviest(bytes32,bytes,bytes,uint256)";
            const SELECTOR: [u8; 4] = [116u8, 195u8, 163u8, 169u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::SolType>::tokenize(&self._ancestor),
                    <alloy::sol_types::sol_data::Bytes as alloy_sol_types::SolType>::tokenize(
                        &self._currentBest,
                    ),
                    <alloy::sol_types::sol_data::Bytes as alloy_sol_types::SolType>::tokenize(
                        &self._newBest,
                    ),
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self._limit),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    ///Container for all the [`FullRelay`](self) function calls.
    pub enum FullRelayCalls {
        HEIGHT_INTERVAL(HEIGHT_INTERVALCall),
        addHeaders(addHeadersCall),
        addHeadersWithRetarget(addHeadersWithRetargetCall),
        findAncestor(findAncestorCall),
        findHeight(findHeightCall),
        getBestKnownDigest(getBestKnownDigestCall),
        getCurrentEpochDifficulty(getCurrentEpochDifficultyCall),
        getLastReorgCommonAncestor(getLastReorgCommonAncestorCall),
        getPrevEpochDifficulty(getPrevEpochDifficultyCall),
        getRelayGenesis(getRelayGenesisCall),
        isAncestor(isAncestorCall),
        markNewHeaviest(markNewHeaviestCall),
    }
    #[automatically_derived]
    impl FullRelayCalls {
        /// All the selectors of this enum.
        ///
        /// Note that the selectors might not be in the same order as the variants.
        /// No guarantees are made about the order of the selectors.
        ///
        /// Prefer using `SolInterface` methods instead.
        pub const SELECTORS: &'static [[u8; 4usize]] = &[
            [17u8, 55u8, 100u8, 190u8],
            [25u8, 16u8, 217u8, 115u8],
            [43u8, 151u8, 190u8, 36u8],
            [48u8, 1u8, 123u8, 59u8],
            [96u8, 181u8, 195u8, 144u8],
            [101u8, 218u8, 65u8, 185u8],
            [112u8, 213u8, 60u8, 24u8],
            [116u8, 195u8, 163u8, 169u8],
            [127u8, 166u8, 55u8, 252u8],
            [185u8, 133u8, 98u8, 26u8],
            [197u8, 130u8, 66u8, 205u8],
            [227u8, 216u8, 216u8, 216u8],
        ];
    }
    #[automatically_derived]
    impl alloy_sol_types::SolInterface for FullRelayCalls {
        const NAME: &'static str = "FullRelayCalls";
        const MIN_DATA_LENGTH: usize = 0usize;
        const COUNT: usize = 12usize;
        #[inline]
        fn selector(&self) -> [u8; 4] {
            match self {
                Self::HEIGHT_INTERVAL(_) => {
                    <HEIGHT_INTERVALCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::addHeaders(_) => {
                    <addHeadersCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::addHeadersWithRetarget(_) => {
                    <addHeadersWithRetargetCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::findAncestor(_) => {
                    <findAncestorCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::findHeight(_) => {
                    <findHeightCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::getBestKnownDigest(_) => {
                    <getBestKnownDigestCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::getCurrentEpochDifficulty(_) => {
                    <getCurrentEpochDifficultyCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::getLastReorgCommonAncestor(_) => {
                    <getLastReorgCommonAncestorCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::getPrevEpochDifficulty(_) => {
                    <getPrevEpochDifficultyCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::getRelayGenesis(_) => {
                    <getRelayGenesisCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::isAncestor(_) => {
                    <isAncestorCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::markNewHeaviest(_) => {
                    <markNewHeaviestCall as alloy_sol_types::SolCall>::SELECTOR
                }
            }
        }
        #[inline]
        fn selector_at(i: usize) -> ::core::option::Option<[u8; 4]> {
            Self::SELECTORS.get(i).copied()
        }
        #[inline]
        fn valid_selector(selector: [u8; 4]) -> bool {
            Self::SELECTORS.binary_search(&selector).is_ok()
        }
        #[inline]
        #[allow(unsafe_code, non_snake_case)]
        fn abi_decode_raw(
            selector: [u8; 4],
            data: &[u8],
            validate: bool,
        ) -> alloy_sol_types::Result<Self> {
            static DECODE_SHIMS: &[fn(
                &[u8],
                bool,
            ) -> alloy_sol_types::Result<FullRelayCalls>] = &[
                {
                    fn getCurrentEpochDifficulty(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<FullRelayCalls> {
                        <getCurrentEpochDifficultyCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(FullRelayCalls::getCurrentEpochDifficulty)
                    }
                    getCurrentEpochDifficulty
                },
                {
                    fn getBestKnownDigest(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<FullRelayCalls> {
                        <getBestKnownDigestCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(FullRelayCalls::getBestKnownDigest)
                    }
                    getBestKnownDigest
                },
                {
                    fn getPrevEpochDifficulty(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<FullRelayCalls> {
                        <getPrevEpochDifficultyCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(FullRelayCalls::getPrevEpochDifficulty)
                    }
                    getPrevEpochDifficulty
                },
                {
                    fn findAncestor(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<FullRelayCalls> {
                        <findAncestorCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(FullRelayCalls::findAncestor)
                    }
                    findAncestor
                },
                {
                    fn findHeight(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<FullRelayCalls> {
                        <findHeightCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(FullRelayCalls::findHeight)
                    }
                    findHeight
                },
                {
                    fn addHeaders(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<FullRelayCalls> {
                        <addHeadersCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(FullRelayCalls::addHeaders)
                    }
                    addHeaders
                },
                {
                    fn HEIGHT_INTERVAL(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<FullRelayCalls> {
                        <HEIGHT_INTERVALCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(FullRelayCalls::HEIGHT_INTERVAL)
                    }
                    HEIGHT_INTERVAL
                },
                {
                    fn markNewHeaviest(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<FullRelayCalls> {
                        <markNewHeaviestCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(FullRelayCalls::markNewHeaviest)
                    }
                    markNewHeaviest
                },
                {
                    fn addHeadersWithRetarget(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<FullRelayCalls> {
                        <addHeadersWithRetargetCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(FullRelayCalls::addHeadersWithRetarget)
                    }
                    addHeadersWithRetarget
                },
                {
                    fn isAncestor(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<FullRelayCalls> {
                        <isAncestorCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(FullRelayCalls::isAncestor)
                    }
                    isAncestor
                },
                {
                    fn getLastReorgCommonAncestor(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<FullRelayCalls> {
                        <getLastReorgCommonAncestorCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(FullRelayCalls::getLastReorgCommonAncestor)
                    }
                    getLastReorgCommonAncestor
                },
                {
                    fn getRelayGenesis(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<FullRelayCalls> {
                        <getRelayGenesisCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(FullRelayCalls::getRelayGenesis)
                    }
                    getRelayGenesis
                },
            ];
            let Ok(idx) = Self::SELECTORS.binary_search(&selector) else {
                return Err(
                    alloy_sol_types::Error::unknown_selector(
                        <Self as alloy_sol_types::SolInterface>::NAME,
                        selector,
                    ),
                );
            };
            (unsafe { DECODE_SHIMS.get_unchecked(idx) })(data, validate)
        }
        #[inline]
        fn abi_encoded_size(&self) -> usize {
            match self {
                Self::HEIGHT_INTERVAL(inner) => {
                    <HEIGHT_INTERVALCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::addHeaders(inner) => {
                    <addHeadersCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
                Self::addHeadersWithRetarget(inner) => {
                    <addHeadersWithRetargetCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::findAncestor(inner) => {
                    <findAncestorCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::findHeight(inner) => {
                    <findHeightCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
                Self::getBestKnownDigest(inner) => {
                    <getBestKnownDigestCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::getCurrentEpochDifficulty(inner) => {
                    <getCurrentEpochDifficultyCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::getLastReorgCommonAncestor(inner) => {
                    <getLastReorgCommonAncestorCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::getPrevEpochDifficulty(inner) => {
                    <getPrevEpochDifficultyCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::getRelayGenesis(inner) => {
                    <getRelayGenesisCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::isAncestor(inner) => {
                    <isAncestorCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
                Self::markNewHeaviest(inner) => {
                    <markNewHeaviestCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
            }
        }
        #[inline]
        fn abi_encode_raw(&self, out: &mut alloy_sol_types::private::Vec<u8>) {
            match self {
                Self::HEIGHT_INTERVAL(inner) => {
                    <HEIGHT_INTERVALCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::addHeaders(inner) => {
                    <addHeadersCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::addHeadersWithRetarget(inner) => {
                    <addHeadersWithRetargetCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::findAncestor(inner) => {
                    <findAncestorCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::findHeight(inner) => {
                    <findHeightCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::getBestKnownDigest(inner) => {
                    <getBestKnownDigestCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::getCurrentEpochDifficulty(inner) => {
                    <getCurrentEpochDifficultyCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::getLastReorgCommonAncestor(inner) => {
                    <getLastReorgCommonAncestorCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::getPrevEpochDifficulty(inner) => {
                    <getPrevEpochDifficultyCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::getRelayGenesis(inner) => {
                    <getRelayGenesisCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::isAncestor(inner) => {
                    <isAncestorCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::markNewHeaviest(inner) => {
                    <markNewHeaviestCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
            }
        }
    }
    ///Container for all the [`FullRelay`](self) events.
    pub enum FullRelayEvents {
        Extension(Extension),
        NewTip(NewTip),
    }
    #[automatically_derived]
    impl FullRelayEvents {
        /// All the selectors of this enum.
        ///
        /// Note that the selectors might not be in the same order as the variants.
        /// No guarantees are made about the order of the selectors.
        ///
        /// Prefer using `SolInterface` methods instead.
        pub const SELECTORS: &'static [[u8; 32usize]] = &[
            [
                60u8,
                193u8,
                61u8,
                230u8,
                77u8,
                240u8,
                240u8,
                35u8,
                150u8,
                38u8,
                35u8,
                92u8,
                81u8,
                162u8,
                218u8,
                37u8,
                27u8,
                188u8,
                140u8,
                133u8,
                102u8,
                78u8,
                204u8,
                227u8,
                146u8,
                99u8,
                218u8,
                62u8,
                224u8,
                63u8,
                96u8,
                108u8,
            ],
            [
                249u8,
                14u8,
                79u8,
                29u8,
                156u8,
                208u8,
                221u8,
                85u8,
                227u8,
                57u8,
                65u8,
                28u8,
                188u8,
                155u8,
                21u8,
                36u8,
                130u8,
                48u8,
                124u8,
                58u8,
                35u8,
                237u8,
                100u8,
                113u8,
                94u8,
                74u8,
                40u8,
                88u8,
                246u8,
                65u8,
                163u8,
                245u8,
            ],
        ];
    }
    #[automatically_derived]
    impl alloy_sol_types::SolEventInterface for FullRelayEvents {
        const NAME: &'static str = "FullRelayEvents";
        const COUNT: usize = 2usize;
        fn decode_raw_log(
            topics: &[alloy_sol_types::Word],
            data: &[u8],
            validate: bool,
        ) -> alloy_sol_types::Result<Self> {
            match topics.first().copied() {
                Some(<Extension as alloy_sol_types::SolEvent>::SIGNATURE_HASH) => {
                    <Extension as alloy_sol_types::SolEvent>::decode_raw_log(
                            topics,
                            data,
                            validate,
                        )
                        .map(Self::Extension)
                }
                Some(<NewTip as alloy_sol_types::SolEvent>::SIGNATURE_HASH) => {
                    <NewTip as alloy_sol_types::SolEvent>::decode_raw_log(
                            topics,
                            data,
                            validate,
                        )
                        .map(Self::NewTip)
                }
                _ => {
                    alloy_sol_types::private::Err(alloy_sol_types::Error::InvalidLog {
                        name: <Self as alloy_sol_types::SolEventInterface>::NAME,
                        log: alloy_sol_types::private::Box::new(
                            alloy_sol_types::private::LogData::new_unchecked(
                                topics.to_vec(),
                                data.to_vec().into(),
                            ),
                        ),
                    })
                }
            }
        }
    }
    #[automatically_derived]
    impl alloy_sol_types::private::IntoLogData for FullRelayEvents {
        fn to_log_data(&self) -> alloy_sol_types::private::LogData {
            match self {
                Self::Extension(inner) => {
                    alloy_sol_types::private::IntoLogData::to_log_data(inner)
                }
                Self::NewTip(inner) => {
                    alloy_sol_types::private::IntoLogData::to_log_data(inner)
                }
            }
        }
        fn into_log_data(self) -> alloy_sol_types::private::LogData {
            match self {
                Self::Extension(inner) => {
                    alloy_sol_types::private::IntoLogData::into_log_data(inner)
                }
                Self::NewTip(inner) => {
                    alloy_sol_types::private::IntoLogData::into_log_data(inner)
                }
            }
        }
    }
    use alloy::contract as alloy_contract;
    /**Creates a new wrapper around an on-chain [`FullRelay`](self) contract instance.

See the [wrapper's documentation](`FullRelayInstance`) for more details.*/
    #[inline]
    pub const fn new<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    >(
        address: alloy_sol_types::private::Address,
        provider: P,
    ) -> FullRelayInstance<T, P, N> {
        FullRelayInstance::<T, P, N>::new(address, provider)
    }
    /**Deploys this contract using the given `provider` and constructor arguments, if any.

Returns a new instance of the contract, if the deployment was successful.

For more fine-grained control over the deployment process, use [`deploy_builder`] instead.*/
    #[inline]
    pub fn deploy<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    >(
        provider: P,
        _genesisHeader: alloy::sol_types::private::Bytes,
        _height: alloy::sol_types::private::primitives::aliases::U256,
        _periodStart: alloy::sol_types::private::FixedBytes<32>,
    ) -> impl ::core::future::Future<
        Output = alloy_contract::Result<FullRelayInstance<T, P, N>>,
    > {
        FullRelayInstance::<
            T,
            P,
            N,
        >::deploy(provider, _genesisHeader, _height, _periodStart)
    }
    /**Creates a `RawCallBuilder` for deploying this contract using the given `provider`
and constructor arguments, if any.

This is a simple wrapper around creating a `RawCallBuilder` with the data set to
the bytecode concatenated with the constructor's ABI-encoded arguments.*/
    #[inline]
    pub fn deploy_builder<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    >(
        provider: P,
        _genesisHeader: alloy::sol_types::private::Bytes,
        _height: alloy::sol_types::private::primitives::aliases::U256,
        _periodStart: alloy::sol_types::private::FixedBytes<32>,
    ) -> alloy_contract::RawCallBuilder<T, P, N> {
        FullRelayInstance::<
            T,
            P,
            N,
        >::deploy_builder(provider, _genesisHeader, _height, _periodStart)
    }
    /**A [`FullRelay`](self) instance.

Contains type-safe methods for interacting with an on-chain instance of the
[`FullRelay`](self) contract located at a given `address`, using a given
provider `P`.

If the contract bytecode is available (see the [`sol!`](alloy_sol_types::sol!)
documentation on how to provide it), the `deploy` and `deploy_builder` methods can
be used to deploy a new instance of the contract.

See the [module-level documentation](self) for all the available methods.*/
    #[derive(Clone)]
    pub struct FullRelayInstance<T, P, N = alloy_contract::private::Ethereum> {
        address: alloy_sol_types::private::Address,
        provider: P,
        _network_transport: ::core::marker::PhantomData<(N, T)>,
    }
    #[automatically_derived]
    impl<T, P, N> ::core::fmt::Debug for FullRelayInstance<T, P, N> {
        #[inline]
        fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
            f.debug_tuple("FullRelayInstance").field(&self.address).finish()
        }
    }
    /// Instantiation and getters/setters.
    #[automatically_derived]
    impl<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    > FullRelayInstance<T, P, N> {
        /**Creates a new wrapper around an on-chain [`FullRelay`](self) contract instance.

See the [wrapper's documentation](`FullRelayInstance`) for more details.*/
        #[inline]
        pub const fn new(
            address: alloy_sol_types::private::Address,
            provider: P,
        ) -> Self {
            Self {
                address,
                provider,
                _network_transport: ::core::marker::PhantomData,
            }
        }
        /**Deploys this contract using the given `provider` and constructor arguments, if any.

Returns a new instance of the contract, if the deployment was successful.

For more fine-grained control over the deployment process, use [`deploy_builder`] instead.*/
        #[inline]
        pub async fn deploy(
            provider: P,
            _genesisHeader: alloy::sol_types::private::Bytes,
            _height: alloy::sol_types::private::primitives::aliases::U256,
            _periodStart: alloy::sol_types::private::FixedBytes<32>,
        ) -> alloy_contract::Result<FullRelayInstance<T, P, N>> {
            let call_builder = Self::deploy_builder(
                provider,
                _genesisHeader,
                _height,
                _periodStart,
            );
            let contract_address = call_builder.deploy().await?;
            Ok(Self::new(contract_address, call_builder.provider))
        }
        /**Creates a `RawCallBuilder` for deploying this contract using the given `provider`
and constructor arguments, if any.

This is a simple wrapper around creating a `RawCallBuilder` with the data set to
the bytecode concatenated with the constructor's ABI-encoded arguments.*/
        #[inline]
        pub fn deploy_builder(
            provider: P,
            _genesisHeader: alloy::sol_types::private::Bytes,
            _height: alloy::sol_types::private::primitives::aliases::U256,
            _periodStart: alloy::sol_types::private::FixedBytes<32>,
        ) -> alloy_contract::RawCallBuilder<T, P, N> {
            alloy_contract::RawCallBuilder::new_raw_deploy(
                provider,
                [
                    &BYTECODE[..],
                    &alloy_sol_types::SolConstructor::abi_encode(
                        &constructorCall {
                            _genesisHeader,
                            _height,
                            _periodStart,
                        },
                    )[..],
                ]
                    .concat()
                    .into(),
            )
        }
        /// Returns a reference to the address.
        #[inline]
        pub const fn address(&self) -> &alloy_sol_types::private::Address {
            &self.address
        }
        /// Sets the address.
        #[inline]
        pub fn set_address(&mut self, address: alloy_sol_types::private::Address) {
            self.address = address;
        }
        /// Sets the address and returns `self`.
        pub fn at(mut self, address: alloy_sol_types::private::Address) -> Self {
            self.set_address(address);
            self
        }
        /// Returns a reference to the provider.
        #[inline]
        pub const fn provider(&self) -> &P {
            &self.provider
        }
    }
    impl<T, P: ::core::clone::Clone, N> FullRelayInstance<T, &P, N> {
        /// Clones the provider and returns a new instance with the cloned provider.
        #[inline]
        pub fn with_cloned_provider(self) -> FullRelayInstance<T, P, N> {
            FullRelayInstance {
                address: self.address,
                provider: ::core::clone::Clone::clone(&self.provider),
                _network_transport: ::core::marker::PhantomData,
            }
        }
    }
    /// Function calls.
    #[automatically_derived]
    impl<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    > FullRelayInstance<T, P, N> {
        /// Creates a new call builder using this contract instance's provider and address.
        ///
        /// Note that the call can be any function call, not just those defined in this
        /// contract. Prefer using the other methods for building type-safe contract calls.
        pub fn call_builder<C: alloy_sol_types::SolCall>(
            &self,
            call: &C,
        ) -> alloy_contract::SolCallBuilder<T, &P, C, N> {
            alloy_contract::SolCallBuilder::new_sol(&self.provider, &self.address, call)
        }
        ///Creates a new call builder for the [`HEIGHT_INTERVAL`] function.
        pub fn HEIGHT_INTERVAL(
            &self,
        ) -> alloy_contract::SolCallBuilder<T, &P, HEIGHT_INTERVALCall, N> {
            self.call_builder(&HEIGHT_INTERVALCall {})
        }
        ///Creates a new call builder for the [`addHeaders`] function.
        pub fn addHeaders(
            &self,
            _anchor: alloy::sol_types::private::Bytes,
            _headers: alloy::sol_types::private::Bytes,
        ) -> alloy_contract::SolCallBuilder<T, &P, addHeadersCall, N> {
            self.call_builder(
                &addHeadersCall {
                    _anchor,
                    _headers,
                },
            )
        }
        ///Creates a new call builder for the [`addHeadersWithRetarget`] function.
        pub fn addHeadersWithRetarget(
            &self,
            _oldPeriodStartHeader: alloy::sol_types::private::Bytes,
            _oldPeriodEndHeader: alloy::sol_types::private::Bytes,
            _headers: alloy::sol_types::private::Bytes,
        ) -> alloy_contract::SolCallBuilder<T, &P, addHeadersWithRetargetCall, N> {
            self.call_builder(
                &addHeadersWithRetargetCall {
                    _oldPeriodStartHeader,
                    _oldPeriodEndHeader,
                    _headers,
                },
            )
        }
        ///Creates a new call builder for the [`findAncestor`] function.
        pub fn findAncestor(
            &self,
            _digest: alloy::sol_types::private::FixedBytes<32>,
            _offset: alloy::sol_types::private::primitives::aliases::U256,
        ) -> alloy_contract::SolCallBuilder<T, &P, findAncestorCall, N> {
            self.call_builder(
                &findAncestorCall {
                    _digest,
                    _offset,
                },
            )
        }
        ///Creates a new call builder for the [`findHeight`] function.
        pub fn findHeight(
            &self,
            _digest: alloy::sol_types::private::FixedBytes<32>,
        ) -> alloy_contract::SolCallBuilder<T, &P, findHeightCall, N> {
            self.call_builder(&findHeightCall { _digest })
        }
        ///Creates a new call builder for the [`getBestKnownDigest`] function.
        pub fn getBestKnownDigest(
            &self,
        ) -> alloy_contract::SolCallBuilder<T, &P, getBestKnownDigestCall, N> {
            self.call_builder(&getBestKnownDigestCall {})
        }
        ///Creates a new call builder for the [`getCurrentEpochDifficulty`] function.
        pub fn getCurrentEpochDifficulty(
            &self,
        ) -> alloy_contract::SolCallBuilder<T, &P, getCurrentEpochDifficultyCall, N> {
            self.call_builder(&getCurrentEpochDifficultyCall {})
        }
        ///Creates a new call builder for the [`getLastReorgCommonAncestor`] function.
        pub fn getLastReorgCommonAncestor(
            &self,
        ) -> alloy_contract::SolCallBuilder<T, &P, getLastReorgCommonAncestorCall, N> {
            self.call_builder(&getLastReorgCommonAncestorCall {})
        }
        ///Creates a new call builder for the [`getPrevEpochDifficulty`] function.
        pub fn getPrevEpochDifficulty(
            &self,
        ) -> alloy_contract::SolCallBuilder<T, &P, getPrevEpochDifficultyCall, N> {
            self.call_builder(&getPrevEpochDifficultyCall {})
        }
        ///Creates a new call builder for the [`getRelayGenesis`] function.
        pub fn getRelayGenesis(
            &self,
        ) -> alloy_contract::SolCallBuilder<T, &P, getRelayGenesisCall, N> {
            self.call_builder(&getRelayGenesisCall {})
        }
        ///Creates a new call builder for the [`isAncestor`] function.
        pub fn isAncestor(
            &self,
            _ancestor: alloy::sol_types::private::FixedBytes<32>,
            _descendant: alloy::sol_types::private::FixedBytes<32>,
            _limit: alloy::sol_types::private::primitives::aliases::U256,
        ) -> alloy_contract::SolCallBuilder<T, &P, isAncestorCall, N> {
            self.call_builder(
                &isAncestorCall {
                    _ancestor,
                    _descendant,
                    _limit,
                },
            )
        }
        ///Creates a new call builder for the [`markNewHeaviest`] function.
        pub fn markNewHeaviest(
            &self,
            _ancestor: alloy::sol_types::private::FixedBytes<32>,
            _currentBest: alloy::sol_types::private::Bytes,
            _newBest: alloy::sol_types::private::Bytes,
            _limit: alloy::sol_types::private::primitives::aliases::U256,
        ) -> alloy_contract::SolCallBuilder<T, &P, markNewHeaviestCall, N> {
            self.call_builder(
                &markNewHeaviestCall {
                    _ancestor,
                    _currentBest,
                    _newBest,
                    _limit,
                },
            )
        }
    }
    /// Event filters.
    #[automatically_derived]
    impl<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    > FullRelayInstance<T, P, N> {
        /// Creates a new event filter using this contract instance's provider and address.
        ///
        /// Note that the type can be any event, not just those defined in this contract.
        /// Prefer using the other methods for building type-safe event filters.
        pub fn event_filter<E: alloy_sol_types::SolEvent>(
            &self,
        ) -> alloy_contract::Event<T, &P, E, N> {
            alloy_contract::Event::new_sol(&self.provider, &self.address)
        }
        ///Creates a new event filter for the [`Extension`] event.
        pub fn Extension_filter(&self) -> alloy_contract::Event<T, &P, Extension, N> {
            self.event_filter::<Extension>()
        }
        ///Creates a new event filter for the [`NewTip`] event.
        pub fn NewTip_filter(&self) -> alloy_contract::Event<T, &P, NewTip, N> {
            self.event_filter::<NewTip>()
        }
    }
}
